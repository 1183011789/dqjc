// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "http://localhost:3000/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.AccessToken
 * @header lbServices.AccessToken
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AccessToken` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AccessToken",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/accessTokens/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AccessToken.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/accessTokens/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#create
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#createMany
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#upsert
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/accessTokens",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#exists
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/accessTokens/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#findById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/accessTokens/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#find
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#findOne
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/accessTokens/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#updateAll
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/accessTokens/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#deleteById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/accessTokens/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#count
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#prototype$updateAttributes
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AccessToken id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/accessTokens/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#createChangeStream
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/accessTokens/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.findById() instead.
            "::findById::user::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.destroyById() instead.
            "::destroyById::user::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.updateById() instead.
            "::updateById::user::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.accessTokens() instead.
            "::get::user::accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.create() instead.
            "::create::user::accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.createMany() instead.
            "::createMany::user::accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.destroyAll() instead.
            "::delete::user::accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.count() instead.
            "::count::user::accessTokens": {
              url: urlBase + "/users/:id/accessTokens/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AccessToken#updateOrCreate
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#update
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#destroyById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#removeById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AccessToken#modelName
        * @propertyOf lbServices.AccessToken
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AccessToken`.
        */
        R.modelName = "AccessToken";


            /**
             * @ngdoc method
             * @name lbServices.AccessToken#user
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AccessToken id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::accessToken::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * **Details**
 *
 * Map principals to roles
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RoleMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RoleMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RoleMapping.role() instead.
            "prototype$__get__role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#create
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createMany
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsert
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RoleMappings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#exists
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RoleMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RoleMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#find
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findOne
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RoleMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAll
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RoleMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#deleteById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RoleMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#count
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RoleMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$updateAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RoleMappings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createChangeStream
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RoleMappings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.findById() instead.
            "::findById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "::destroyById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "::updateById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "::get::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "::create::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.createMany() instead.
            "::createMany::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "::delete::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "::count::Role::principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#update
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#destroyById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#removeById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RoleMapping#modelName
        * @propertyOf lbServices.RoleMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RoleMapping`.
        */
        R.modelName = "RoleMapping";


            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#role
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Role",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Roles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Role.principals.findById() instead.
            "prototype$__findById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "prototype$__destroyById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "prototype$__updateById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "prototype$__get__principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "prototype$__create__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "prototype$__delete__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "prototype$__count__principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#create
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createMany
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#upsert
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Roles",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#exists
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Roles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Roles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#find
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findOne
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Roles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#updateAll
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Roles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#deleteById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Roles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#count
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#prototype$updateAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Roles/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createChangeStream
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Roles/change-stream",
              method: "POST",
            },

            // INTERNAL. Use RoleMapping.role() instead.
            "::get::RoleMapping::role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            // INTERNAL. Use User.roles.findById() instead.
            "::findById::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roles.destroyById() instead.
            "::destroyById::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.updateById() instead.
            "::updateById::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.link() instead.
            "::link::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.unlink() instead.
            "::unlink::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.exists() instead.
            "::exists::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.roles() instead.
            "::get::user::roles": {
              isArray: true,
              url: urlBase + "/users/:id/roles",
              method: "GET",
            },

            // INTERNAL. Use User.roles.create() instead.
            "::create::user::roles": {
              url: urlBase + "/users/:id/roles",
              method: "POST",
            },

            // INTERNAL. Use User.roles.createMany() instead.
            "::createMany::user::roles": {
              isArray: true,
              url: urlBase + "/users/:id/roles",
              method: "POST",
            },

            // INTERNAL. Use User.roles.destroyAll() instead.
            "::delete::user::roles": {
              url: urlBase + "/users/:id/roles",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.count() instead.
            "::count::user::roles": {
              url: urlBase + "/users/:id/roles/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Role#updateOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Role#update
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Role#destroyById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#removeById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Role#modelName
        * @propertyOf lbServices.Role
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Role`.
        */
        R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Role#principals
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Queries principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#count
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Counts principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#create
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#createMany
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyAll
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Deletes all principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Delete a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#findById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Find a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#updateById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Update a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserCredential
 * @header lbServices.UserCredential
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserCredential` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserCredential",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/userCredentials/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserCredential.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/userCredentials/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#create
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/userCredentials",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#createMany
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/userCredentials",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#upsert
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/userCredentials",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#exists
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/userCredentials/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#findById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/userCredentials/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#find
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/userCredentials",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#findOne
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/userCredentials/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#updateAll
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/userCredentials/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#deleteById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/userCredentials/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#count
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/userCredentials/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#prototype$updateAttributes
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserCredential id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/userCredentials/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#createChangeStream
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/userCredentials/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.findById() instead.
            "::findById::user::credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.destroyById() instead.
            "::destroyById::user::credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.updateById() instead.
            "::updateById::user::credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.credentials() instead.
            "::get::user::credentials": {
              isArray: true,
              url: urlBase + "/users/:id/credentials",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.create() instead.
            "::create::user::credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.createMany() instead.
            "::createMany::user::credentials": {
              isArray: true,
              url: urlBase + "/users/:id/credentials",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.destroyAll() instead.
            "::delete::user::credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.count() instead.
            "::count::user::credentials": {
              url: urlBase + "/users/:id/credentials/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserCredential#updateOrCreate
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#update
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#destroyById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#removeById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.UserCredential#modelName
        * @propertyOf lbServices.UserCredential
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserCredential`.
        */
        R.modelName = "UserCredential";


            /**
             * @ngdoc method
             * @name lbServices.UserCredential#user
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserCredential id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::userCredential::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserIdentity
 * @header lbServices.UserIdentity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserIdentity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserIdentity",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/userIdentities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserIdentity.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/userIdentities/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#create
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/userIdentities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#createMany
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/userIdentities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#upsert
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/userIdentities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#exists
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/userIdentities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#findById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/userIdentities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#find
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/userIdentities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#findOne
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/userIdentities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#updateAll
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/userIdentities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#deleteById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/userIdentities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#count
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/userIdentities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#prototype$updateAttributes
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserIdentity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/userIdentities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#createChangeStream
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/userIdentities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.identities.findById() instead.
            "::findById::user::identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.identities.destroyById() instead.
            "::destroyById::user::identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.updateById() instead.
            "::updateById::user::identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.identities() instead.
            "::get::user::identities": {
              isArray: true,
              url: urlBase + "/users/:id/identities",
              method: "GET",
            },

            // INTERNAL. Use User.identities.create() instead.
            "::create::user::identities": {
              url: urlBase + "/users/:id/identities",
              method: "POST",
            },

            // INTERNAL. Use User.identities.createMany() instead.
            "::createMany::user::identities": {
              isArray: true,
              url: urlBase + "/users/:id/identities",
              method: "POST",
            },

            // INTERNAL. Use User.identities.destroyAll() instead.
            "::delete::user::identities": {
              url: urlBase + "/users/:id/identities",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.count() instead.
            "::count::user::identities": {
              url: urlBase + "/users/:id/identities/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#updateOrCreate
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#update
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#destroyById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#removeById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.UserIdentity#modelName
        * @propertyOf lbServices.UserIdentity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserIdentity`.
        */
        R.modelName = "UserIdentity";


            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#user
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserIdentity id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::userIdentity::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Setting
 * @header lbServices.Setting
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Setting` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Setting",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/settings/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Setting#create
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/settings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#createMany
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/settings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#upsert
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/settings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#exists
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/settings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#findById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/settings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#find
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/settings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#findOne
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/settings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#updateAll
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/settings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#deleteById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/settings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#count
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/settings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#prototype$updateAttributes
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/settings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#createChangeStream
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/settings/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Setting#updateOrCreate
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#update
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#destroyById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#removeById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Setting#modelName
        * @propertyOf lbServices.Setting
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Setting`.
        */
        R.modelName = "Setting";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AuthProvider
 * @header lbServices.AuthProvider
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AuthProvider` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AuthProvider",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AuthProviders/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#create
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AuthProviders",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#createMany
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AuthProviders",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#upsert
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AuthProviders",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#exists
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AuthProviders/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#findById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AuthProviders/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#find
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AuthProviders",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#findOne
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AuthProviders/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#updateAll
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AuthProviders/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#deleteById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AuthProviders/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#count
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AuthProviders/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#prototype$updateAttributes
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AuthProviders/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#createChangeStream
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AuthProviders/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#updateOrCreate
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#update
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#destroyById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#removeById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AuthProvider#modelName
        * @propertyOf lbServices.AuthProvider
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AuthProvider`.
        */
        R.modelName = "AuthProvider";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/users/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use User.accessTokens.findById() instead.
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.destroyById() instead.
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.updateById() instead.
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.identities.findById() instead.
            "prototype$__findById__identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.identities.destroyById() instead.
            "prototype$__destroyById__identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.updateById() instead.
            "prototype$__updateById__identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.credentials.findById() instead.
            "prototype$__findById__credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.destroyById() instead.
            "prototype$__destroyById__credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.updateById() instead.
            "prototype$__updateById__credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.findById() instead.
            "prototype$__findById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roles.destroyById() instead.
            "prototype$__destroyById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.updateById() instead.
            "prototype$__updateById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.link() instead.
            "prototype$__link__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.unlink() instead.
            "prototype$__unlink__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.exists() instead.
            "prototype$__exists__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.accessTokens() instead.
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.create() instead.
            "prototype$__create__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.destroyAll() instead.
            "prototype$__delete__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.count() instead.
            "prototype$__count__accessTokens": {
              url: urlBase + "/users/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use User.identities() instead.
            "prototype$__get__identities": {
              isArray: true,
              url: urlBase + "/users/:id/identities",
              method: "GET",
            },

            // INTERNAL. Use User.identities.create() instead.
            "prototype$__create__identities": {
              url: urlBase + "/users/:id/identities",
              method: "POST",
            },

            // INTERNAL. Use User.identities.destroyAll() instead.
            "prototype$__delete__identities": {
              url: urlBase + "/users/:id/identities",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.count() instead.
            "prototype$__count__identities": {
              url: urlBase + "/users/:id/identities/count",
              method: "GET",
            },

            // INTERNAL. Use User.credentials() instead.
            "prototype$__get__credentials": {
              isArray: true,
              url: urlBase + "/users/:id/credentials",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.create() instead.
            "prototype$__create__credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.destroyAll() instead.
            "prototype$__delete__credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.count() instead.
            "prototype$__count__credentials": {
              url: urlBase + "/users/:id/credentials/count",
              method: "GET",
            },

            // INTERNAL. Use User.roles() instead.
            "prototype$__get__roles": {
              isArray: true,
              url: urlBase + "/users/:id/roles",
              method: "GET",
            },

            // INTERNAL. Use User.roles.create() instead.
            "prototype$__create__roles": {
              url: urlBase + "/users/:id/roles",
              method: "POST",
            },

            // INTERNAL. Use User.roles.destroyAll() instead.
            "prototype$__delete__roles": {
              url: urlBase + "/users/:id/roles",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.count() instead.
            "prototype$__count__roles": {
              url: urlBase + "/users/:id/roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/users",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/users/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/users/reset",
              method: "POST",
            },

            // INTERNAL. Use AccessToken.user() instead.
            "::get::accessToken::user": {
              url: urlBase + "/accessTokens/:id/user",
              method: "GET",
            },

            // INTERNAL. Use UserCredential.user() instead.
            "::get::userCredential::user": {
              url: urlBase + "/userCredentials/:id/user",
              method: "GET",
            },

            // INTERNAL. Use UserIdentity.user() instead.
            "::get::userIdentity::user": {
              url: urlBase + "/userIdentities/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";

    /**
     * @ngdoc object
     * @name lbServices.User.accessTokens
     * @header lbServices.User.accessTokens
     * @object
     * @description
     *
     * The object `User.accessTokens` groups methods
     * manipulating `AccessToken` instances related to `User`.
     *
     * Call {@link lbServices.User#accessTokens User.accessTokens()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::get::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#count
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Counts accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accessTokens.count = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::count::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#create
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.create = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::create::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#createMany
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.createMany = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::createMany::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#destroyAll
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessTokens.destroyAll = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::delete::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#destroyById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessTokens.destroyById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::destroyById::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#findById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.findById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::findById::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#updateById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.updateById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::updateById::user::accessTokens"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.identities
     * @header lbServices.User.identities
     * @object
     * @description
     *
     * The object `User.identities` groups methods
     * manipulating `UserIdentity` instances related to `User`.
     *
     * Call {@link lbServices.User#identities User.identities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#identities
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries identities of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::get::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#count
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Counts identities of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.identities.count = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::count::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#create
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Creates a new instance in identities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.create = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::create::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#createMany
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Creates a new instance in identities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.createMany = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::createMany::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#destroyAll
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Deletes all identities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.identities.destroyAll = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::delete::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#destroyById
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Delete a related item by id for identities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for identities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.identities.destroyById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::destroyById::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#findById
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Find a related item by id for identities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for identities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.findById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::findById::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#updateById
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Update a related item by id for identities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for identities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.updateById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::updateById::user::identities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.credentials
     * @header lbServices.User.credentials
     * @object
     * @description
     *
     * The object `User.credentials` groups methods
     * manipulating `UserCredential` instances related to `User`.
     *
     * Call {@link lbServices.User#credentials User.credentials()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#credentials
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries credentials of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::get::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#count
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Counts credentials of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.credentials.count = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::count::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#create
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Creates a new instance in credentials of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.create = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::create::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#createMany
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Creates a new instance in credentials of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.createMany = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::createMany::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#destroyAll
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Deletes all credentials of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.credentials.destroyAll = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::delete::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#destroyById
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Delete a related item by id for credentials.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for credentials
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.credentials.destroyById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::destroyById::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#findById
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Find a related item by id for credentials.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for credentials
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.findById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::findById::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#updateById
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Update a related item by id for credentials.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for credentials
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.updateById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::updateById::user::credentials"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.roles
     * @header lbServices.User.roles
     * @object
     * @description
     *
     * The object `User.roles` groups methods
     * manipulating `Role` instances related to `User`.
     *
     * Call {@link lbServices.User#roles User.roles()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#roles
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries roles of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#count
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Counts roles of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roles.count = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::count::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#create
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Creates a new instance in roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.create = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::create::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#createMany
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Creates a new instance in roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.createMany = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::createMany::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#destroyAll
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Deletes all roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roles.destroyAll = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::delete::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#destroyById
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Delete a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roles.destroyById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::destroyById::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#exists
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Check the existence of roles relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.exists = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::exists::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#findById
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Find a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.findById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::findById::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#link
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Add a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.link = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::link::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#unlink
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Remove the roles relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roles.unlink = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::unlink::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#updateById
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Update a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.updateById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::updateById::user::roles"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Meta
 * @header lbServices.Meta
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Meta` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Meta",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Meta/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Meta#getModels
             * @methodOf lbServices.Meta
             *
             * @description
             *
             * Get all Models
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Meta` object.)
             * </em>
             */
            "getModels": {
              isArray: true,
              url: urlBase + "/Meta",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Meta#getModelById
             * @methodOf lbServices.Meta
             *
             * @description
             *
             * Get a Model by name
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `name` – `{*}` - Model name
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Meta` object.)
             * </em>
             */
            "getModelById": {
              url: urlBase + "/Meta/:name",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Meta#modelName
        * @propertyOf lbServices.Meta
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Meta`.
        */
        R.modelName = "Meta";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Rode
 * @header lbServices.Rode
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Rode` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Rode",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/rodes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Rode.aPropagandaPoints.findById() instead.
            "prototype$__findById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyById() instead.
            "prototype$__destroyById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.updateById() instead.
            "prototype$__updateById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.link() instead.
            "prototype$__link__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.unlink() instead.
            "prototype$__unlink__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.exists() instead.
            "prototype$__exists__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.baseStations.findById() instead.
            "prototype$__findById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.destroyById() instead.
            "prototype$__destroyById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.updateById() instead.
            "prototype$__updateById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.link() instead.
            "prototype$__link__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.unlink() instead.
            "prototype$__unlink__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.exists() instead.
            "prototype$__exists__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.bridges.findById() instead.
            "prototype$__findById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.destroyById() instead.
            "prototype$__destroyById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.updateById() instead.
            "prototype$__updateById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.link() instead.
            "prototype$__link__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.unlink() instead.
            "prototype$__unlink__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.exists() instead.
            "prototype$__exists__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.findById() instead.
            "prototype$__findById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyById() instead.
            "prototype$__destroyById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.updateById() instead.
            "prototype$__updateById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.link() instead.
            "prototype$__link__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.unlink() instead.
            "prototype$__unlink__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.exists() instead.
            "prototype$__exists__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.crossIronBridges.findById() instead.
            "prototype$__findById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyById() instead.
            "prototype$__destroyById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.updateById() instead.
            "prototype$__updateById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.link() instead.
            "prototype$__link__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.unlink() instead.
            "prototype$__unlink__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.exists() instead.
            "prototype$__exists__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.culverts.findById() instead.
            "prototype$__findById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.destroyById() instead.
            "prototype$__destroyById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.updateById() instead.
            "prototype$__updateById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.link() instead.
            "prototype$__link__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.unlink() instead.
            "prototype$__unlink__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.exists() instead.
            "prototype$__exists__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.findById() instead.
            "prototype$__findById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyById() instead.
            "prototype$__destroyById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.updateById() instead.
            "prototype$__updateById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.link() instead.
            "prototype$__link__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.unlink() instead.
            "prototype$__unlink__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.exists() instead.
            "prototype$__exists__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "HEAD",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__findById__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__findById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__destroyById__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__updateById__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__updateById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__link__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Add a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__link__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/rel/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__unlink__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Remove the fenceInfos relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__unlink__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/rel/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__exists__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Check the existence of fenceInfos relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__exists__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.keyPlaces.findById() instead.
            "prototype$__findById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyById() instead.
            "prototype$__destroyById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.updateById() instead.
            "prototype$__updateById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.link() instead.
            "prototype$__link__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.unlink() instead.
            "prototype$__unlink__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.exists() instead.
            "prototype$__exists__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.levelCrossings.findById() instead.
            "prototype$__findById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyById() instead.
            "prototype$__destroyById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.updateById() instead.
            "prototype$__updateById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.link() instead.
            "prototype$__link__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.unlink() instead.
            "prototype$__unlink__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.exists() instead.
            "prototype$__exists__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.servicePorts.findById() instead.
            "prototype$__findById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.destroyById() instead.
            "prototype$__destroyById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.updateById() instead.
            "prototype$__updateById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.link() instead.
            "prototype$__link__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.unlink() instead.
            "prototype$__unlink__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.exists() instead.
            "prototype$__exists__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.stations.findById() instead.
            "prototype$__findById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.destroyById() instead.
            "prototype$__destroyById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.updateById() instead.
            "prototype$__updateById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.link() instead.
            "prototype$__link__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.unlink() instead.
            "prototype$__unlink__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.exists() instead.
            "prototype$__exists__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.tunnels.findById() instead.
            "prototype$__findById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.destroyById() instead.
            "prototype$__destroyById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.updateById() instead.
            "prototype$__updateById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.link() instead.
            "prototype$__link__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.unlink() instead.
            "prototype$__unlink__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.exists() instead.
            "prototype$__exists__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.keyPersions.findById() instead.
            "prototype$__findById__keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPersions.destroyById() instead.
            "prototype$__destroyById__keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPersions.updateById() instead.
            "prototype$__updateById__keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPersions.link() instead.
            "prototype$__link__keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPersions.unlink() instead.
            "prototype$__unlink__keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPersions.exists() instead.
            "prototype$__exists__keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.monitorings.findById() instead.
            "prototype$__findById__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.monitorings.destroyById() instead.
            "prototype$__destroyById__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.monitorings.updateById() instead.
            "prototype$__updateById__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.monitorings.link() instead.
            "prototype$__link__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.monitorings.unlink() instead.
            "prototype$__unlink__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.monitorings.exists() instead.
            "prototype$__exists__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.emergencyAccessss.findById() instead.
            "prototype$__findById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.emergencyAccessss.destroyById() instead.
            "prototype$__destroyById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.emergencyAccessss.updateById() instead.
            "prototype$__updateById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.emergencyAccessss.link() instead.
            "prototype$__link__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.emergencyAccessss.unlink() instead.
            "prototype$__unlink__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.emergencyAccessss.exists() instead.
            "prototype$__exists__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.equipmentInfors.findById() instead.
            "prototype$__findById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.equipmentInfors.destroyById() instead.
            "prototype$__destroyById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.equipmentInfors.updateById() instead.
            "prototype$__updateById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.equipmentInfors.link() instead.
            "prototype$__link__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.equipmentInfors.unlink() instead.
            "prototype$__unlink__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.equipmentInfors.exists() instead.
            "prototype$__exists__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.findById() instead.
            "prototype$__findById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.destroyById() instead.
            "prototype$__destroyById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.updateById() instead.
            "prototype$__updateById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.link() instead.
            "prototype$__link__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.unlink() instead.
            "prototype$__unlink__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.exists() instead.
            "prototype$__exists__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.rodeClassifications() instead.
            "prototype$__get__rodeClassifications": {
              url: urlBase + "/rodes/:id/rodeClassifications",
              method: "GET",
            },

            // INTERNAL. Use Rode.theRoadStations.findById() instead.
            "prototype$__findById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.theRoadStations.destroyById() instead.
            "prototype$__destroyById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.theRoadStations.updateById() instead.
            "prototype$__updateById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.theRoadStations.link() instead.
            "prototype$__link__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.theRoadStations.unlink() instead.
            "prototype$__unlink__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.theRoadStations.exists() instead.
            "prototype$__exists__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.administrations() instead.
            "prototype$__get__administrations": {
              url: urlBase + "/rodes/:id/administrations",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints() instead.
            "prototype$__get__aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.create() instead.
            "prototype$__create__aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyAll() instead.
            "prototype$__delete__aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.count() instead.
            "prototype$__count__aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations() instead.
            "prototype$__get__baseStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/baseStations",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.create() instead.
            "prototype$__create__baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.destroyAll() instead.
            "prototype$__delete__baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.count() instead.
            "prototype$__count__baseStations": {
              url: urlBase + "/rodes/:id/baseStations/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges() instead.
            "prototype$__get__bridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.create() instead.
            "prototype$__create__bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.destroyAll() instead.
            "prototype$__delete__bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.count() instead.
            "prototype$__count__bridges": {
              url: urlBase + "/rodes/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts() instead.
            "prototype$__get__broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.create() instead.
            "prototype$__create__broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyAll() instead.
            "prototype$__delete__broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.count() instead.
            "prototype$__count__broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges() instead.
            "prototype$__get__crossIronBridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.create() instead.
            "prototype$__create__crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyAll() instead.
            "prototype$__delete__crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.count() instead.
            "prototype$__count__crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts() instead.
            "prototype$__get__culverts": {
              isArray: true,
              url: urlBase + "/rodes/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.create() instead.
            "prototype$__create__culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.destroyAll() instead.
            "prototype$__delete__culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.count() instead.
            "prototype$__count__culverts": {
              url: urlBase + "/rodes/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces() instead.
            "prototype$__get__hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.create() instead.
            "prototype$__create__hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyAll() instead.
            "prototype$__delete__hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.count() instead.
            "prototype$__count__hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__get__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries fenceInfos of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__get__fenceInfos": {
              isArray: true,
              url: urlBase + "/rodes/:id/fenceInfos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__create__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Creates a new instance in fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__create__fenceInfos": {
              url: urlBase + "/rodes/:id/fenceInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__delete__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Deletes all fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__fenceInfos": {
              url: urlBase + "/rodes/:id/fenceInfos",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__count__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Counts fenceInfos of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__fenceInfos": {
              url: urlBase + "/rodes/:id/fenceInfos/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces() instead.
            "prototype$__get__keyPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.create() instead.
            "prototype$__create__keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyAll() instead.
            "prototype$__delete__keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.count() instead.
            "prototype$__count__keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings() instead.
            "prototype$__get__levelCrossings": {
              isArray: true,
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.create() instead.
            "prototype$__create__levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyAll() instead.
            "prototype$__delete__levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.count() instead.
            "prototype$__count__levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts() instead.
            "prototype$__get__servicePorts": {
              isArray: true,
              url: urlBase + "/rodes/:id/servicePorts",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.create() instead.
            "prototype$__create__servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.destroyAll() instead.
            "prototype$__delete__servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.count() instead.
            "prototype$__count__servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations() instead.
            "prototype$__get__stations": {
              isArray: true,
              url: urlBase + "/rodes/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.create() instead.
            "prototype$__create__stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Rode.stations.destroyAll() instead.
            "prototype$__delete__stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.count() instead.
            "prototype$__count__stations": {
              url: urlBase + "/rodes/:id/stations/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels() instead.
            "prototype$__get__tunnels": {
              isArray: true,
              url: urlBase + "/rodes/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.create() instead.
            "prototype$__create__tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.destroyAll() instead.
            "prototype$__delete__tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.count() instead.
            "prototype$__count__tunnels": {
              url: urlBase + "/rodes/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPersions() instead.
            "prototype$__get__keyPersions": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPersions",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPersions.create() instead.
            "prototype$__create__keyPersions": {
              url: urlBase + "/rodes/:id/keyPersions",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPersions.destroyAll() instead.
            "prototype$__delete__keyPersions": {
              url: urlBase + "/rodes/:id/keyPersions",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPersions.count() instead.
            "prototype$__count__keyPersions": {
              url: urlBase + "/rodes/:id/keyPersions/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.monitorings() instead.
            "prototype$__get__monitorings": {
              isArray: true,
              url: urlBase + "/rodes/:id/monitorings",
              method: "GET",
            },

            // INTERNAL. Use Rode.monitorings.create() instead.
            "prototype$__create__monitorings": {
              url: urlBase + "/rodes/:id/monitorings",
              method: "POST",
            },

            // INTERNAL. Use Rode.monitorings.destroyAll() instead.
            "prototype$__delete__monitorings": {
              url: urlBase + "/rodes/:id/monitorings",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.monitorings.count() instead.
            "prototype$__count__monitorings": {
              url: urlBase + "/rodes/:id/monitorings/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.emergencyAccessss() instead.
            "prototype$__get__emergencyAccessss": {
              isArray: true,
              url: urlBase + "/rodes/:id/emergencyAccessss",
              method: "GET",
            },

            // INTERNAL. Use Rode.emergencyAccessss.create() instead.
            "prototype$__create__emergencyAccessss": {
              url: urlBase + "/rodes/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use Rode.emergencyAccessss.destroyAll() instead.
            "prototype$__delete__emergencyAccessss": {
              url: urlBase + "/rodes/:id/emergencyAccessss",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.emergencyAccessss.count() instead.
            "prototype$__count__emergencyAccessss": {
              url: urlBase + "/rodes/:id/emergencyAccessss/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.equipmentInfors() instead.
            "prototype$__get__equipmentInfors": {
              isArray: true,
              url: urlBase + "/rodes/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use Rode.equipmentInfors.create() instead.
            "prototype$__create__equipmentInfors": {
              url: urlBase + "/rodes/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Rode.equipmentInfors.destroyAll() instead.
            "prototype$__delete__equipmentInfors": {
              url: urlBase + "/rodes/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.equipmentInfors.count() instead.
            "prototype$__count__equipmentInfors": {
              url: urlBase + "/rodes/:id/equipmentInfors/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations() instead.
            "prototype$__get__securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/rodes/:id/securityEquipmentInformations",
              method: "GET",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.create() instead.
            "prototype$__create__securityEquipmentInformations": {
              url: urlBase + "/rodes/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.destroyAll() instead.
            "prototype$__delete__securityEquipmentInformations": {
              url: urlBase + "/rodes/:id/securityEquipmentInformations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.count() instead.
            "prototype$__count__securityEquipmentInformations": {
              url: urlBase + "/rodes/:id/securityEquipmentInformations/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.theRoadStations() instead.
            "prototype$__get__theRoadStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/theRoadStations",
              method: "GET",
            },

            // INTERNAL. Use Rode.theRoadStations.create() instead.
            "prototype$__create__theRoadStations": {
              url: urlBase + "/rodes/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.theRoadStations.destroyAll() instead.
            "prototype$__delete__theRoadStations": {
              url: urlBase + "/rodes/:id/theRoadStations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.theRoadStations.count() instead.
            "prototype$__count__theRoadStations": {
              url: urlBase + "/rodes/:id/theRoadStations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#create
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/rodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#createMany
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/rodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#upsert
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/rodes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#exists
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/rodes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#findById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/rodes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#find
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/rodes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#findOne
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/rodes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#updateAll
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/rodes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#deleteById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/rodes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#count
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$updateAttributes
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/rodes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#createChangeStream
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/rodes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#deleteMultiple
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/rodes/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#FuzzyPrecision
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `rodename` – `{string=}` -
             *
             *  - `classification` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/rodes/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#PagingFind
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/rodes/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Bridge.rodes.findById() instead.
            "::findById::Bridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bridge.rodes.destroyById() instead.
            "::destroyById::Bridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bridge.rodes.updateById() instead.
            "::updateById::Bridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bridge.rodes.link() instead.
            "::link::Bridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bridge.rodes.unlink() instead.
            "::unlink::Bridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bridge.rodes.exists() instead.
            "::exists::Bridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Bridge.rodes() instead.
            "::get::Bridge::rodes": {
              isArray: true,
              url: urlBase + "/Bridges/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Bridge.rodes.create() instead.
            "::create::Bridge::rodes": {
              url: urlBase + "/Bridges/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Bridge.rodes.createMany() instead.
            "::createMany::Bridge::rodes": {
              isArray: true,
              url: urlBase + "/Bridges/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Bridge.rodes.destroyAll() instead.
            "::delete::Bridge::rodes": {
              url: urlBase + "/Bridges/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Bridge.rodes.count() instead.
            "::count::Bridge::rodes": {
              url: urlBase + "/Bridges/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.findById() instead.
            "::findById::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.destroyById() instead.
            "::destroyById::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.updateById() instead.
            "::updateById::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.link() instead.
            "::link::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.unlink() instead.
            "::unlink::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.exists() instead.
            "::exists::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Tunnel.rodes() instead.
            "::get::Tunnel::rodes": {
              isArray: true,
              url: urlBase + "/tunnels/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.create() instead.
            "::create::Tunnel::rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Tunnel.rodes.createMany() instead.
            "::createMany::Tunnel::rodes": {
              isArray: true,
              url: urlBase + "/tunnels/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Tunnel.rodes.destroyAll() instead.
            "::delete::Tunnel::rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.count() instead.
            "::count::Tunnel::rodes": {
              url: urlBase + "/tunnels/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.findById() instead.
            "::findById::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyById() instead.
            "::destroyById::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.updateById() instead.
            "::updateById::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.link() instead.
            "::link::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.unlink() instead.
            "::unlink::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.exists() instead.
            "::exists::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use LevelCrossing.rodes() instead.
            "::get::LevelCrossing::rodes": {
              isArray: true,
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.create() instead.
            "::create::LevelCrossing::rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossing.rodes.createMany() instead.
            "::createMany::LevelCrossing::rodes": {
              isArray: true,
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyAll() instead.
            "::delete::LevelCrossing::rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.count() instead.
            "::count::LevelCrossing::rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.findById() instead.
            "::findById::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.destroyById() instead.
            "::destroyById::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.updateById() instead.
            "::updateById::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.link() instead.
            "::link::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.unlink() instead.
            "::unlink::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.exists() instead.
            "::exists::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Culvert.rodes() instead.
            "::get::Culvert::rodes": {
              isArray: true,
              url: urlBase + "/Culverts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.create() instead.
            "::create::Culvert::rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Culvert.rodes.createMany() instead.
            "::createMany::Culvert::rodes": {
              isArray: true,
              url: urlBase + "/Culverts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Culvert.rodes.destroyAll() instead.
            "::delete::Culvert::rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.count() instead.
            "::count::Culvert::rodes": {
              url: urlBase + "/Culverts/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use CrossIronBridge.rodes.findById() instead.
            "::findById::CrossIronBridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrossIronBridge.rodes.destroyById() instead.
            "::destroyById::CrossIronBridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrossIronBridge.rodes.updateById() instead.
            "::updateById::CrossIronBridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrossIronBridge.rodes.link() instead.
            "::link::CrossIronBridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrossIronBridge.rodes.unlink() instead.
            "::unlink::CrossIronBridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrossIronBridge.rodes.exists() instead.
            "::exists::CrossIronBridge::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrossIronBridge.rodes() instead.
            "::get::CrossIronBridge::rodes": {
              isArray: true,
              url: urlBase + "/CrossIronBridges/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use CrossIronBridge.rodes.create() instead.
            "::create::CrossIronBridge::rodes": {
              url: urlBase + "/CrossIronBridges/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use CrossIronBridge.rodes.createMany() instead.
            "::createMany::CrossIronBridge::rodes": {
              isArray: true,
              url: urlBase + "/CrossIronBridges/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use CrossIronBridge.rodes.destroyAll() instead.
            "::delete::CrossIronBridge::rodes": {
              url: urlBase + "/CrossIronBridges/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use CrossIronBridge.rodes.count() instead.
            "::count::CrossIronBridge::rodes": {
              url: urlBase + "/CrossIronBridges/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.findById() instead.
            "::findById::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.destroyById() instead.
            "::destroyById::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.updateById() instead.
            "::updateById::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.link() instead.
            "::link::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.unlink() instead.
            "::unlink::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.exists() instead.
            "::exists::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ServicePort.rodes() instead.
            "::get::ServicePort::rodes": {
              isArray: true,
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.create() instead.
            "::create::ServicePort::rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use ServicePort.rodes.createMany() instead.
            "::createMany::ServicePort::rodes": {
              isArray: true,
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use ServicePort.rodes.destroyAll() instead.
            "::delete::ServicePort::rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.count() instead.
            "::count::ServicePort::rodes": {
              url: urlBase + "/ServicePorts/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.findById() instead.
            "::findById::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.destroyById() instead.
            "::destroyById::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.updateById() instead.
            "::updateById::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.link() instead.
            "::link::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.unlink() instead.
            "::unlink::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.exists() instead.
            "::exists::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use BaseStation.rodes() instead.
            "::get::BaseStation::rodes": {
              isArray: true,
              url: urlBase + "/BaseStations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.create() instead.
            "::create::BaseStation::rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BaseStation.rodes.createMany() instead.
            "::createMany::BaseStation::rodes": {
              isArray: true,
              url: urlBase + "/BaseStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BaseStation.rodes.destroyAll() instead.
            "::delete::BaseStation::rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.count() instead.
            "::count::BaseStation::rodes": {
              url: urlBase + "/BaseStations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.findById() instead.
            "::findById::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyById() instead.
            "::destroyById::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.updateById() instead.
            "::updateById::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.link() instead.
            "::link::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.unlink() instead.
            "::unlink::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.exists() instead.
            "::exists::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use KeyPlace.rodes() instead.
            "::get::KeyPlace::rodes": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.create() instead.
            "::create::KeyPlace::rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.rodes.createMany() instead.
            "::createMany::KeyPlace::rodes": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyAll() instead.
            "::delete::KeyPlace::rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.count() instead.
            "::count::KeyPlace::rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.findById() instead.
            "::findById::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyById() instead.
            "::destroyById::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.updateById() instead.
            "::updateById::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.link() instead.
            "::link::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.unlink() instead.
            "::unlink::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.exists() instead.
            "::exists::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes() instead.
            "::get::HiddenDangerPlace::rodes": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.create() instead.
            "::create::HiddenDangerPlace::rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.createMany() instead.
            "::createMany::HiddenDangerPlace::rodes": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyAll() instead.
            "::delete::HiddenDangerPlace::rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.count() instead.
            "::count::HiddenDangerPlace::rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use KeyPersion.rodes.findById() instead.
            "::findById::KeyPersion::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPersion.rodes.destroyById() instead.
            "::destroyById::KeyPersion::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPersion.rodes.updateById() instead.
            "::updateById::KeyPersion::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPersion.rodes.link() instead.
            "::link::KeyPersion::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPersion.rodes.unlink() instead.
            "::unlink::KeyPersion::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPersion.rodes.exists() instead.
            "::exists::KeyPersion::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use KeyPersion.rodes() instead.
            "::get::KeyPersion::rodes": {
              isArray: true,
              url: urlBase + "/KeyPersions/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use KeyPersion.rodes.create() instead.
            "::create::KeyPersion::rodes": {
              url: urlBase + "/KeyPersions/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPersion.rodes.createMany() instead.
            "::createMany::KeyPersion::rodes": {
              isArray: true,
              url: urlBase + "/KeyPersions/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPersion.rodes.destroyAll() instead.
            "::delete::KeyPersion::rodes": {
              url: urlBase + "/KeyPersions/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPersion.rodes.count() instead.
            "::count::KeyPersion::rodes": {
              url: urlBase + "/KeyPersions/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.findById() instead.
            "::findById::BroadcastWarningPost::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.destroyById() instead.
            "::destroyById::BroadcastWarningPost::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.updateById() instead.
            "::updateById::BroadcastWarningPost::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.link() instead.
            "::link::BroadcastWarningPost::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.unlink() instead.
            "::unlink::BroadcastWarningPost::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.exists() instead.
            "::exists::BroadcastWarningPost::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes() instead.
            "::get::BroadcastWarningPost::rodes": {
              isArray: true,
              url: urlBase + "/BroadcastWarningPosts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.create() instead.
            "::create::BroadcastWarningPost::rodes": {
              url: urlBase + "/BroadcastWarningPosts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.createMany() instead.
            "::createMany::BroadcastWarningPost::rodes": {
              isArray: true,
              url: urlBase + "/BroadcastWarningPosts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.destroyAll() instead.
            "::delete::BroadcastWarningPost::rodes": {
              url: urlBase + "/BroadcastWarningPosts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.count() instead.
            "::count::BroadcastWarningPost::rodes": {
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.findById() instead.
            "::findById::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyById() instead.
            "::destroyById::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.updateById() instead.
            "::updateById::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.link() instead.
            "::link::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.unlink() instead.
            "::unlink::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.exists() instead.
            "::exists::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use APropagandaPoint.rodes() instead.
            "::get::APropagandaPoint::rodes": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.create() instead.
            "::create::APropagandaPoint::rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.rodes.createMany() instead.
            "::createMany::APropagandaPoint::rodes": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyAll() instead.
            "::delete::APropagandaPoint::rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.count() instead.
            "::count::APropagandaPoint::rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.findById() instead.
            "::findById::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.destroyById() instead.
            "::destroyById::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.updateById() instead.
            "::updateById::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.link() instead.
            "::link::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.unlink() instead.
            "::unlink::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.exists() instead.
            "::exists::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Station.rodes() instead.
            "::get::Station::rodes": {
              isArray: true,
              url: urlBase + "/Stations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.create() instead.
            "::create::Station::rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Station.rodes.createMany() instead.
            "::createMany::Station::rodes": {
              isArray: true,
              url: urlBase + "/Stations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Station.rodes.destroyAll() instead.
            "::delete::Station::rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.count() instead.
            "::count::Station::rodes": {
              url: urlBase + "/Stations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.rodes.findById() instead.
            "::findById::EquipmentInfor::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.rodes.destroyById() instead.
            "::destroyById::EquipmentInfor::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EquipmentInfor.rodes.updateById() instead.
            "::updateById::EquipmentInfor::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EquipmentInfor.rodes.link() instead.
            "::link::EquipmentInfor::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EquipmentInfor.rodes.unlink() instead.
            "::unlink::EquipmentInfor::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EquipmentInfor.rodes.exists() instead.
            "::exists::EquipmentInfor::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use EquipmentInfor.rodes() instead.
            "::get::EquipmentInfor::rodes": {
              isArray: true,
              url: urlBase + "/EquipmentInfors/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.rodes.create() instead.
            "::create::EquipmentInfor::rodes": {
              url: urlBase + "/EquipmentInfors/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use EquipmentInfor.rodes.createMany() instead.
            "::createMany::EquipmentInfor::rodes": {
              isArray: true,
              url: urlBase + "/EquipmentInfors/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use EquipmentInfor.rodes.destroyAll() instead.
            "::delete::EquipmentInfor::rodes": {
              url: urlBase + "/EquipmentInfors/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use EquipmentInfor.rodes.count() instead.
            "::count::EquipmentInfor::rodes": {
              url: urlBase + "/EquipmentInfors/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Monitoring.rodes.findById() instead.
            "::findById::Monitoring::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Monitoring.rodes.destroyById() instead.
            "::destroyById::Monitoring::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Monitoring.rodes.updateById() instead.
            "::updateById::Monitoring::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Monitoring.rodes.link() instead.
            "::link::Monitoring::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Monitoring.rodes.unlink() instead.
            "::unlink::Monitoring::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Monitoring.rodes.exists() instead.
            "::exists::Monitoring::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Monitoring.rodes() instead.
            "::get::Monitoring::rodes": {
              isArray: true,
              url: urlBase + "/Monitorings/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Monitoring.rodes.create() instead.
            "::create::Monitoring::rodes": {
              url: urlBase + "/Monitorings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Monitoring.rodes.createMany() instead.
            "::createMany::Monitoring::rodes": {
              isArray: true,
              url: urlBase + "/Monitorings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Monitoring.rodes.destroyAll() instead.
            "::delete::Monitoring::rodes": {
              url: urlBase + "/Monitorings/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Monitoring.rodes.count() instead.
            "::count::Monitoring::rodes": {
              url: urlBase + "/Monitorings/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.findById() instead.
            "::findById::EmergencyAccesss::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.destroyById() instead.
            "::destroyById::EmergencyAccesss::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.updateById() instead.
            "::updateById::EmergencyAccesss::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.link() instead.
            "::link::EmergencyAccesss::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.unlink() instead.
            "::unlink::EmergencyAccesss::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.exists() instead.
            "::exists::EmergencyAccesss::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use EmergencyAccesss.rodes() instead.
            "::get::EmergencyAccesss::rodes": {
              isArray: true,
              url: urlBase + "/EmergencyAccessses/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.create() instead.
            "::create::EmergencyAccesss::rodes": {
              url: urlBase + "/EmergencyAccessses/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.createMany() instead.
            "::createMany::EmergencyAccesss::rodes": {
              isArray: true,
              url: urlBase + "/EmergencyAccessses/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.destroyAll() instead.
            "::delete::EmergencyAccesss::rodes": {
              url: urlBase + "/EmergencyAccessses/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.count() instead.
            "::count::EmergencyAccesss::rodes": {
              url: urlBase + "/EmergencyAccessses/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.findById() instead.
            "::findById::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyById() instead.
            "::destroyById::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.updateById() instead.
            "::updateById::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.link() instead.
            "::link::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.unlink() instead.
            "::unlink::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.exists() instead.
            "::exists::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FenceInfo.rodes() instead.
            "::get::FenceInfo::rodes": {
              isArray: true,
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.create() instead.
            "::create::FenceInfo::rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use FenceInfo.rodes.createMany() instead.
            "::createMany::FenceInfo::rodes": {
              isArray: true,
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyAll() instead.
            "::delete::FenceInfo::rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.count() instead.
            "::count::FenceInfo::rodes": {
              url: urlBase + "/FenceInfos/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.findById() instead.
            "::findById::SecurityEquipmentInformation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.destroyById() instead.
            "::destroyById::SecurityEquipmentInformation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.updateById() instead.
            "::updateById::SecurityEquipmentInformation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.link() instead.
            "::link::SecurityEquipmentInformation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.unlink() instead.
            "::unlink::SecurityEquipmentInformation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.exists() instead.
            "::exists::SecurityEquipmentInformation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes() instead.
            "::get::SecurityEquipmentInformation::rodes": {
              isArray: true,
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.create() instead.
            "::create::SecurityEquipmentInformation::rodes": {
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.createMany() instead.
            "::createMany::SecurityEquipmentInformation::rodes": {
              isArray: true,
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.destroyAll() instead.
            "::delete::SecurityEquipmentInformation::rodes": {
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.count() instead.
            "::count::SecurityEquipmentInformation::rodes": {
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.rode() instead.
            "::get::RodeContain::rode": {
              url: urlBase + "/RodeContains/:id/rode",
              method: "GET",
            },

            // INTERNAL. Use RodeClassification.rodes.findById() instead.
            "::findById::RodeClassification::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RodeClassifications/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use RodeClassification.rodes.destroyById() instead.
            "::destroyById::RodeClassification::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RodeClassifications/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RodeClassification.rodes.updateById() instead.
            "::updateById::RodeClassification::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RodeClassifications/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RodeClassification.rodes() instead.
            "::get::RodeClassification::rodes": {
              isArray: true,
              url: urlBase + "/RodeClassifications/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use RodeClassification.rodes.create() instead.
            "::create::RodeClassification::rodes": {
              url: urlBase + "/RodeClassifications/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use RodeClassification.rodes.createMany() instead.
            "::createMany::RodeClassification::rodes": {
              isArray: true,
              url: urlBase + "/RodeClassifications/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use RodeClassification.rodes.destroyAll() instead.
            "::delete::RodeClassification::rodes": {
              url: urlBase + "/RodeClassifications/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use RodeClassification.rodes.count() instead.
            "::count::RodeClassification::rodes": {
              url: urlBase + "/RodeClassifications/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.rodes.findById() instead.
            "::findById::TheRoadStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.rodes.destroyById() instead.
            "::destroyById::TheRoadStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use TheRoadStation.rodes.updateById() instead.
            "::updateById::TheRoadStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use TheRoadStation.rodes.link() instead.
            "::link::TheRoadStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use TheRoadStation.rodes.unlink() instead.
            "::unlink::TheRoadStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use TheRoadStation.rodes.exists() instead.
            "::exists::TheRoadStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use TheRoadStation.rodes() instead.
            "::get::TheRoadStation::rodes": {
              isArray: true,
              url: urlBase + "/TheRoadStations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.rodes.create() instead.
            "::create::TheRoadStation::rodes": {
              url: urlBase + "/TheRoadStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use TheRoadStation.rodes.createMany() instead.
            "::createMany::TheRoadStation::rodes": {
              isArray: true,
              url: urlBase + "/TheRoadStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use TheRoadStation.rodes.destroyAll() instead.
            "::delete::TheRoadStation::rodes": {
              url: urlBase + "/TheRoadStations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use TheRoadStation.rodes.count() instead.
            "::count::TheRoadStation::rodes": {
              url: urlBase + "/TheRoadStations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Administration.rodes.findById() instead.
            "::findById::Administration::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Administration.rodes.destroyById() instead.
            "::destroyById::Administration::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.rodes.updateById() instead.
            "::updateById::Administration::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Administration.rodes() instead.
            "::get::Administration::rodes": {
              isArray: true,
              url: urlBase + "/Administrations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Administration.rodes.create() instead.
            "::create::Administration::rodes": {
              url: urlBase + "/Administrations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Administration.rodes.createMany() instead.
            "::createMany::Administration::rodes": {
              isArray: true,
              url: urlBase + "/Administrations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Administration.rodes.destroyAll() instead.
            "::delete::Administration::rodes": {
              url: urlBase + "/Administrations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.rodes.count() instead.
            "::count::Administration::rodes": {
              url: urlBase + "/Administrations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use RouteMapInformation.rodes() instead.
            "::get::RouteMapInformation::rodes": {
              url: urlBase + "/RouteMapInformations/:id/rodes",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Rode#updateOrCreate
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Rode#update
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Rode#destroyById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Rode#removeById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Rode#modelName
        * @propertyOf lbServices.Rode
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Rode`.
        */
        R.modelName = "Rode";

    /**
     * @ngdoc object
     * @name lbServices.Rode.aPropagandaPoints
     * @header lbServices.Rode.aPropagandaPoints
     * @object
     * @description
     *
     * The object `Rode.aPropagandaPoints` groups methods
     * manipulating `APropagandaPoint` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#aPropagandaPoints Rode.aPropagandaPoints()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#aPropagandaPoints
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries aPropagandaPoints of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::get::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#count
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Counts aPropagandaPoints of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.aPropagandaPoints.count = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::count::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#create
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Creates a new instance in aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.create = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::create::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#createMany
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Creates a new instance in aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.createMany = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::createMany::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#destroyAll
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Deletes all aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.destroyAll = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::delete::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#destroyById
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Delete a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.destroyById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::destroyById::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#exists
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Check the existence of aPropagandaPoints relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.exists = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::exists::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#findById
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Find a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.findById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::findById::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#link
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Add a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.link = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::link::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#unlink
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Remove the aPropagandaPoints relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.unlink = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::unlink::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#updateById
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Update a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.updateById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::updateById::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.baseStations
     * @header lbServices.Rode.baseStations
     * @object
     * @description
     *
     * The object `Rode.baseStations` groups methods
     * manipulating `BaseStation` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#baseStations Rode.baseStations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#baseStations
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries baseStations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::get::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#count
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Counts baseStations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.baseStations.count = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::count::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#create
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Creates a new instance in baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.create = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::create::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#createMany
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Creates a new instance in baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.createMany = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::createMany::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#destroyAll
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Deletes all baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.destroyAll = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::delete::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#destroyById
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Delete a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.destroyById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::destroyById::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#exists
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Check the existence of baseStations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.exists = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::exists::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#findById
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Find a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.findById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::findById::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#link
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Add a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.link = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::link::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#unlink
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Remove the baseStations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.unlink = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::unlink::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#updateById
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Update a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.updateById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::updateById::Rode::baseStations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.bridges
     * @header lbServices.Rode.bridges
     * @object
     * @description
     *
     * The object `Rode.bridges` groups methods
     * manipulating `Bridge` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#bridges Rode.bridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#bridges
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries bridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#count
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Counts bridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bridges.count = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::count::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#create
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.create = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::create::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#createMany
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.createMany = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::createMany::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#destroyAll
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Deletes all bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyAll = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::delete::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#destroyById
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Delete a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::destroyById::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#exists
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Check the existence of bridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.exists = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::exists::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#findById
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Find a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.findById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::findById::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#link
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Add a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.link = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::link::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#unlink
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Remove the bridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.unlink = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::unlink::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#updateById
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Update a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.updateById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::updateById::Rode::bridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.broadcastWarningPosts
     * @header lbServices.Rode.broadcastWarningPosts
     * @object
     * @description
     *
     * The object `Rode.broadcastWarningPosts` groups methods
     * manipulating `BroadcastWarningPost` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#broadcastWarningPosts Rode.broadcastWarningPosts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#broadcastWarningPosts
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries broadcastWarningPosts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::get::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#count
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Counts broadcastWarningPosts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.broadcastWarningPosts.count = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::count::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#create
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.create = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::create::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#createMany
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.createMany = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::createMany::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#destroyAll
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Deletes all broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyAll = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::delete::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#destroyById
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Delete a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::destroyById::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#exists
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Check the existence of broadcastWarningPosts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.exists = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::exists::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#findById
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Find a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.findById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::findById::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#link
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Add a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.link = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::link::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#unlink
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Remove the broadcastWarningPosts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.unlink = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::unlink::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#updateById
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Update a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.updateById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::updateById::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.crossIronBridges
     * @header lbServices.Rode.crossIronBridges
     * @object
     * @description
     *
     * The object `Rode.crossIronBridges` groups methods
     * manipulating `CrossIronBridge` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#crossIronBridges Rode.crossIronBridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#crossIronBridges
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries crossIronBridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::get::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#count
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Counts crossIronBridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.crossIronBridges.count = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::count::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#create
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Creates a new instance in crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.create = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::create::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#createMany
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Creates a new instance in crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.createMany = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::createMany::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#destroyAll
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Deletes all crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.destroyAll = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::delete::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#destroyById
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Delete a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.destroyById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::destroyById::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#exists
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Check the existence of crossIronBridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.exists = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::exists::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#findById
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Find a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.findById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::findById::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#link
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Add a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.link = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::link::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#unlink
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Remove the crossIronBridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.unlink = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::unlink::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#updateById
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Update a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.updateById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::updateById::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.culverts
     * @header lbServices.Rode.culverts
     * @object
     * @description
     *
     * The object `Rode.culverts` groups methods
     * manipulating `Culvert` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#culverts Rode.culverts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#culverts
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries culverts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#count
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Counts culverts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.culverts.count = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::count::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#create
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.create = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::create::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#createMany
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.createMany = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::createMany::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#destroyAll
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Deletes all culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyAll = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::delete::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#destroyById
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Delete a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::destroyById::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#exists
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Check the existence of culverts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.exists = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::exists::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#findById
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Find a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.findById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::findById::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#link
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Add a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.link = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::link::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#unlink
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Remove the culverts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.unlink = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::unlink::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#updateById
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Update a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.updateById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::updateById::Rode::culverts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.hiddenDangerPlaces
     * @header lbServices.Rode.hiddenDangerPlaces
     * @object
     * @description
     *
     * The object `Rode.hiddenDangerPlaces` groups methods
     * manipulating `HiddenDangerPlace` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#hiddenDangerPlaces Rode.hiddenDangerPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#hiddenDangerPlaces
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries hiddenDangerPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#count
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Counts hiddenDangerPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.hiddenDangerPlaces.count = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::count::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#create
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.create = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::create::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#createMany
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.createMany = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::createMany::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#destroyAll
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Deletes all hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyAll = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::delete::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#destroyById
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Delete a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::destroyById::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#exists
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Check the existence of hiddenDangerPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.exists = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::exists::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#findById
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Find a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.findById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::findById::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#link
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Add a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.link = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::link::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#unlink
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Remove the hiddenDangerPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.unlink = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::unlink::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#updateById
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Update a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.updateById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::updateById::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.keyPlaces
     * @header lbServices.Rode.keyPlaces
     * @object
     * @description
     *
     * The object `Rode.keyPlaces` groups methods
     * manipulating `KeyPlace` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#keyPlaces Rode.keyPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#keyPlaces
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries keyPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#count
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Counts keyPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPlaces.count = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::count::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#create
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.create = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::create::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#createMany
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.createMany = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::createMany::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#destroyAll
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Deletes all keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyAll = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::delete::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#destroyById
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Delete a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::destroyById::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#exists
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Check the existence of keyPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.exists = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::exists::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#findById
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Find a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.findById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::findById::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#link
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Add a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.link = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::link::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#unlink
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Remove the keyPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.unlink = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::unlink::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#updateById
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Update a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.updateById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::updateById::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.levelCrossings
     * @header lbServices.Rode.levelCrossings
     * @object
     * @description
     *
     * The object `Rode.levelCrossings` groups methods
     * manipulating `LevelCrossing` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#levelCrossings Rode.levelCrossings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#levelCrossings
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries levelCrossings of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::get::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#count
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Counts levelCrossings of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.levelCrossings.count = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::count::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#create
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.create = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::create::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#createMany
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.createMany = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::createMany::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#destroyAll
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Deletes all levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyAll = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::delete::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#destroyById
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Delete a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::destroyById::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#exists
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Check the existence of levelCrossings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.exists = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::exists::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#findById
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Find a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.findById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::findById::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#link
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Add a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.link = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::link::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#unlink
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Remove the levelCrossings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.unlink = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::unlink::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#updateById
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Update a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.updateById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::updateById::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.servicePorts
     * @header lbServices.Rode.servicePorts
     * @object
     * @description
     *
     * The object `Rode.servicePorts` groups methods
     * manipulating `ServicePort` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#servicePorts Rode.servicePorts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#servicePorts
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries servicePorts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::get::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#count
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Counts servicePorts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.servicePorts.count = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::count::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#create
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Creates a new instance in servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.create = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::create::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#createMany
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Creates a new instance in servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.createMany = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::createMany::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#destroyAll
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Deletes all servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.destroyAll = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::delete::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#destroyById
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Delete a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.destroyById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::destroyById::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#exists
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Check the existence of servicePorts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.exists = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::exists::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#findById
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Find a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.findById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::findById::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#link
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Add a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.link = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::link::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#unlink
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Remove the servicePorts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.unlink = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::unlink::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#updateById
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Update a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.updateById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::updateById::Rode::servicePorts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.stations
     * @header lbServices.Rode.stations
     * @object
     * @description
     *
     * The object `Rode.stations` groups methods
     * manipulating `Station` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#stations Rode.stations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#stations
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries stations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#count
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Counts stations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.stations.count = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::count::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#create
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.create = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::create::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#createMany
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.createMany = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::createMany::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#destroyAll
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Deletes all stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyAll = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::delete::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#destroyById
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Delete a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::destroyById::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#exists
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Check the existence of stations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.exists = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::exists::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#findById
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Find a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.findById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::findById::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#link
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Add a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.link = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::link::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#unlink
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Remove the stations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.unlink = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::unlink::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#updateById
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Update a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.updateById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::updateById::Rode::stations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.tunnels
     * @header lbServices.Rode.tunnels
     * @object
     * @description
     *
     * The object `Rode.tunnels` groups methods
     * manipulating `Tunnel` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#tunnels Rode.tunnels()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#tunnels
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries tunnels of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::get::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#count
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Counts tunnels of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tunnels.count = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::count::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#create
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.create = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::create::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#createMany
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.createMany = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::createMany::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#destroyAll
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Deletes all tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyAll = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::delete::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#destroyById
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Delete a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::destroyById::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#exists
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Check the existence of tunnels relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.exists = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::exists::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#findById
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Find a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.findById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::findById::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#link
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Add a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.link = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::link::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#unlink
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Remove the tunnels relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.unlink = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::unlink::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#updateById
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Update a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.updateById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::updateById::Rode::tunnels"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.keyPersions
     * @header lbServices.Rode.keyPersions
     * @object
     * @description
     *
     * The object `Rode.keyPersions` groups methods
     * manipulating `KeyPersion` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#keyPersions Rode.keyPersions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#keyPersions
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries keyPersions of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersions = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::get::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#count
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Counts keyPersions of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPersions.count = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::count::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#create
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Creates a new instance in keyPersions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersions.create = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::create::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#createMany
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Creates a new instance in keyPersions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersions.createMany = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::createMany::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#destroyAll
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Deletes all keyPersions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPersions.destroyAll = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::delete::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#destroyById
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Delete a related item by id for keyPersions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPersions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPersions.destroyById = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::destroyById::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#exists
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Check the existence of keyPersions relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPersions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersions.exists = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::exists::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#findById
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Find a related item by id for keyPersions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPersions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersions.findById = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::findById::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#link
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Add a related item by id for keyPersions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPersions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersions.link = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::link::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#unlink
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Remove the keyPersions relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPersions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPersions.unlink = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::unlink::Rode::keyPersions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPersions#updateById
             * @methodOf lbServices.Rode.keyPersions
             *
             * @description
             *
             * Update a related item by id for keyPersions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPersions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersions.updateById = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::updateById::Rode::keyPersions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.monitorings
     * @header lbServices.Rode.monitorings
     * @object
     * @description
     *
     * The object `Rode.monitorings` groups methods
     * manipulating `Monitoring` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#monitorings Rode.monitorings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#monitorings
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries monitorings of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::get::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#count
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Counts monitorings of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.monitorings.count = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::count::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#create
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Creates a new instance in monitorings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.create = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::create::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#createMany
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Creates a new instance in monitorings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.createMany = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::createMany::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#destroyAll
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Deletes all monitorings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.monitorings.destroyAll = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::delete::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#destroyById
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Delete a related item by id for monitorings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.monitorings.destroyById = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::destroyById::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#exists
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Check the existence of monitorings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.exists = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::exists::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#findById
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Find a related item by id for monitorings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.findById = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::findById::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#link
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Add a related item by id for monitorings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.link = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::link::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#unlink
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Remove the monitorings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.monitorings.unlink = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::unlink::Rode::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.monitorings#updateById
             * @methodOf lbServices.Rode.monitorings
             *
             * @description
             *
             * Update a related item by id for monitorings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.updateById = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::updateById::Rode::monitorings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.emergencyAccessss
     * @header lbServices.Rode.emergencyAccessss
     * @object
     * @description
     *
     * The object `Rode.emergencyAccessss` groups methods
     * manipulating `EmergencyAccesss` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#emergencyAccessss Rode.emergencyAccessss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#emergencyAccessss
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries emergencyAccessss of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::get::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#count
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Counts emergencyAccessss of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.emergencyAccessss.count = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::count::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#create
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Creates a new instance in emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.create = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::create::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#createMany
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Creates a new instance in emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.createMany = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::createMany::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#destroyAll
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Deletes all emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.emergencyAccessss.destroyAll = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::delete::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#destroyById
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Delete a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.emergencyAccessss.destroyById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::destroyById::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#exists
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Check the existence of emergencyAccessss relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.exists = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::exists::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#findById
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Find a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.findById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::findById::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#link
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Add a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.link = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::link::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#unlink
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Remove the emergencyAccessss relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.emergencyAccessss.unlink = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::unlink::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.emergencyAccessss#updateById
             * @methodOf lbServices.Rode.emergencyAccessss
             *
             * @description
             *
             * Update a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.updateById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::updateById::Rode::emergencyAccessss"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.equipmentInfors
     * @header lbServices.Rode.equipmentInfors
     * @object
     * @description
     *
     * The object `Rode.equipmentInfors` groups methods
     * manipulating `EquipmentInfor` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#equipmentInfors Rode.equipmentInfors()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#equipmentInfors
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries equipmentInfors of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::get::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#count
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Counts equipmentInfors of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.equipmentInfors.count = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::count::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#create
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.create = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::create::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#createMany
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.createMany = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::createMany::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#destroyAll
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Deletes all equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyAll = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::delete::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#destroyById
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Delete a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::destroyById::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#exists
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Check the existence of equipmentInfors relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.exists = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::exists::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#findById
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Find a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.findById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::findById::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#link
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Add a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.link = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::link::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#unlink
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Remove the equipmentInfors relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.unlink = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::unlink::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.equipmentInfors#updateById
             * @methodOf lbServices.Rode.equipmentInfors
             *
             * @description
             *
             * Update a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.updateById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::updateById::Rode::equipmentInfors"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.securityEquipmentInformations
     * @header lbServices.Rode.securityEquipmentInformations
     * @object
     * @description
     *
     * The object `Rode.securityEquipmentInformations` groups methods
     * manipulating `SecurityEquipmentInformation` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#securityEquipmentInformations Rode.securityEquipmentInformations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#securityEquipmentInformations
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries securityEquipmentInformations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::get::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#count
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Counts securityEquipmentInformations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.securityEquipmentInformations.count = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::count::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#create
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Creates a new instance in securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.create = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::create::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#createMany
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Creates a new instance in securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.createMany = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::createMany::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#destroyAll
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Deletes all securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.securityEquipmentInformations.destroyAll = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::delete::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#destroyById
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Delete a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.securityEquipmentInformations.destroyById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::destroyById::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#exists
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Check the existence of securityEquipmentInformations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.exists = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::exists::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#findById
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Find a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.findById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::findById::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#link
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Add a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.link = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::link::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#unlink
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Remove the securityEquipmentInformations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.securityEquipmentInformations.unlink = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::unlink::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.securityEquipmentInformations#updateById
             * @methodOf lbServices.Rode.securityEquipmentInformations
             *
             * @description
             *
             * Update a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.updateById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::updateById::Rode::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode#rodeClassifications
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Fetches belongsTo relation rodeClassifications.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
        R.rodeClassifications = function() {
          var TargetResource = $injector.get("RodeClassification");
          var action = TargetResource["::get::Rode::rodeClassifications"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.theRoadStations
     * @header lbServices.Rode.theRoadStations
     * @object
     * @description
     *
     * The object `Rode.theRoadStations` groups methods
     * manipulating `TheRoadStation` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#theRoadStations Rode.theRoadStations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#theRoadStations
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries theRoadStations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::get::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#count
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Counts theRoadStations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.theRoadStations.count = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::count::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#create
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Creates a new instance in theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.create = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::create::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#createMany
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Creates a new instance in theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.createMany = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::createMany::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#destroyAll
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Deletes all theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.theRoadStations.destroyAll = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::delete::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#destroyById
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Delete a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.theRoadStations.destroyById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::destroyById::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#exists
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Check the existence of theRoadStations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.exists = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::exists::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#findById
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Find a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.findById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::findById::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#link
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Add a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.link = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::link::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#unlink
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Remove the theRoadStations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.theRoadStations.unlink = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::unlink::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.theRoadStations#updateById
             * @methodOf lbServices.Rode.theRoadStations
             *
             * @description
             *
             * Update a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.updateById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::updateById::Rode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode#administrations
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Fetches belongsTo relation administrations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
        R.administrations = function() {
          var TargetResource = $injector.get("Administration");
          var action = TargetResource["::get::Rode::administrations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Bridge
 * @header lbServices.Bridge
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Bridge` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Bridge",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Bridges/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Bridge.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Bridge.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bridge.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bridge.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Bridge.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Bridge.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Bridges/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Bridge.guardian() instead.
            "prototype$__get__guardian": {
              url: urlBase + "/Bridges/:id/guardian",
              method: "GET",
            },

            // INTERNAL. Use Bridge.bridgeClass() instead.
            "prototype$__get__bridgeClass": {
              url: urlBase + "/Bridges/:id/bridgeClass",
              method: "GET",
            },

            // INTERNAL. Use Bridge.affiliatedinstitution() instead.
            "prototype$__get__affiliatedinstitution": {
              url: urlBase + "/Bridges/:id/affiliatedinstitution",
              method: "GET",
            },

            // INTERNAL. Use Bridge.alignment() instead.
            "prototype$__get__alignment": {
              url: urlBase + "/Bridges/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use Bridge.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/Bridges/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Bridge.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/Bridges/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Bridge.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/Bridges/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Bridge.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/Bridges/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#create
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Bridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#createMany
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Bridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#upsert
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Bridges",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#exists
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Bridges/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#findById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Bridges/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#find
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Bridges",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#findOne
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Bridges/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#updateAll
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Bridges/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#deleteById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Bridges/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#count
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Bridges/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#prototype$updateAttributes
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Bridges/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#createChangeStream
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Bridges/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#deleteMultiple
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/Bridges/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#FuzzyPrecision
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bridgename` – `{string=}` -
             *
             *  - `railwayhighwaypublic` – `{string=}` -
             *
             *  - `guardian` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/Bridges/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#PagingFind
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Bridges/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.findById() instead.
            "::findById::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.destroyById() instead.
            "::destroyById::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.updateById() instead.
            "::updateById::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.link() instead.
            "::link::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.unlink() instead.
            "::unlink::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.exists() instead.
            "::exists::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.bridges() instead.
            "::get::Rode::bridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.create() instead.
            "::create::Rode::bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.createMany() instead.
            "::createMany::Rode::bridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.destroyAll() instead.
            "::delete::Rode::bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.count() instead.
            "::count::Rode::bridges": {
              url: urlBase + "/rodes/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.bridge() instead.
            "::get::RodeContain::bridge": {
              url: urlBase + "/RodeContains/:id/bridge",
              method: "GET",
            },

            // INTERNAL. Use Guardian.bridges.findById() instead.
            "::findById::Guardian::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.bridges.destroyById() instead.
            "::destroyById::Guardian::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.bridges.updateById() instead.
            "::updateById::Guardian::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.bridges() instead.
            "::get::Guardian::bridges": {
              isArray: true,
              url: urlBase + "/Guardians/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Guardian.bridges.create() instead.
            "::create::Guardian::bridges": {
              url: urlBase + "/Guardians/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Guardian.bridges.createMany() instead.
            "::createMany::Guardian::bridges": {
              isArray: true,
              url: urlBase + "/Guardians/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Guardian.bridges.destroyAll() instead.
            "::delete::Guardian::bridges": {
              url: urlBase + "/Guardians/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.bridges.count() instead.
            "::count::Guardian::bridges": {
              url: urlBase + "/Guardians/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use BridgeClass.bridges.findById() instead.
            "::findById::BridgeClass::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BridgeClasses/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use BridgeClass.bridges.destroyById() instead.
            "::destroyById::BridgeClass::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BridgeClasses/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BridgeClass.bridges.updateById() instead.
            "::updateById::BridgeClass::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BridgeClasses/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BridgeClass.bridges() instead.
            "::get::BridgeClass::bridges": {
              isArray: true,
              url: urlBase + "/BridgeClasses/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use BridgeClass.bridges.create() instead.
            "::create::BridgeClass::bridges": {
              url: urlBase + "/BridgeClasses/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use BridgeClass.bridges.createMany() instead.
            "::createMany::BridgeClass::bridges": {
              isArray: true,
              url: urlBase + "/BridgeClasses/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use BridgeClass.bridges.destroyAll() instead.
            "::delete::BridgeClass::bridges": {
              url: urlBase + "/BridgeClasses/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use BridgeClass.bridges.count() instead.
            "::count::BridgeClass::bridges": {
              url: urlBase + "/BridgeClasses/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.findById() instead.
            "::findById::AffiliatedInstitution::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.destroyById() instead.
            "::destroyById::AffiliatedInstitution::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.updateById() instead.
            "::updateById::AffiliatedInstitution::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges() instead.
            "::get::AffiliatedInstitution::bridges": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.create() instead.
            "::create::AffiliatedInstitution::bridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.createMany() instead.
            "::createMany::AffiliatedInstitution::bridges": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.destroyAll() instead.
            "::delete::AffiliatedInstitution::bridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.count() instead.
            "::count::AffiliatedInstitution::bridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.bridges.findById() instead.
            "::findById::Alignment::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.bridges.destroyById() instead.
            "::destroyById::Alignment::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.bridges.updateById() instead.
            "::updateById::Alignment::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.bridges() instead.
            "::get::Alignment::bridges": {
              isArray: true,
              url: urlBase + "/Alignments/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Alignment.bridges.create() instead.
            "::create::Alignment::bridges": {
              url: urlBase + "/Alignments/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Alignment.bridges.createMany() instead.
            "::createMany::Alignment::bridges": {
              isArray: true,
              url: urlBase + "/Alignments/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Alignment.bridges.destroyAll() instead.
            "::delete::Alignment::bridges": {
              url: urlBase + "/Alignments/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.bridges.count() instead.
            "::count::Alignment::bridges": {
              url: urlBase + "/Alignments/:id/bridges/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Bridge#updateOrCreate
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Bridge#update
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Bridge#destroyById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Bridge#removeById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Bridge#modelName
        * @propertyOf lbServices.Bridge
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Bridge`.
        */
        R.modelName = "Bridge";

    /**
     * @ngdoc object
     * @name lbServices.Bridge.rodes
     * @header lbServices.Bridge.rodes
     * @object
     * @description
     *
     * The object `Bridge.rodes` groups methods
     * manipulating `Rode` instances related to `Bridge`.
     *
     * Call {@link lbServices.Bridge#rodes Bridge.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Bridge#rodes
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Queries rodes of Bridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#count
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Counts rodes of Bridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#create
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#createMany
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#destroyAll
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#destroyById
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#exists
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#findById
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#link
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#unlink
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge.rodes#updateById
             * @methodOf lbServices.Bridge.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Bridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge#guardian
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Fetches belongsTo relation guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
        R.guardian = function() {
          var TargetResource = $injector.get("Guardian");
          var action = TargetResource["::get::Bridge::guardian"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge#bridgeClass
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Fetches belongsTo relation bridgeClass.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
        R.bridgeClass = function() {
          var TargetResource = $injector.get("BridgeClass");
          var action = TargetResource["::get::Bridge::bridgeClass"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge#affiliatedinstitution
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedinstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedinstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::Bridge::affiliatedinstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Bridge#alignment
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Fetches belongsTo relation alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignment = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::Bridge::alignment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Tunnel
 * @header lbServices.Tunnel
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tunnel` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Tunnel",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/tunnels/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Tunnel.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Tunnel.guardian() instead.
            "prototype$__get__guardian": {
              url: urlBase + "/tunnels/:id/guardian",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/tunnels/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.alignment() instead.
            "prototype$__get__alignment": {
              url: urlBase + "/tunnels/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/tunnels/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Tunnel.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/tunnels/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#create
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/tunnels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#createMany
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/tunnels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#upsert
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/tunnels",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#exists
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/tunnels/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#findById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/tunnels/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#find
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/tunnels",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#findOne
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/tunnels/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#updateAll
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/tunnels/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#deleteById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/tunnels/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#count
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/tunnels/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#prototype$updateAttributes
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/tunnels/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#createChangeStream
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/tunnels/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#deleteMultiple
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/tunnels/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#FuzzyPrecision
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `tunnelname` – `{string=}` -
             *
             *  - `guardian ` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/tunnels/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#PagingFind
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/tunnels/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.findById() instead.
            "::findById::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.destroyById() instead.
            "::destroyById::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.updateById() instead.
            "::updateById::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.link() instead.
            "::link::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.unlink() instead.
            "::unlink::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.exists() instead.
            "::exists::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.tunnels() instead.
            "::get::Rode::tunnels": {
              isArray: true,
              url: urlBase + "/rodes/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.create() instead.
            "::create::Rode::tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.createMany() instead.
            "::createMany::Rode::tunnels": {
              isArray: true,
              url: urlBase + "/rodes/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.destroyAll() instead.
            "::delete::Rode::tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.count() instead.
            "::count::Rode::tunnels": {
              url: urlBase + "/rodes/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.tunnel() instead.
            "::get::RodeContain::tunnel": {
              url: urlBase + "/RodeContains/:id/tunnel",
              method: "GET",
            },

            // INTERNAL. Use Guardian.tunnels.findById() instead.
            "::findById::Guardian::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.tunnels.destroyById() instead.
            "::destroyById::Guardian::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.tunnels.updateById() instead.
            "::updateById::Guardian::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.tunnels() instead.
            "::get::Guardian::tunnels": {
              isArray: true,
              url: urlBase + "/Guardians/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Guardian.tunnels.create() instead.
            "::create::Guardian::tunnels": {
              url: urlBase + "/Guardians/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Guardian.tunnels.createMany() instead.
            "::createMany::Guardian::tunnels": {
              isArray: true,
              url: urlBase + "/Guardians/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Guardian.tunnels.destroyAll() instead.
            "::delete::Guardian::tunnels": {
              url: urlBase + "/Guardians/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.tunnels.count() instead.
            "::count::Guardian::tunnels": {
              url: urlBase + "/Guardians/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.findById() instead.
            "::findById::AffiliatedInstitution::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.destroyById() instead.
            "::destroyById::AffiliatedInstitution::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.updateById() instead.
            "::updateById::AffiliatedInstitution::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels() instead.
            "::get::AffiliatedInstitution::tunnels": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.create() instead.
            "::create::AffiliatedInstitution::tunnels": {
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.createMany() instead.
            "::createMany::AffiliatedInstitution::tunnels": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.destroyAll() instead.
            "::delete::AffiliatedInstitution::tunnels": {
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.count() instead.
            "::count::AffiliatedInstitution::tunnels": {
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.tunnels.findById() instead.
            "::findById::Alignment::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.tunnels.destroyById() instead.
            "::destroyById::Alignment::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.tunnels.updateById() instead.
            "::updateById::Alignment::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.tunnels() instead.
            "::get::Alignment::tunnels": {
              isArray: true,
              url: urlBase + "/Alignments/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Alignment.tunnels.create() instead.
            "::create::Alignment::tunnels": {
              url: urlBase + "/Alignments/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Alignment.tunnels.createMany() instead.
            "::createMany::Alignment::tunnels": {
              isArray: true,
              url: urlBase + "/Alignments/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Alignment.tunnels.destroyAll() instead.
            "::delete::Alignment::tunnels": {
              url: urlBase + "/Alignments/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.tunnels.count() instead.
            "::count::Alignment::tunnels": {
              url: urlBase + "/Alignments/:id/tunnels/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Tunnel#updateOrCreate
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#update
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#destroyById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#removeById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Tunnel#modelName
        * @propertyOf lbServices.Tunnel
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Tunnel`.
        */
        R.modelName = "Tunnel";

    /**
     * @ngdoc object
     * @name lbServices.Tunnel.rodes
     * @header lbServices.Tunnel.rodes
     * @object
     * @description
     *
     * The object `Tunnel.rodes` groups methods
     * manipulating `Rode` instances related to `Tunnel`.
     *
     * Call {@link lbServices.Tunnel#rodes Tunnel.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Tunnel#rodes
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Queries rodes of Tunnel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#count
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Counts rodes of Tunnel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#create
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#createMany
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#destroyAll
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#destroyById
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#exists
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#findById
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#link
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#unlink
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#updateById
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#guardian
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Fetches belongsTo relation guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
        R.guardian = function() {
          var TargetResource = $injector.get("Guardian");
          var action = TargetResource["::get::Tunnel::guardian"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#affiliatedInstitution
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::Tunnel::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#alignment
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Fetches belongsTo relation alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignment = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::Tunnel::alignment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LevelCrossing
 * @header lbServices.LevelCrossing
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LevelCrossing` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LevelCrossing",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LevelCrossings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LevelCrossing.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use LevelCrossing.levelCrossingCrossproperty() instead.
            "prototype$__get__levelCrossingCrossproperty": {
              url: urlBase + "/LevelCrossings/:id/levelCrossingCrossproperty",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.guardian() instead.
            "prototype$__get__guardian": {
              url: urlBase + "/LevelCrossings/:id/guardian",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/LevelCrossings/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.crossProperty() instead.
            "prototype$__get__crossProperty": {
              url: urlBase + "/LevelCrossings/:id/crossProperty",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.alignment() instead.
            "prototype$__get__alignment": {
              url: urlBase + "/LevelCrossings/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#create
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LevelCrossings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#createMany
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LevelCrossings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#upsert
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LevelCrossings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#exists
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LevelCrossings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#findById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LevelCrossings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#find
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LevelCrossings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#findOne
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LevelCrossings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#updateAll
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LevelCrossings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#deleteById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LevelCrossings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#count
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LevelCrossings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#prototype$updateAttributes
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LevelCrossings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#createChangeStream
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LevelCrossings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#deleteMultiple
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/LevelCrossings/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#fuzzyQuery
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `levelcrossname ` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `basestations` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/LevelCrossings/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#PagingFind
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/LevelCrossings/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.findById() instead.
            "::findById::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyById() instead.
            "::destroyById::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.updateById() instead.
            "::updateById::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.link() instead.
            "::link::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.unlink() instead.
            "::unlink::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.exists() instead.
            "::exists::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.levelCrossings() instead.
            "::get::Rode::levelCrossings": {
              isArray: true,
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.create() instead.
            "::create::Rode::levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.createMany() instead.
            "::createMany::Rode::levelCrossings": {
              isArray: true,
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyAll() instead.
            "::delete::Rode::levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.count() instead.
            "::count::Rode::levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.levelCrossing() instead.
            "::get::RodeContain::levelCrossing": {
              url: urlBase + "/RodeContains/:id/levelCrossing",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.findById() instead.
            "::findById::LevelCrossingCrossproperty::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.destroyById() instead.
            "::destroyById::LevelCrossingCrossproperty::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.updateById() instead.
            "::updateById::LevelCrossingCrossproperty::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings() instead.
            "::get::LevelCrossingCrossproperty::levelCrossings": {
              isArray: true,
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.create() instead.
            "::create::LevelCrossingCrossproperty::levelCrossings": {
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.createMany() instead.
            "::createMany::LevelCrossingCrossproperty::levelCrossings": {
              isArray: true,
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.destroyAll() instead.
            "::delete::LevelCrossingCrossproperty::levelCrossings": {
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.count() instead.
            "::count::LevelCrossingCrossproperty::levelCrossings": {
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use Guardian.levelCrossings.findById() instead.
            "::findById::Guardian::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.levelCrossings.destroyById() instead.
            "::destroyById::Guardian::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.levelCrossings.updateById() instead.
            "::updateById::Guardian::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.levelCrossings() instead.
            "::get::Guardian::levelCrossings": {
              isArray: true,
              url: urlBase + "/Guardians/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Guardian.levelCrossings.create() instead.
            "::create::Guardian::levelCrossings": {
              url: urlBase + "/Guardians/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Guardian.levelCrossings.createMany() instead.
            "::createMany::Guardian::levelCrossings": {
              isArray: true,
              url: urlBase + "/Guardians/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Guardian.levelCrossings.destroyAll() instead.
            "::delete::Guardian::levelCrossings": {
              url: urlBase + "/Guardians/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.levelCrossings.count() instead.
            "::count::Guardian::levelCrossings": {
              url: urlBase + "/Guardians/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.levelCrossings.findById() instead.
            "::findById::Alignment::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.levelCrossings.destroyById() instead.
            "::destroyById::Alignment::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.levelCrossings.updateById() instead.
            "::updateById::Alignment::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.levelCrossings() instead.
            "::get::Alignment::levelCrossings": {
              isArray: true,
              url: urlBase + "/Alignments/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Alignment.levelCrossings.create() instead.
            "::create::Alignment::levelCrossings": {
              url: urlBase + "/Alignments/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Alignment.levelCrossings.createMany() instead.
            "::createMany::Alignment::levelCrossings": {
              isArray: true,
              url: urlBase + "/Alignments/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Alignment.levelCrossings.destroyAll() instead.
            "::delete::Alignment::levelCrossings": {
              url: urlBase + "/Alignments/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.levelCrossings.count() instead.
            "::count::Alignment::levelCrossings": {
              url: urlBase + "/Alignments/:id/levelCrossings/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#updateOrCreate
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#update
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#destroyById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#removeById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LevelCrossing#modelName
        * @propertyOf lbServices.LevelCrossing
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LevelCrossing`.
        */
        R.modelName = "LevelCrossing";

    /**
     * @ngdoc object
     * @name lbServices.LevelCrossing.rodes
     * @header lbServices.LevelCrossing.rodes
     * @object
     * @description
     *
     * The object `LevelCrossing.rodes` groups methods
     * manipulating `Rode` instances related to `LevelCrossing`.
     *
     * Call {@link lbServices.LevelCrossing#rodes LevelCrossing.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#rodes
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Queries rodes of LevelCrossing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#count
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Counts rodes of LevelCrossing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#create
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#createMany
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#destroyAll
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#destroyById
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#exists
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#findById
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#link
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#unlink
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#updateById
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#levelCrossingCrossproperty
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Fetches belongsTo relation levelCrossingCrossproperty.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
        R.levelCrossingCrossproperty = function() {
          var TargetResource = $injector.get("LevelCrossingCrossproperty");
          var action = TargetResource["::get::LevelCrossing::levelCrossingCrossproperty"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#guardian
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Fetches belongsTo relation guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
        R.guardian = function() {
          var TargetResource = $injector.get("Guardian");
          var action = TargetResource["::get::LevelCrossing::guardian"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#affiliatedInstitution
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::LevelCrossing::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#crossProperty
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Fetches belongsTo relation crossProperty.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
        R.crossProperty = function() {
          var TargetResource = $injector.get("CrossProperty");
          var action = TargetResource["::get::LevelCrossing::crossProperty"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#alignment
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Fetches belongsTo relation alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignment = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::LevelCrossing::alignment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Culvert
 * @header lbServices.Culvert
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Culvert` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Culvert",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Culverts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Culvert.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Culvert.guardian() instead.
            "prototype$__get__guardian": {
              url: urlBase + "/Culverts/:id/guardian",
              method: "GET",
            },

            // INTERNAL. Use Culvert.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/Culverts/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use Culvert.alignment() instead.
            "prototype$__get__alignment": {
              url: urlBase + "/Culverts/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use Culvert.classIfication() instead.
            "prototype$__get__classIfication": {
              url: urlBase + "/Culverts/:id/classIfication",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/Culverts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Culvert.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/Culverts/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#create
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Culverts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#createMany
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Culverts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#upsert
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Culverts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#exists
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Culverts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#findById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Culverts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#find
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Culverts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#findOne
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Culverts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#updateAll
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Culverts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#deleteById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Culverts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#count
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Culverts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#prototype$updateAttributes
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Culverts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#createChangeStream
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Culverts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#deleteMultiple
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/Culverts/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#fuzzyQuery
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `culvertname` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             *  - `culvertnumber` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `culverts` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/Culverts/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#PagingFind
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Culverts/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.findById() instead.
            "::findById::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.destroyById() instead.
            "::destroyById::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.updateById() instead.
            "::updateById::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.link() instead.
            "::link::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.unlink() instead.
            "::unlink::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.exists() instead.
            "::exists::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.culverts() instead.
            "::get::Rode::culverts": {
              isArray: true,
              url: urlBase + "/rodes/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.create() instead.
            "::create::Rode::culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.createMany() instead.
            "::createMany::Rode::culverts": {
              isArray: true,
              url: urlBase + "/rodes/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.destroyAll() instead.
            "::delete::Rode::culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.count() instead.
            "::count::Rode::culverts": {
              url: urlBase + "/rodes/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.culvert() instead.
            "::get::RodeContain::culvert": {
              url: urlBase + "/RodeContains/:id/culvert",
              method: "GET",
            },

            // INTERNAL. Use Guardian.culverts.findById() instead.
            "::findById::Guardian::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.culverts.destroyById() instead.
            "::destroyById::Guardian::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.culverts.updateById() instead.
            "::updateById::Guardian::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.culverts() instead.
            "::get::Guardian::culverts": {
              isArray: true,
              url: urlBase + "/Guardians/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Guardian.culverts.create() instead.
            "::create::Guardian::culverts": {
              url: urlBase + "/Guardians/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Guardian.culverts.createMany() instead.
            "::createMany::Guardian::culverts": {
              isArray: true,
              url: urlBase + "/Guardians/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Guardian.culverts.destroyAll() instead.
            "::delete::Guardian::culverts": {
              url: urlBase + "/Guardians/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.culverts.count() instead.
            "::count::Guardian::culverts": {
              url: urlBase + "/Guardians/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.findById() instead.
            "::findById::AffiliatedInstitution::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.destroyById() instead.
            "::destroyById::AffiliatedInstitution::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.updateById() instead.
            "::updateById::AffiliatedInstitution::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts() instead.
            "::get::AffiliatedInstitution::culverts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.create() instead.
            "::create::AffiliatedInstitution::culverts": {
              url: urlBase + "/AffiliatedInstitutions/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.createMany() instead.
            "::createMany::AffiliatedInstitution::culverts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.destroyAll() instead.
            "::delete::AffiliatedInstitution::culverts": {
              url: urlBase + "/AffiliatedInstitutions/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.count() instead.
            "::count::AffiliatedInstitution::culverts": {
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.culverts.findById() instead.
            "::findById::Alignment::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.culverts.destroyById() instead.
            "::destroyById::Alignment::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.culverts.updateById() instead.
            "::updateById::Alignment::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.culverts() instead.
            "::get::Alignment::culverts": {
              isArray: true,
              url: urlBase + "/Alignments/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Alignment.culverts.create() instead.
            "::create::Alignment::culverts": {
              url: urlBase + "/Alignments/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Alignment.culverts.createMany() instead.
            "::createMany::Alignment::culverts": {
              isArray: true,
              url: urlBase + "/Alignments/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Alignment.culverts.destroyAll() instead.
            "::delete::Alignment::culverts": {
              url: urlBase + "/Alignments/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.culverts.count() instead.
            "::count::Alignment::culverts": {
              url: urlBase + "/Alignments/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use ClassIfication.culverts.findById() instead.
            "::findById::ClassIfication::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ClassIfications/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use ClassIfication.culverts.destroyById() instead.
            "::destroyById::ClassIfication::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ClassIfications/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ClassIfication.culverts.updateById() instead.
            "::updateById::ClassIfication::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ClassIfications/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ClassIfication.culverts() instead.
            "::get::ClassIfication::culverts": {
              isArray: true,
              url: urlBase + "/ClassIfications/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use ClassIfication.culverts.create() instead.
            "::create::ClassIfication::culverts": {
              url: urlBase + "/ClassIfications/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use ClassIfication.culverts.createMany() instead.
            "::createMany::ClassIfication::culverts": {
              isArray: true,
              url: urlBase + "/ClassIfications/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use ClassIfication.culverts.destroyAll() instead.
            "::delete::ClassIfication::culverts": {
              url: urlBase + "/ClassIfications/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use ClassIfication.culverts.count() instead.
            "::count::ClassIfication::culverts": {
              url: urlBase + "/ClassIfications/:id/culverts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Culvert#updateOrCreate
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Culvert#update
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Culvert#destroyById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Culvert#removeById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Culvert#modelName
        * @propertyOf lbServices.Culvert
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Culvert`.
        */
        R.modelName = "Culvert";

    /**
     * @ngdoc object
     * @name lbServices.Culvert.rodes
     * @header lbServices.Culvert.rodes
     * @object
     * @description
     *
     * The object `Culvert.rodes` groups methods
     * manipulating `Rode` instances related to `Culvert`.
     *
     * Call {@link lbServices.Culvert#rodes Culvert.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Culvert#rodes
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Queries rodes of Culvert.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#count
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Counts rodes of Culvert.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#create
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#createMany
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#destroyAll
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#destroyById
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#exists
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#findById
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#link
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#unlink
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#updateById
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert#guardian
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Fetches belongsTo relation guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
        R.guardian = function() {
          var TargetResource = $injector.get("Guardian");
          var action = TargetResource["::get::Culvert::guardian"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert#affiliatedInstitution
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::Culvert::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert#alignment
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Fetches belongsTo relation alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignment = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::Culvert::alignment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert#classIfication
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Fetches belongsTo relation classIfication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
        R.classIfication = function() {
          var TargetResource = $injector.get("ClassIfication");
          var action = TargetResource["::get::Culvert::classIfication"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.CrossIronBridge
 * @header lbServices.CrossIronBridge
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CrossIronBridge` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CrossIronBridge",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/CrossIronBridges/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use CrossIronBridge.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use CrossIronBridge.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrossIronBridge.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrossIronBridge.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CrossIronBridge.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CrossIronBridge.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CrossIronBridges/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use CrossIronBridge.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/CrossIronBridges/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use CrossIronBridge.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/CrossIronBridges/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use CrossIronBridge.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/CrossIronBridges/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use CrossIronBridge.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/CrossIronBridges/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use CrossIronBridge.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/CrossIronBridges/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#create
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/CrossIronBridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#createMany
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/CrossIronBridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#upsert
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/CrossIronBridges",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#exists
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/CrossIronBridges/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#findById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/CrossIronBridges/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#find
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/CrossIronBridges",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#findOne
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/CrossIronBridges/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#updateAll
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/CrossIronBridges/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#deleteById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/CrossIronBridges/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#count
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/CrossIronBridges/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#prototype$updateAttributes
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/CrossIronBridges/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#createChangeStream
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/CrossIronBridges/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#deleteMultiple
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/CrossIronBridges/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#fuzzyQuery
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ironbridgename` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `crossironbridges` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/CrossIronBridges/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#PagingFind
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/CrossIronBridges/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.findById() instead.
            "::findById::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyById() instead.
            "::destroyById::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.updateById() instead.
            "::updateById::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.link() instead.
            "::link::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.unlink() instead.
            "::unlink::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.exists() instead.
            "::exists::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.crossIronBridges() instead.
            "::get::Rode::crossIronBridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.create() instead.
            "::create::Rode::crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.createMany() instead.
            "::createMany::Rode::crossIronBridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyAll() instead.
            "::delete::Rode::crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.count() instead.
            "::count::Rode::crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.crossIronBridge() instead.
            "::get::RodeContain::crossIronBridge": {
              url: urlBase + "/RodeContains/:id/crossIronBridge",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.findById() instead.
            "::findById::AffiliatedInstitution::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.destroyById() instead.
            "::destroyById::AffiliatedInstitution::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.updateById() instead.
            "::updateById::AffiliatedInstitution::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges() instead.
            "::get::AffiliatedInstitution::crossIronBridges": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.create() instead.
            "::create::AffiliatedInstitution::crossIronBridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.createMany() instead.
            "::createMany::AffiliatedInstitution::crossIronBridges": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.destroyAll() instead.
            "::delete::AffiliatedInstitution::crossIronBridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.count() instead.
            "::count::AffiliatedInstitution::crossIronBridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#updateOrCreate
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#update
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#destroyById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#removeById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CrossIronBridge#modelName
        * @propertyOf lbServices.CrossIronBridge
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CrossIronBridge`.
        */
        R.modelName = "CrossIronBridge";

    /**
     * @ngdoc object
     * @name lbServices.CrossIronBridge.rodes
     * @header lbServices.CrossIronBridge.rodes
     * @object
     * @description
     *
     * The object `CrossIronBridge.rodes` groups methods
     * manipulating `Rode` instances related to `CrossIronBridge`.
     *
     * Call {@link lbServices.CrossIronBridge#rodes CrossIronBridge.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#rodes
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Queries rodes of CrossIronBridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#count
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Counts rodes of CrossIronBridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#create
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#createMany
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#destroyAll
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#destroyById
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#exists
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#findById
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#link
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#unlink
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge.rodes#updateById
             * @methodOf lbServices.CrossIronBridge.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::CrossIronBridge::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#affiliatedInstitution
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::CrossIronBridge::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ServicePort
 * @header lbServices.ServicePort
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ServicePort` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ServicePort",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ServicePorts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ServicePort.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ServicePort.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/ServicePorts/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use ServicePort.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/ServicePorts/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#create
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ServicePorts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#createMany
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ServicePorts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#upsert
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ServicePorts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#exists
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ServicePorts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#findById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ServicePorts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#find
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ServicePorts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#findOne
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ServicePorts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#updateAll
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ServicePorts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#deleteById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ServicePorts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#count
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ServicePorts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#prototype$updateAttributes
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ServicePorts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#createChangeStream
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ServicePorts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#deleteMultiple
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/ServicePorts/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#fuzzyQuery
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `serviceports` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/ServicePorts/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#PagingFind
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/ServicePorts/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.findById() instead.
            "::findById::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.destroyById() instead.
            "::destroyById::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.updateById() instead.
            "::updateById::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.link() instead.
            "::link::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.unlink() instead.
            "::unlink::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.exists() instead.
            "::exists::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.servicePorts() instead.
            "::get::Rode::servicePorts": {
              isArray: true,
              url: urlBase + "/rodes/:id/servicePorts",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.create() instead.
            "::create::Rode::servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.createMany() instead.
            "::createMany::Rode::servicePorts": {
              isArray: true,
              url: urlBase + "/rodes/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.destroyAll() instead.
            "::delete::Rode::servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.count() instead.
            "::count::Rode::servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.servicePort() instead.
            "::get::RodeContain::servicePort": {
              url: urlBase + "/RodeContains/:id/servicePort",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.findById() instead.
            "::findById::AffiliatedInstitution::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.destroyById() instead.
            "::destroyById::AffiliatedInstitution::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.updateById() instead.
            "::updateById::AffiliatedInstitution::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts() instead.
            "::get::AffiliatedInstitution::servicePorts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.create() instead.
            "::create::AffiliatedInstitution::servicePorts": {
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.createMany() instead.
            "::createMany::AffiliatedInstitution::servicePorts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.destroyAll() instead.
            "::delete::AffiliatedInstitution::servicePorts": {
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.count() instead.
            "::count::AffiliatedInstitution::servicePorts": {
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ServicePort#updateOrCreate
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#update
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#destroyById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#removeById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ServicePort#modelName
        * @propertyOf lbServices.ServicePort
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ServicePort`.
        */
        R.modelName = "ServicePort";

    /**
     * @ngdoc object
     * @name lbServices.ServicePort.rodes
     * @header lbServices.ServicePort.rodes
     * @object
     * @description
     *
     * The object `ServicePort.rodes` groups methods
     * manipulating `Rode` instances related to `ServicePort`.
     *
     * Call {@link lbServices.ServicePort#rodes ServicePort.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ServicePort#rodes
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Queries rodes of ServicePort.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#count
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Counts rodes of ServicePort.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#create
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#createMany
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#destroyAll
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#destroyById
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#exists
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#findById
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#link
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#unlink
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#updateById
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#affiliatedInstitution
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::ServicePort::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BaseStation
 * @header lbServices.BaseStation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BaseStation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BaseStation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/BaseStations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BaseStation.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use BaseStation.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/BaseStations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/BaseStations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BaseStation.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/BaseStations/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#create
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BaseStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#createMany
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BaseStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#upsert
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BaseStations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#exists
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BaseStations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#findById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BaseStations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#find
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BaseStations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#findOne
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BaseStations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#updateAll
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/BaseStations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#deleteById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BaseStations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#count
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BaseStations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#prototype$updateAttributes
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BaseStations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#createChangeStream
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BaseStations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#deleteMultiple
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/BaseStations/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#fuzzyQuery
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `basestations` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/BaseStations/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#PagingFind
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/BaseStations/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.findById() instead.
            "::findById::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.destroyById() instead.
            "::destroyById::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.updateById() instead.
            "::updateById::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.link() instead.
            "::link::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.unlink() instead.
            "::unlink::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.exists() instead.
            "::exists::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.baseStations() instead.
            "::get::Rode::baseStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/baseStations",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.create() instead.
            "::create::Rode::baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.createMany() instead.
            "::createMany::Rode::baseStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.destroyAll() instead.
            "::delete::Rode::baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.count() instead.
            "::count::Rode::baseStations": {
              url: urlBase + "/rodes/:id/baseStations/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.baseStation() instead.
            "::get::RodeContain::baseStation": {
              url: urlBase + "/RodeContains/:id/baseStation",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.findById() instead.
            "::findById::AffiliatedInstitution::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.destroyById() instead.
            "::destroyById::AffiliatedInstitution::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.updateById() instead.
            "::updateById::AffiliatedInstitution::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations() instead.
            "::get::AffiliatedInstitution::baseStations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.create() instead.
            "::create::AffiliatedInstitution::baseStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.createMany() instead.
            "::createMany::AffiliatedInstitution::baseStations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.destroyAll() instead.
            "::delete::AffiliatedInstitution::baseStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.count() instead.
            "::count::AffiliatedInstitution::baseStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BaseStation#updateOrCreate
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#update
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#destroyById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#removeById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BaseStation#modelName
        * @propertyOf lbServices.BaseStation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BaseStation`.
        */
        R.modelName = "BaseStation";

    /**
     * @ngdoc object
     * @name lbServices.BaseStation.rodes
     * @header lbServices.BaseStation.rodes
     * @object
     * @description
     *
     * The object `BaseStation.rodes` groups methods
     * manipulating `Rode` instances related to `BaseStation`.
     *
     * Call {@link lbServices.BaseStation#rodes BaseStation.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.BaseStation#rodes
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Queries rodes of BaseStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#count
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Counts rodes of BaseStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#create
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#createMany
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#destroyAll
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#destroyById
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#exists
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#findById
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#link
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#unlink
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#updateById
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#affiliatedInstitution
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::BaseStation::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KeyPlace
 * @header lbServices.KeyPlace
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KeyPlace` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KeyPlace",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KeyPlaces/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KeyPlace.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.findById() instead.
            "prototype$__findById__keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyById() instead.
            "prototype$__destroyById__keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.updateById() instead.
            "prototype$__updateById__keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.keyPlaceCategory() instead.
            "prototype$__get__keyPlaceCategory": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceCategory",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.affiliatedInstitutions() instead.
            "prototype$__get__affiliatedInstitutions": {
              url: urlBase + "/KeyPlaces/:id/affiliatedInstitutions",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.hazardlevels() instead.
            "prototype$__get__hazardlevels": {
              url: urlBase + "/KeyPlaces/:id/hazardlevels",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs() instead.
            "prototype$__get__keyPlaceImgs": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.create() instead.
            "prototype$__create__keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyAll() instead.
            "prototype$__delete__keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.count() instead.
            "prototype$__count__keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#create
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KeyPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#createMany
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KeyPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#upsert
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KeyPlaces",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#exists
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KeyPlaces/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#findById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KeyPlaces/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#find
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KeyPlaces",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#findOne
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KeyPlaces/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#updateAll
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KeyPlaces/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#deleteById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KeyPlaces/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#count
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KeyPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#prototype$updateAttributes
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KeyPlaces/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#createChangeStream
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KeyPlaces/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#deleteMultiple
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/KeyPlaces/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#fuzzyQuery
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `keyplaces` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/KeyPlaces/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#PagingFind
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/KeyPlaces/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.findById() instead.
            "::findById::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyById() instead.
            "::destroyById::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.updateById() instead.
            "::updateById::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.link() instead.
            "::link::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.unlink() instead.
            "::unlink::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.exists() instead.
            "::exists::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.keyPlaces() instead.
            "::get::Rode::keyPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.create() instead.
            "::create::Rode::keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.createMany() instead.
            "::createMany::Rode::keyPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyAll() instead.
            "::delete::Rode::keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.count() instead.
            "::count::Rode::keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.keyPlace() instead.
            "::get::RodeContain::keyPlace": {
              url: urlBase + "/RodeContains/:id/keyPlace",
              method: "GET",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.findById() instead.
            "::findById::KeyPlaceCategory::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.destroyById() instead.
            "::destroyById::KeyPlaceCategory::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.updateById() instead.
            "::updateById::KeyPlaceCategory::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces() instead.
            "::get::KeyPlaceCategory::keyPlaces": {
              isArray: true,
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.create() instead.
            "::create::KeyPlaceCategory::keyPlaces": {
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.createMany() instead.
            "::createMany::KeyPlaceCategory::keyPlaces": {
              isArray: true,
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.destroyAll() instead.
            "::delete::KeyPlaceCategory::keyPlaces": {
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.count() instead.
            "::count::KeyPlaceCategory::keyPlaces": {
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.findById() instead.
            "::findById::AffiliatedInstitution::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.destroyById() instead.
            "::destroyById::AffiliatedInstitution::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.updateById() instead.
            "::updateById::AffiliatedInstitution::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces() instead.
            "::get::AffiliatedInstitution::keyPlaces": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.create() instead.
            "::create::AffiliatedInstitution::keyPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.createMany() instead.
            "::createMany::AffiliatedInstitution::keyPlaces": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.destroyAll() instead.
            "::delete::AffiliatedInstitution::keyPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.count() instead.
            "::count::AffiliatedInstitution::keyPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.findById() instead.
            "::findById::Hazardlevel::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.destroyById() instead.
            "::destroyById::Hazardlevel::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.updateById() instead.
            "::updateById::Hazardlevel::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces() instead.
            "::get::Hazardlevel::keyPlaces": {
              isArray: true,
              url: urlBase + "/Hazardlevels/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.create() instead.
            "::create::Hazardlevel::keyPlaces": {
              url: urlBase + "/Hazardlevels/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.createMany() instead.
            "::createMany::Hazardlevel::keyPlaces": {
              isArray: true,
              url: urlBase + "/Hazardlevels/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.destroyAll() instead.
            "::delete::Hazardlevel::keyPlaces": {
              url: urlBase + "/Hazardlevels/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.count() instead.
            "::count::Hazardlevel::keyPlaces": {
              url: urlBase + "/Hazardlevels/:id/keyPlaces/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#updateOrCreate
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#update
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#destroyById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#removeById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KeyPlace#modelName
        * @propertyOf lbServices.KeyPlace
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KeyPlace`.
        */
        R.modelName = "KeyPlace";

    /**
     * @ngdoc object
     * @name lbServices.KeyPlace.rodes
     * @header lbServices.KeyPlace.rodes
     * @object
     * @description
     *
     * The object `KeyPlace.rodes` groups methods
     * manipulating `Rode` instances related to `KeyPlace`.
     *
     * Call {@link lbServices.KeyPlace#rodes KeyPlace.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#rodes
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Queries rodes of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#count
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Counts rodes of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#create
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#createMany
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#destroyAll
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#destroyById
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#exists
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#findById
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#link
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#unlink
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#updateById
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KeyPlace.keyPlaceImgs
     * @header lbServices.KeyPlace.keyPlaceImgs
     * @object
     * @description
     *
     * The object `KeyPlace.keyPlaceImgs` groups methods
     * manipulating `KeyPlaceImg` instances related to `KeyPlace`.
     *
     * Call {@link lbServices.KeyPlace#keyPlaceImgs KeyPlace.keyPlaceImgs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#keyPlaceImgs
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Queries keyPlaceImgs of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::get::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#count
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Counts keyPlaceImgs of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPlaceImgs.count = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::count::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#create
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Creates a new instance in keyPlaceImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.create = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::create::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#createMany
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Creates a new instance in keyPlaceImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.createMany = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::createMany::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#destroyAll
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Deletes all keyPlaceImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaceImgs.destroyAll = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::delete::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#destroyById
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Delete a related item by id for keyPlaceImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaceImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaceImgs.destroyById = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::destroyById::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#findById
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Find a related item by id for keyPlaceImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaceImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.findById = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::findById::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#updateById
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Update a related item by id for keyPlaceImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaceImgs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.updateById = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::updateById::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#keyPlaceCategory
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Fetches belongsTo relation keyPlaceCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
        R.keyPlaceCategory = function() {
          var TargetResource = $injector.get("KeyPlaceCategory");
          var action = TargetResource["::get::KeyPlace::keyPlaceCategory"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#affiliatedInstitutions
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitutions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitutions = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::KeyPlace::affiliatedInstitutions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#hazardlevels
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Fetches belongsTo relation hazardlevels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
        R.hazardlevels = function() {
          var TargetResource = $injector.get("Hazardlevel");
          var action = TargetResource["::get::KeyPlace::hazardlevels"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.HiddenDangerPlace
 * @header lbServices.HiddenDangerPlace
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `HiddenDangerPlace` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "HiddenDangerPlace",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/HiddenDangerPlaces/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use HiddenDangerPlace.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.findById() instead.
            "prototype$__findById__hiddenDangerPlaceImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.destroyById() instead.
            "prototype$__destroyById__hiddenDangerPlaceImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.updateById() instead.
            "prototype$__updateById__hiddenDangerPlaceImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/HiddenDangerPlaces/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hazardlevel() instead.
            "prototype$__get__hazardlevel": {
              url: urlBase + "/HiddenDangerPlaces/:id/hazardlevel",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceCategory() instead.
            "prototype$__get__hiddenDangerPlaceCategory": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceCategory",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.state() instead.
            "prototype$__get__state": {
              url: urlBase + "/HiddenDangerPlaces/:id/state",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages() instead.
            "prototype$__get__hiddenDangerPlaceImages": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.create() instead.
            "prototype$__create__hiddenDangerPlaceImages": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.destroyAll() instead.
            "prototype$__delete__hiddenDangerPlaceImages": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.count() instead.
            "prototype$__count__hiddenDangerPlaceImages": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#create
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/HiddenDangerPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#createMany
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#upsert
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/HiddenDangerPlaces",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#exists
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/HiddenDangerPlaces/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#findById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/HiddenDangerPlaces/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#find
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#findOne
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/HiddenDangerPlaces/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#updateAll
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/HiddenDangerPlaces/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#deleteById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/HiddenDangerPlaces/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#count
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/HiddenDangerPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#prototype$updateAttributes
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/HiddenDangerPlaces/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#createChangeStream
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/HiddenDangerPlaces/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#deleteMultiple
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/HiddenDangerPlaces/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#fuzzyQuery
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hiddendangerplaces` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/HiddenDangerPlaces/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#PagingFind
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/HiddenDangerPlaces/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.findById() instead.
            "::findById::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyById() instead.
            "::destroyById::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.updateById() instead.
            "::updateById::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.link() instead.
            "::link::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.unlink() instead.
            "::unlink::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.exists() instead.
            "::exists::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces() instead.
            "::get::Rode::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.create() instead.
            "::create::Rode::hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.createMany() instead.
            "::createMany::Rode::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyAll() instead.
            "::delete::Rode::hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.count() instead.
            "::count::Rode::hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.hiddenDangerPlace() instead.
            "::get::RodeContain::hiddenDangerPlace": {
              url: urlBase + "/RodeContains/:id/hiddenDangerPlace",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.findById() instead.
            "::findById::AffiliatedInstitution::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.destroyById() instead.
            "::destroyById::AffiliatedInstitution::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.updateById() instead.
            "::updateById::AffiliatedInstitution::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces() instead.
            "::get::AffiliatedInstitution::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.create() instead.
            "::create::AffiliatedInstitution::hiddenDangerPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.createMany() instead.
            "::createMany::AffiliatedInstitution::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.destroyAll() instead.
            "::delete::AffiliatedInstitution::hiddenDangerPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.count() instead.
            "::count::AffiliatedInstitution::hiddenDangerPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.findById() instead.
            "::findById::Hazardlevel::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.destroyById() instead.
            "::destroyById::Hazardlevel::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.updateById() instead.
            "::updateById::Hazardlevel::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces() instead.
            "::get::Hazardlevel::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.create() instead.
            "::create::Hazardlevel::hiddenDangerPlaces": {
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.createMany() instead.
            "::createMany::Hazardlevel::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.destroyAll() instead.
            "::delete::Hazardlevel::hiddenDangerPlaces": {
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.count() instead.
            "::count::Hazardlevel::hiddenDangerPlaces": {
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.findById() instead.
            "::findById::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.destroyById() instead.
            "::destroyById::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.updateById() instead.
            "::updateById::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces() instead.
            "::get::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.create() instead.
            "::create::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.createMany() instead.
            "::createMany::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.destroyAll() instead.
            "::delete::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.count() instead.
            "::count::HiddenDangerPlaceCategory::hiddenDangerPlaces": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.findById() instead.
            "::findById::State::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.destroyById() instead.
            "::destroyById::State::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.updateById() instead.
            "::updateById::State::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use State.hiddenDangerPlaces() instead.
            "::get::State::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/States/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.create() instead.
            "::create::State::hiddenDangerPlaces": {
              url: urlBase + "/States/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.createMany() instead.
            "::createMany::State::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/States/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.destroyAll() instead.
            "::delete::State::hiddenDangerPlaces": {
              url: urlBase + "/States/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.count() instead.
            "::count::State::hiddenDangerPlaces": {
              url: urlBase + "/States/:id/hiddenDangerPlaces/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#updateOrCreate
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#update
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#destroyById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#removeById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.HiddenDangerPlace#modelName
        * @propertyOf lbServices.HiddenDangerPlace
        * @description
        * The name of the model represented by this $resource,
        * i.e. `HiddenDangerPlace`.
        */
        R.modelName = "HiddenDangerPlace";

    /**
     * @ngdoc object
     * @name lbServices.HiddenDangerPlace.rodes
     * @header lbServices.HiddenDangerPlace.rodes
     * @object
     * @description
     *
     * The object `HiddenDangerPlace.rodes` groups methods
     * manipulating `Rode` instances related to `HiddenDangerPlace`.
     *
     * Call {@link lbServices.HiddenDangerPlace#rodes HiddenDangerPlace.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#rodes
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Queries rodes of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#count
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Counts rodes of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#create
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#createMany
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#destroyAll
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#destroyById
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#exists
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#findById
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#link
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#unlink
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#updateById
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
     * @header lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
     * @object
     * @description
     *
     * The object `HiddenDangerPlace.hiddenDangerPlaceImages` groups methods
     * manipulating `HiddenDangerPlaceImage` instances related to `HiddenDangerPlace`.
     *
     * Call {@link lbServices.HiddenDangerPlace#hiddenDangerPlaceImages HiddenDangerPlace.hiddenDangerPlaceImages()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#hiddenDangerPlaceImages
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Queries hiddenDangerPlaceImages of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R.hiddenDangerPlaceImages = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::get::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages#count
             * @methodOf lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
             *
             * @description
             *
             * Counts hiddenDangerPlaceImages of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.hiddenDangerPlaceImages.count = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::count::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages#create
             * @methodOf lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaceImages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R.hiddenDangerPlaceImages.create = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::create::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages#createMany
             * @methodOf lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaceImages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R.hiddenDangerPlaceImages.createMany = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::createMany::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages#destroyAll
             * @methodOf lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
             *
             * @description
             *
             * Deletes all hiddenDangerPlaceImages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaceImages.destroyAll = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::delete::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages#destroyById
             * @methodOf lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
             *
             * @description
             *
             * Delete a related item by id for hiddenDangerPlaceImages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaceImages
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaceImages.destroyById = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::destroyById::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages#findById
             * @methodOf lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
             *
             * @description
             *
             * Find a related item by id for hiddenDangerPlaceImages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaceImages
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R.hiddenDangerPlaceImages.findById = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::findById::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.hiddenDangerPlaceImages#updateById
             * @methodOf lbServices.HiddenDangerPlace.hiddenDangerPlaceImages
             *
             * @description
             *
             * Update a related item by id for hiddenDangerPlaceImages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaceImages
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R.hiddenDangerPlaceImages.updateById = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceImage");
          var action = TargetResource["::updateById::HiddenDangerPlace::hiddenDangerPlaceImages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#affiliatedInstitution
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::HiddenDangerPlace::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#hazardlevel
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Fetches belongsTo relation hazardlevel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
        R.hazardlevel = function() {
          var TargetResource = $injector.get("Hazardlevel");
          var action = TargetResource["::get::HiddenDangerPlace::hazardlevel"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#hiddenDangerPlaceCategory
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Fetches belongsTo relation hiddenDangerPlaceCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
        R.hiddenDangerPlaceCategory = function() {
          var TargetResource = $injector.get("HiddenDangerPlaceCategory");
          var action = TargetResource["::get::HiddenDangerPlace::hiddenDangerPlaceCategory"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#state
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Fetches belongsTo relation state.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R.state = function() {
          var TargetResource = $injector.get("State");
          var action = TargetResource["::get::HiddenDangerPlace::state"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KeyPersion
 * @header lbServices.KeyPersion
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KeyPersion` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KeyPersion",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KeyPersions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KeyPersion.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPersion.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPersion.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPersion.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPersion.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPersion.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPersions/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use KeyPersion.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/KeyPersions/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use KeyPersion.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/KeyPersions/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPersion.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/KeyPersions/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPersion.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/KeyPersions/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#create
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KeyPersions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#createMany
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KeyPersions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#upsert
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KeyPersions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#exists
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KeyPersions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#findById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KeyPersions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#find
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KeyPersions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#findOne
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KeyPersions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#updateAll
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KeyPersions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#deleteById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KeyPersions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#count
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KeyPersions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#prototype$updateAttributes
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KeyPersions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#createChangeStream
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KeyPersions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#deleteMultiple
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/KeyPersions/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#fuzzyQuery
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `residencenow` – `{string=}` -
             *
             *  - `idnumber` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `keypersions` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/KeyPersions/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#PagingFind
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/KeyPersions/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPersions.findById() instead.
            "::findById::Rode::keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPersions.destroyById() instead.
            "::destroyById::Rode::keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPersions.updateById() instead.
            "::updateById::Rode::keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPersions.link() instead.
            "::link::Rode::keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPersions.unlink() instead.
            "::unlink::Rode::keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPersions.exists() instead.
            "::exists::Rode::keyPersions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPersions/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.keyPersions() instead.
            "::get::Rode::keyPersions": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPersions",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPersions.create() instead.
            "::create::Rode::keyPersions": {
              url: urlBase + "/rodes/:id/keyPersions",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPersions.createMany() instead.
            "::createMany::Rode::keyPersions": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPersions",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPersions.destroyAll() instead.
            "::delete::Rode::keyPersions": {
              url: urlBase + "/rodes/:id/keyPersions",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPersions.count() instead.
            "::count::Rode::keyPersions": {
              url: urlBase + "/rodes/:id/keyPersions/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.keyPersion() instead.
            "::get::RodeContain::keyPersion": {
              url: urlBase + "/RodeContains/:id/keyPersion",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#updateOrCreate
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#update
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#destroyById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#removeById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KeyPersion#modelName
        * @propertyOf lbServices.KeyPersion
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KeyPersion`.
        */
        R.modelName = "KeyPersion";

    /**
     * @ngdoc object
     * @name lbServices.KeyPersion.rodes
     * @header lbServices.KeyPersion.rodes
     * @object
     * @description
     *
     * The object `KeyPersion.rodes` groups methods
     * manipulating `Rode` instances related to `KeyPersion`.
     *
     * Call {@link lbServices.KeyPersion#rodes KeyPersion.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#rodes
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Queries rodes of KeyPersion.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#count
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Counts rodes of KeyPersion.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#create
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#createMany
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#destroyAll
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#destroyById
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#exists
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#findById
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#link
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#unlink
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion.rodes#updateById
             * @methodOf lbServices.KeyPersion.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::KeyPersion::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BroadcastWarningPost
 * @header lbServices.BroadcastWarningPost
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BroadcastWarningPost` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BroadcastWarningPost",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/BroadcastWarningPosts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BroadcastWarningPost.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use BroadcastWarningPost.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/BroadcastWarningPosts/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.state() instead.
            "prototype$__get__state": {
              url: urlBase + "/BroadcastWarningPosts/:id/state",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/BroadcastWarningPosts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/BroadcastWarningPosts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/BroadcastWarningPosts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use BroadcastWarningPost.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/BroadcastWarningPosts/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#create
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BroadcastWarningPosts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#createMany
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BroadcastWarningPosts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#upsert
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BroadcastWarningPosts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#exists
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BroadcastWarningPosts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#findById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BroadcastWarningPosts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#find
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BroadcastWarningPosts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#findOne
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BroadcastWarningPosts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#updateAll
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/BroadcastWarningPosts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#deleteById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BroadcastWarningPosts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#count
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BroadcastWarningPosts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#prototype$updateAttributes
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BroadcastWarningPosts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#createChangeStream
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BroadcastWarningPosts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#deleteMultiple
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/BroadcastWarningPosts/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#FuzzyPrecision
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/BroadcastWarningPosts/FuzzyPrecision",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.findById() instead.
            "::findById::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyById() instead.
            "::destroyById::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.updateById() instead.
            "::updateById::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.link() instead.
            "::link::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.unlink() instead.
            "::unlink::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.exists() instead.
            "::exists::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts() instead.
            "::get::Rode::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.create() instead.
            "::create::Rode::broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.createMany() instead.
            "::createMany::Rode::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyAll() instead.
            "::delete::Rode::broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.count() instead.
            "::count::Rode::broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.broadcastWarningPost() instead.
            "::get::RodeContain::broadcastWarningPost": {
              url: urlBase + "/RodeContains/:id/broadcastWarningPost",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.findById() instead.
            "::findById::AffiliatedInstitution::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.destroyById() instead.
            "::destroyById::AffiliatedInstitution::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.updateById() instead.
            "::updateById::AffiliatedInstitution::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts() instead.
            "::get::AffiliatedInstitution::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.create() instead.
            "::create::AffiliatedInstitution::broadcastWarningPosts": {
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.createMany() instead.
            "::createMany::AffiliatedInstitution::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.destroyAll() instead.
            "::delete::AffiliatedInstitution::broadcastWarningPosts": {
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.count() instead.
            "::count::AffiliatedInstitution::broadcastWarningPosts": {
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/count",
              method: "GET",
            },

            // INTERNAL. Use State.broadcastWarningPosts.findById() instead.
            "::findById::State::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use State.broadcastWarningPosts.destroyById() instead.
            "::destroyById::State::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use State.broadcastWarningPosts.updateById() instead.
            "::updateById::State::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use State.broadcastWarningPosts() instead.
            "::get::State::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/States/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use State.broadcastWarningPosts.create() instead.
            "::create::State::broadcastWarningPosts": {
              url: urlBase + "/States/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use State.broadcastWarningPosts.createMany() instead.
            "::createMany::State::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/States/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use State.broadcastWarningPosts.destroyAll() instead.
            "::delete::State::broadcastWarningPosts": {
              url: urlBase + "/States/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use State.broadcastWarningPosts.count() instead.
            "::count::State::broadcastWarningPosts": {
              url: urlBase + "/States/:id/broadcastWarningPosts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#updateOrCreate
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#update
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#destroyById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#removeById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BroadcastWarningPost#modelName
        * @propertyOf lbServices.BroadcastWarningPost
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BroadcastWarningPost`.
        */
        R.modelName = "BroadcastWarningPost";

    /**
     * @ngdoc object
     * @name lbServices.BroadcastWarningPost.rodes
     * @header lbServices.BroadcastWarningPost.rodes
     * @object
     * @description
     *
     * The object `BroadcastWarningPost.rodes` groups methods
     * manipulating `Rode` instances related to `BroadcastWarningPost`.
     *
     * Call {@link lbServices.BroadcastWarningPost#rodes BroadcastWarningPost.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#rodes
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Queries rodes of BroadcastWarningPost.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#count
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Counts rodes of BroadcastWarningPost.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#create
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#createMany
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#destroyAll
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#destroyById
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#exists
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#findById
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#link
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#unlink
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost.rodes#updateById
             * @methodOf lbServices.BroadcastWarningPost.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::BroadcastWarningPost::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#affiliatedInstitution
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::BroadcastWarningPost::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#state
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Fetches belongsTo relation state.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R.state = function() {
          var TargetResource = $injector.get("State");
          var action = TargetResource["::get::BroadcastWarningPost::state"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.APropagandaPoint
 * @header lbServices.APropagandaPoint
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `APropagandaPoint` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "APropagandaPoint",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/APropagandaPoints/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use APropagandaPoint.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.findById() instead.
            "prototype$__findById__aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyById() instead.
            "prototype$__destroyById__aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.updateById() instead.
            "prototype$__updateById__aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.affiliatedinstitution() instead.
            "prototype$__get__affiliatedinstitution": {
              url: urlBase + "/APropagandaPoints/:id/affiliatedinstitution",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs() instead.
            "prototype$__get__aPropagandaPointImgs": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.create() instead.
            "prototype$__create__aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyAll() instead.
            "prototype$__delete__aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.count() instead.
            "prototype$__count__aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#create
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/APropagandaPoints",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#createMany
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/APropagandaPoints",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#upsert
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/APropagandaPoints",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#exists
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/APropagandaPoints/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#findById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/APropagandaPoints/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#find
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/APropagandaPoints",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#findOne
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/APropagandaPoints/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#updateAll
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/APropagandaPoints/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#deleteById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/APropagandaPoints/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#count
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/APropagandaPoints/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#prototype$updateAttributes
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/APropagandaPoints/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#createChangeStream
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/APropagandaPoints/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#deleteMultiple
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/APropagandaPoints/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#FuzzyPrecision
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/APropagandaPoints/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#PagingFind
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/APropagandaPoints/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.findById() instead.
            "::findById::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyById() instead.
            "::destroyById::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.updateById() instead.
            "::updateById::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.link() instead.
            "::link::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.unlink() instead.
            "::unlink::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.exists() instead.
            "::exists::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.aPropagandaPoints() instead.
            "::get::Rode::aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.create() instead.
            "::create::Rode::aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.createMany() instead.
            "::createMany::Rode::aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyAll() instead.
            "::delete::Rode::aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.count() instead.
            "::count::Rode::aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.aPropagandaPoint() instead.
            "::get::RodeContain::aPropagandaPoint": {
              url: urlBase + "/RodeContains/:id/aPropagandaPoint",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.findById() instead.
            "::findById::AffiliatedInstitution::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.destroyById() instead.
            "::destroyById::AffiliatedInstitution::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.updateById() instead.
            "::updateById::AffiliatedInstitution::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints() instead.
            "::get::AffiliatedInstitution::aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.create() instead.
            "::create::AffiliatedInstitution::aPropagandaPoints": {
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.createMany() instead.
            "::createMany::AffiliatedInstitution::aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.destroyAll() instead.
            "::delete::AffiliatedInstitution::aPropagandaPoints": {
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.count() instead.
            "::count::AffiliatedInstitution::aPropagandaPoints": {
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#updateOrCreate
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#update
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#destroyById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#removeById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.APropagandaPoint#modelName
        * @propertyOf lbServices.APropagandaPoint
        * @description
        * The name of the model represented by this $resource,
        * i.e. `APropagandaPoint`.
        */
        R.modelName = "APropagandaPoint";

    /**
     * @ngdoc object
     * @name lbServices.APropagandaPoint.rodes
     * @header lbServices.APropagandaPoint.rodes
     * @object
     * @description
     *
     * The object `APropagandaPoint.rodes` groups methods
     * manipulating `Rode` instances related to `APropagandaPoint`.
     *
     * Call {@link lbServices.APropagandaPoint#rodes APropagandaPoint.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#rodes
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Queries rodes of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#count
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Counts rodes of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#create
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#createMany
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#destroyAll
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#destroyById
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#exists
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#findById
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#link
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#unlink
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#updateById
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.APropagandaPoint.aPropagandaPointImgs
     * @header lbServices.APropagandaPoint.aPropagandaPointImgs
     * @object
     * @description
     *
     * The object `APropagandaPoint.aPropagandaPointImgs` groups methods
     * manipulating `APropagandaPointImg` instances related to `APropagandaPoint`.
     *
     * Call {@link lbServices.APropagandaPoint#aPropagandaPointImgs APropagandaPoint.aPropagandaPointImgs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#aPropagandaPointImgs
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Queries aPropagandaPointImgs of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::get::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#count
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Counts aPropagandaPointImgs of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.aPropagandaPointImgs.count = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::count::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#create
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Creates a new instance in aPropagandaPointImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.create = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::create::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#createMany
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Creates a new instance in aPropagandaPointImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.createMany = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::createMany::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#destroyAll
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Deletes all aPropagandaPointImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPointImgs.destroyAll = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::delete::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#destroyById
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Delete a related item by id for aPropagandaPointImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPointImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPointImgs.destroyById = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::destroyById::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#findById
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Find a related item by id for aPropagandaPointImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPointImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.findById = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::findById::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#updateById
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Update a related item by id for aPropagandaPointImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPointImgs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.updateById = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::updateById::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#affiliatedinstitution
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedinstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedinstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::APropagandaPoint::affiliatedinstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.InstitutionalTeam
 * @header lbServices.InstitutionalTeam
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InstitutionalTeam` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "InstitutionalTeam",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/InstitutionalTeams/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use InstitutionalTeam.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/InstitutionalTeams/:id/affiliatedInstitution",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#create
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/InstitutionalTeams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#createMany
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/InstitutionalTeams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#upsert
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/InstitutionalTeams",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#exists
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/InstitutionalTeams/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#findById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/InstitutionalTeams/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#find
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/InstitutionalTeams",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#findOne
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/InstitutionalTeams/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#updateAll
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/InstitutionalTeams/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#deleteById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/InstitutionalTeams/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#count
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/InstitutionalTeams/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#prototype$updateAttributes
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/InstitutionalTeams/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#createChangeStream
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/InstitutionalTeams/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#deleteMultiple
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/InstitutionalTeams/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#FuzzyPrecision
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `admimdepartment` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/InstitutionalTeams/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#PagingFind
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/InstitutionalTeams/PagingFind",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#deleteMultiple
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/InstitutionalTeams/deleteMultiple",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.findById() instead.
            "::findById::AffiliatedInstitution::institutionalTeams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.destroyById() instead.
            "::destroyById::AffiliatedInstitution::institutionalTeams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.updateById() instead.
            "::updateById::AffiliatedInstitution::institutionalTeams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams() instead.
            "::get::AffiliatedInstitution::institutionalTeams": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.create() instead.
            "::create::AffiliatedInstitution::institutionalTeams": {
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.createMany() instead.
            "::createMany::AffiliatedInstitution::institutionalTeams": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.destroyAll() instead.
            "::delete::AffiliatedInstitution::institutionalTeams": {
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.count() instead.
            "::count::AffiliatedInstitution::institutionalTeams": {
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#updateOrCreate
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#update
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#destroyById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#removeById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.InstitutionalTeam#modelName
        * @propertyOf lbServices.InstitutionalTeam
        * @description
        * The name of the model represented by this $resource,
        * i.e. `InstitutionalTeam`.
        */
        R.modelName = "InstitutionalTeam";


            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#affiliatedInstitution
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::InstitutionalTeam::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Station
 * @header lbServices.Station
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Station` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Station",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Stations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Station.securityEquipmentInformations.findById() instead.
            "prototype$__findById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/securityEquipmentInformations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.destroyById() instead.
            "prototype$__destroyById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/securityEquipmentInformations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.updateById() instead.
            "prototype$__updateById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/securityEquipmentInformations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Station.stationRank() instead.
            "prototype$__get__stationRank": {
              url: urlBase + "/Stations/:id/stationRank",
              method: "GET",
            },

            // INTERNAL. Use Station.administration() instead.
            "prototype$__get__administration": {
              url: urlBase + "/Stations/:id/administration",
              method: "GET",
            },

            // INTERNAL. Use Station.stationNature() instead.
            "prototype$__get__stationNature": {
              url: urlBase + "/Stations/:id/stationNature",
              method: "GET",
            },

            // INTERNAL. Use Station.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/Stations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use Station.securityEquipmentInformations() instead.
            "prototype$__get__securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/Stations/:id/securityEquipmentInformations",
              method: "GET",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.create() instead.
            "prototype$__create__securityEquipmentInformations": {
              url: urlBase + "/Stations/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.destroyAll() instead.
            "prototype$__delete__securityEquipmentInformations": {
              url: urlBase + "/Stations/:id/securityEquipmentInformations",
              method: "DELETE",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.count() instead.
            "prototype$__count__securityEquipmentInformations": {
              url: urlBase + "/Stations/:id/securityEquipmentInformations/count",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/Stations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Station.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/Stations/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#create
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Stations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#createMany
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Stations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#upsert
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Stations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#exists
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Stations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#findById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Stations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#find
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Stations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#findOne
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Stations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#updateAll
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Stations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#deleteById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Stations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#count
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Stations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#prototype$updateAttributes
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Stations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#createChangeStream
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Stations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#deleteMultiple
             * @methodOf lbServices.Station
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/Stations/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#FuzzyPrecision
             * @methodOf lbServices.Station
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `StationName` – `{string=}` -
             *
             *  - `StationRank` – `{string=}` -
             *
             *  - `StationNature` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/Stations/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#PagingFind
             * @methodOf lbServices.Station
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Stations/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.stations.findById() instead.
            "::findById::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.destroyById() instead.
            "::destroyById::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.updateById() instead.
            "::updateById::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.link() instead.
            "::link::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.unlink() instead.
            "::unlink::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.exists() instead.
            "::exists::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.stations() instead.
            "::get::Rode::stations": {
              isArray: true,
              url: urlBase + "/rodes/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.create() instead.
            "::create::Rode::stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Rode.stations.createMany() instead.
            "::createMany::Rode::stations": {
              isArray: true,
              url: urlBase + "/rodes/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Rode.stations.destroyAll() instead.
            "::delete::Rode::stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.count() instead.
            "::count::Rode::stations": {
              url: urlBase + "/rodes/:id/stations/count",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.station() instead.
            "::get::SecurityEquipmentInformation::station": {
              url: urlBase + "/SecurityEquipmentInformations/:id/station",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.station() instead.
            "::get::RodeContain::station": {
              url: urlBase + "/RodeContains/:id/station",
              method: "GET",
            },

            // INTERNAL. Use StationRank.stations.findById() instead.
            "::findById::StationRank::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationRanks/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use StationRank.stations.destroyById() instead.
            "::destroyById::StationRank::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationRanks/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use StationRank.stations.updateById() instead.
            "::updateById::StationRank::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationRanks/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use StationRank.stations() instead.
            "::get::StationRank::stations": {
              isArray: true,
              url: urlBase + "/StationRanks/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use StationRank.stations.create() instead.
            "::create::StationRank::stations": {
              url: urlBase + "/StationRanks/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use StationRank.stations.createMany() instead.
            "::createMany::StationRank::stations": {
              isArray: true,
              url: urlBase + "/StationRanks/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use StationRank.stations.destroyAll() instead.
            "::delete::StationRank::stations": {
              url: urlBase + "/StationRanks/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use StationRank.stations.count() instead.
            "::count::StationRank::stations": {
              url: urlBase + "/StationRanks/:id/stations/count",
              method: "GET",
            },

            // INTERNAL. Use Administration.stations.findById() instead.
            "::findById::Administration::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Administration.stations.destroyById() instead.
            "::destroyById::Administration::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.stations.updateById() instead.
            "::updateById::Administration::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Administration.stations() instead.
            "::get::Administration::stations": {
              isArray: true,
              url: urlBase + "/Administrations/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use Administration.stations.create() instead.
            "::create::Administration::stations": {
              url: urlBase + "/Administrations/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Administration.stations.createMany() instead.
            "::createMany::Administration::stations": {
              isArray: true,
              url: urlBase + "/Administrations/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Administration.stations.destroyAll() instead.
            "::delete::Administration::stations": {
              url: urlBase + "/Administrations/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.stations.count() instead.
            "::count::Administration::stations": {
              url: urlBase + "/Administrations/:id/stations/count",
              method: "GET",
            },

            // INTERNAL. Use StationNature.stations.findById() instead.
            "::findById::StationNature::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationNatures/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use StationNature.stations.destroyById() instead.
            "::destroyById::StationNature::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationNatures/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use StationNature.stations.updateById() instead.
            "::updateById::StationNature::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationNatures/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use StationNature.stations() instead.
            "::get::StationNature::stations": {
              isArray: true,
              url: urlBase + "/StationNatures/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use StationNature.stations.create() instead.
            "::create::StationNature::stations": {
              url: urlBase + "/StationNatures/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use StationNature.stations.createMany() instead.
            "::createMany::StationNature::stations": {
              isArray: true,
              url: urlBase + "/StationNatures/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use StationNature.stations.destroyAll() instead.
            "::delete::StationNature::stations": {
              url: urlBase + "/StationNatures/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use StationNature.stations.count() instead.
            "::count::StationNature::stations": {
              url: urlBase + "/StationNatures/:id/stations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Station#updateOrCreate
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Station#update
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Station#destroyById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Station#removeById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Station#modelName
        * @propertyOf lbServices.Station
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Station`.
        */
        R.modelName = "Station";

    /**
     * @ngdoc object
     * @name lbServices.Station.securityEquipmentInformations
     * @header lbServices.Station.securityEquipmentInformations
     * @object
     * @description
     *
     * The object `Station.securityEquipmentInformations` groups methods
     * manipulating `SecurityEquipmentInformation` instances related to `Station`.
     *
     * Call {@link lbServices.Station#securityEquipmentInformations Station.securityEquipmentInformations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Station#securityEquipmentInformations
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Queries securityEquipmentInformations of Station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::get::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.securityEquipmentInformations#count
             * @methodOf lbServices.Station.securityEquipmentInformations
             *
             * @description
             *
             * Counts securityEquipmentInformations of Station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.securityEquipmentInformations.count = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::count::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.securityEquipmentInformations#create
             * @methodOf lbServices.Station.securityEquipmentInformations
             *
             * @description
             *
             * Creates a new instance in securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.create = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::create::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.securityEquipmentInformations#createMany
             * @methodOf lbServices.Station.securityEquipmentInformations
             *
             * @description
             *
             * Creates a new instance in securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.createMany = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::createMany::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.securityEquipmentInformations#destroyAll
             * @methodOf lbServices.Station.securityEquipmentInformations
             *
             * @description
             *
             * Deletes all securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.securityEquipmentInformations.destroyAll = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::delete::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.securityEquipmentInformations#destroyById
             * @methodOf lbServices.Station.securityEquipmentInformations
             *
             * @description
             *
             * Delete a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.securityEquipmentInformations.destroyById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::destroyById::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.securityEquipmentInformations#findById
             * @methodOf lbServices.Station.securityEquipmentInformations
             *
             * @description
             *
             * Find a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.findById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::findById::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.securityEquipmentInformations#updateById
             * @methodOf lbServices.Station.securityEquipmentInformations
             *
             * @description
             *
             * Update a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.updateById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::updateById::Station::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Station.rodes
     * @header lbServices.Station.rodes
     * @object
     * @description
     *
     * The object `Station.rodes` groups methods
     * manipulating `Rode` instances related to `Station`.
     *
     * Call {@link lbServices.Station#rodes Station.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Station#rodes
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Queries rodes of Station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#count
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Counts rodes of Station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#create
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#createMany
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#destroyAll
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#destroyById
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#exists
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#findById
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#link
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#unlink
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#updateById
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station#stationRank
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Fetches belongsTo relation stationRank.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
        R.stationRank = function() {
          var TargetResource = $injector.get("StationRank");
          var action = TargetResource["::get::Station::stationRank"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station#administration
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Fetches belongsTo relation administration.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
        R.administration = function() {
          var TargetResource = $injector.get("Administration");
          var action = TargetResource["::get::Station::administration"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station#stationNature
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Fetches belongsTo relation stationNature.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
        R.stationNature = function() {
          var TargetResource = $injector.get("StationNature");
          var action = TargetResource["::get::Station::stationNature"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station#affiliatedInstitution
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::Station::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EquipmentInfor
 * @header lbServices.EquipmentInfor
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EquipmentInfor` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EquipmentInfor",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EquipmentInfors/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EquipmentInfor.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EquipmentInfor.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EquipmentInfor.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EquipmentInfor.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EquipmentInfor.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EquipmentInfors/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use EquipmentInfor.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/EquipmentInfors/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.alignment() instead.
            "prototype$__get__alignment": {
              url: urlBase + "/EquipmentInfors/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.category() instead.
            "prototype$__get__category": {
              url: urlBase + "/EquipmentInfors/:id/category",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/EquipmentInfors/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/EquipmentInfors/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use EquipmentInfor.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/EquipmentInfors/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use EquipmentInfor.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/EquipmentInfors/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#create
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EquipmentInfors",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#createMany
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EquipmentInfors",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#upsert
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EquipmentInfors",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#exists
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EquipmentInfors/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#findById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EquipmentInfors/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#find
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EquipmentInfors",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#findOne
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EquipmentInfors/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#updateAll
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EquipmentInfors/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#deleteById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EquipmentInfors/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#count
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EquipmentInfors/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#prototype$updateAttributes
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EquipmentInfors/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#createChangeStream
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EquipmentInfors/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#deleteMultiple
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/EquipmentInfors/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#FuzzyPrecision
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `DeviceName` – `{string=}` -
             *
             *  - `ProtectiveFacilities` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/EquipmentInfors/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#PagingFind
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/EquipmentInfors/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.equipmentInfors.findById() instead.
            "::findById::Rode::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.equipmentInfors.destroyById() instead.
            "::destroyById::Rode::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.equipmentInfors.updateById() instead.
            "::updateById::Rode::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.equipmentInfors.link() instead.
            "::link::Rode::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.equipmentInfors.unlink() instead.
            "::unlink::Rode::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.equipmentInfors.exists() instead.
            "::exists::Rode::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/equipmentInfors/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.equipmentInfors() instead.
            "::get::Rode::equipmentInfors": {
              isArray: true,
              url: urlBase + "/rodes/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use Rode.equipmentInfors.create() instead.
            "::create::Rode::equipmentInfors": {
              url: urlBase + "/rodes/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Rode.equipmentInfors.createMany() instead.
            "::createMany::Rode::equipmentInfors": {
              isArray: true,
              url: urlBase + "/rodes/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Rode.equipmentInfors.destroyAll() instead.
            "::delete::Rode::equipmentInfors": {
              url: urlBase + "/rodes/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.equipmentInfors.count() instead.
            "::count::Rode::equipmentInfors": {
              url: urlBase + "/rodes/:id/equipmentInfors/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.equipmentInfor() instead.
            "::get::RodeContain::equipmentInfor": {
              url: urlBase + "/RodeContains/:id/equipmentInfor",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.findById() instead.
            "::findById::AffiliatedInstitution::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.destroyById() instead.
            "::destroyById::AffiliatedInstitution::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.updateById() instead.
            "::updateById::AffiliatedInstitution::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors() instead.
            "::get::AffiliatedInstitution::equipmentInfors": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.create() instead.
            "::create::AffiliatedInstitution::equipmentInfors": {
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.createMany() instead.
            "::createMany::AffiliatedInstitution::equipmentInfors": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.destroyAll() instead.
            "::delete::AffiliatedInstitution::equipmentInfors": {
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.count() instead.
            "::count::AffiliatedInstitution::equipmentInfors": {
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.equipmentInfors.findById() instead.
            "::findById::Alignment::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.equipmentInfors.destroyById() instead.
            "::destroyById::Alignment::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.equipmentInfors.updateById() instead.
            "::updateById::Alignment::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.equipmentInfors() instead.
            "::get::Alignment::equipmentInfors": {
              isArray: true,
              url: urlBase + "/Alignments/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use Alignment.equipmentInfors.create() instead.
            "::create::Alignment::equipmentInfors": {
              url: urlBase + "/Alignments/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Alignment.equipmentInfors.createMany() instead.
            "::createMany::Alignment::equipmentInfors": {
              isArray: true,
              url: urlBase + "/Alignments/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Alignment.equipmentInfors.destroyAll() instead.
            "::delete::Alignment::equipmentInfors": {
              url: urlBase + "/Alignments/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.equipmentInfors.count() instead.
            "::count::Alignment::equipmentInfors": {
              url: urlBase + "/Alignments/:id/equipmentInfors/count",
              method: "GET",
            },

            // INTERNAL. Use Category.equipmentInfors.findById() instead.
            "::findById::Category::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use Category.equipmentInfors.destroyById() instead.
            "::destroyById::Category::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Category.equipmentInfors.updateById() instead.
            "::updateById::Category::equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Category.equipmentInfors() instead.
            "::get::Category::equipmentInfors": {
              isArray: true,
              url: urlBase + "/Categories/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use Category.equipmentInfors.create() instead.
            "::create::Category::equipmentInfors": {
              url: urlBase + "/Categories/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Category.equipmentInfors.createMany() instead.
            "::createMany::Category::equipmentInfors": {
              isArray: true,
              url: urlBase + "/Categories/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Category.equipmentInfors.destroyAll() instead.
            "::delete::Category::equipmentInfors": {
              url: urlBase + "/Categories/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use Category.equipmentInfors.count() instead.
            "::count::Category::equipmentInfors": {
              url: urlBase + "/Categories/:id/equipmentInfors/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#updateOrCreate
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#update
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#destroyById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#removeById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EquipmentInfor#modelName
        * @propertyOf lbServices.EquipmentInfor
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EquipmentInfor`.
        */
        R.modelName = "EquipmentInfor";

    /**
     * @ngdoc object
     * @name lbServices.EquipmentInfor.rodes
     * @header lbServices.EquipmentInfor.rodes
     * @object
     * @description
     *
     * The object `EquipmentInfor.rodes` groups methods
     * manipulating `Rode` instances related to `EquipmentInfor`.
     *
     * Call {@link lbServices.EquipmentInfor#rodes EquipmentInfor.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#rodes
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Queries rodes of EquipmentInfor.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#count
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Counts rodes of EquipmentInfor.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#create
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#createMany
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#destroyAll
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#destroyById
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#exists
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#findById
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#link
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#unlink
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor.rodes#updateById
             * @methodOf lbServices.EquipmentInfor.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::EquipmentInfor::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#affiliatedInstitution
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::EquipmentInfor::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#alignment
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Fetches belongsTo relation alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignment = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::EquipmentInfor::alignment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#category
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Fetches belongsTo relation category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R.category = function() {
          var TargetResource = $injector.get("Category");
          var action = TargetResource["::get::EquipmentInfor::category"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Monitoring
 * @header lbServices.Monitoring
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Monitoring` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Monitoring",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Monitorings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Monitoring.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Monitoring.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Monitoring.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Monitoring.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Monitoring.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Monitoring.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Monitorings/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Monitoring.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/Monitorings/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use Monitoring.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/Monitorings/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Monitoring.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/Monitorings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Monitoring.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/Monitorings/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Monitoring.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/Monitorings/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#create
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Monitorings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#createMany
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Monitorings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#upsert
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Monitorings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#exists
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Monitorings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#findById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Monitorings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#find
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Monitorings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#findOne
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Monitorings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#updateAll
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Monitorings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#deleteById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Monitorings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#count
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Monitorings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#prototype$updateAttributes
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Monitorings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#createChangeStream
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Monitorings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#deleteMultiple
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/Monitorings/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#fuzzyQuery
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `DeviceName` – `{string=}` -
             *
             *  - `Address` – `{string=}` -
             *
             *  - `Number` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `monitorings` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/Monitorings/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#PagingFind
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Monitorings/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.monitorings.findById() instead.
            "::findById::Rode::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.monitorings.destroyById() instead.
            "::destroyById::Rode::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.monitorings.updateById() instead.
            "::updateById::Rode::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.monitorings.link() instead.
            "::link::Rode::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.monitorings.unlink() instead.
            "::unlink::Rode::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.monitorings.exists() instead.
            "::exists::Rode::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/monitorings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.monitorings() instead.
            "::get::Rode::monitorings": {
              isArray: true,
              url: urlBase + "/rodes/:id/monitorings",
              method: "GET",
            },

            // INTERNAL. Use Rode.monitorings.create() instead.
            "::create::Rode::monitorings": {
              url: urlBase + "/rodes/:id/monitorings",
              method: "POST",
            },

            // INTERNAL. Use Rode.monitorings.createMany() instead.
            "::createMany::Rode::monitorings": {
              isArray: true,
              url: urlBase + "/rodes/:id/monitorings",
              method: "POST",
            },

            // INTERNAL. Use Rode.monitorings.destroyAll() instead.
            "::delete::Rode::monitorings": {
              url: urlBase + "/rodes/:id/monitorings",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.monitorings.count() instead.
            "::count::Rode::monitorings": {
              url: urlBase + "/rodes/:id/monitorings/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.monitoring() instead.
            "::get::RodeContain::monitoring": {
              url: urlBase + "/RodeContains/:id/monitoring",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.findById() instead.
            "::findById::AffiliatedInstitution::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.destroyById() instead.
            "::destroyById::AffiliatedInstitution::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.updateById() instead.
            "::updateById::AffiliatedInstitution::monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings() instead.
            "::get::AffiliatedInstitution::monitorings": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.create() instead.
            "::create::AffiliatedInstitution::monitorings": {
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.createMany() instead.
            "::createMany::AffiliatedInstitution::monitorings": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.destroyAll() instead.
            "::delete::AffiliatedInstitution::monitorings": {
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.count() instead.
            "::count::AffiliatedInstitution::monitorings": {
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Monitoring#updateOrCreate
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#update
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#destroyById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#removeById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Monitoring#modelName
        * @propertyOf lbServices.Monitoring
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Monitoring`.
        */
        R.modelName = "Monitoring";

    /**
     * @ngdoc object
     * @name lbServices.Monitoring.rodes
     * @header lbServices.Monitoring.rodes
     * @object
     * @description
     *
     * The object `Monitoring.rodes` groups methods
     * manipulating `Rode` instances related to `Monitoring`.
     *
     * Call {@link lbServices.Monitoring#rodes Monitoring.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Monitoring#rodes
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Queries rodes of Monitoring.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#count
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Counts rodes of Monitoring.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#create
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#createMany
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#destroyAll
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#destroyById
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#exists
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#findById
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#link
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#unlink
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring.rodes#updateById
             * @methodOf lbServices.Monitoring.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Monitoring::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#affiliatedInstitution
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::Monitoring::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EmergencyAccesss
 * @header lbServices.EmergencyAccesss
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EmergencyAccesss` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EmergencyAccesss",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EmergencyAccessses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EmergencyAccesss.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/EmergencyAccessses/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use EmergencyAccesss.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/EmergencyAccessses/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.alignment() instead.
            "prototype$__get__alignment": {
              url: urlBase + "/EmergencyAccessses/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/EmergencyAccessses/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/EmergencyAccessses/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/EmergencyAccessses/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use EmergencyAccesss.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/EmergencyAccessses/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#create
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EmergencyAccessses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#createMany
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EmergencyAccessses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#upsert
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EmergencyAccessses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#exists
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EmergencyAccessses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#findById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EmergencyAccessses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#find
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EmergencyAccessses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#findOne
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EmergencyAccessses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#updateAll
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EmergencyAccessses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#deleteById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EmergencyAccessses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#count
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EmergencyAccessses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#prototype$updateAttributes
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EmergencyAccessses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#createChangeStream
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EmergencyAccessses/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#deleteMultiple
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/EmergencyAccessses/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#fuzzyQuery
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `emergencyaccesss` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/EmergencyAccessses/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#PagingFind
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/EmergencyAccessses/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.emergencyAccessss.findById() instead.
            "::findById::Rode::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.emergencyAccessss.destroyById() instead.
            "::destroyById::Rode::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.emergencyAccessss.updateById() instead.
            "::updateById::Rode::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.emergencyAccessss.link() instead.
            "::link::Rode::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.emergencyAccessss.unlink() instead.
            "::unlink::Rode::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.emergencyAccessss.exists() instead.
            "::exists::Rode::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/emergencyAccessss/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.emergencyAccessss() instead.
            "::get::Rode::emergencyAccessss": {
              isArray: true,
              url: urlBase + "/rodes/:id/emergencyAccessss",
              method: "GET",
            },

            // INTERNAL. Use Rode.emergencyAccessss.create() instead.
            "::create::Rode::emergencyAccessss": {
              url: urlBase + "/rodes/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use Rode.emergencyAccessss.createMany() instead.
            "::createMany::Rode::emergencyAccessss": {
              isArray: true,
              url: urlBase + "/rodes/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use Rode.emergencyAccessss.destroyAll() instead.
            "::delete::Rode::emergencyAccessss": {
              url: urlBase + "/rodes/:id/emergencyAccessss",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.emergencyAccessss.count() instead.
            "::count::Rode::emergencyAccessss": {
              url: urlBase + "/rodes/:id/emergencyAccessss/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.emergencyAccesss() instead.
            "::get::RodeContain::emergencyAccesss": {
              url: urlBase + "/RodeContains/:id/emergencyAccesss",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.findById() instead.
            "::findById::AffiliatedInstitution::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.destroyById() instead.
            "::destroyById::AffiliatedInstitution::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.updateById() instead.
            "::updateById::AffiliatedInstitution::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss() instead.
            "::get::AffiliatedInstitution::emergencyAccessss": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.create() instead.
            "::create::AffiliatedInstitution::emergencyAccessss": {
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.createMany() instead.
            "::createMany::AffiliatedInstitution::emergencyAccessss": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.destroyAll() instead.
            "::delete::AffiliatedInstitution::emergencyAccessss": {
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.count() instead.
            "::count::AffiliatedInstitution::emergencyAccessss": {
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.findById() instead.
            "::findById::Alignment::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/emergencyAccessss/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.destroyById() instead.
            "::destroyById::Alignment::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/emergencyAccessss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.updateById() instead.
            "::updateById::Alignment::emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/emergencyAccessss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.emergencyAccessss() instead.
            "::get::Alignment::emergencyAccessss": {
              isArray: true,
              url: urlBase + "/Alignments/:id/emergencyAccessss",
              method: "GET",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.create() instead.
            "::create::Alignment::emergencyAccessss": {
              url: urlBase + "/Alignments/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.createMany() instead.
            "::createMany::Alignment::emergencyAccessss": {
              isArray: true,
              url: urlBase + "/Alignments/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.destroyAll() instead.
            "::delete::Alignment::emergencyAccessss": {
              url: urlBase + "/Alignments/:id/emergencyAccessss",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.count() instead.
            "::count::Alignment::emergencyAccessss": {
              url: urlBase + "/Alignments/:id/emergencyAccessss/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#updateOrCreate
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#update
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#destroyById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#removeById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EmergencyAccesss#modelName
        * @propertyOf lbServices.EmergencyAccesss
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EmergencyAccesss`.
        */
        R.modelName = "EmergencyAccesss";

    /**
     * @ngdoc object
     * @name lbServices.EmergencyAccesss.rodes
     * @header lbServices.EmergencyAccesss.rodes
     * @object
     * @description
     *
     * The object `EmergencyAccesss.rodes` groups methods
     * manipulating `Rode` instances related to `EmergencyAccesss`.
     *
     * Call {@link lbServices.EmergencyAccesss#rodes EmergencyAccesss.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#rodes
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Queries rodes of EmergencyAccesss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#count
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Counts rodes of EmergencyAccesss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#create
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#createMany
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#destroyAll
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#destroyById
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#exists
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#findById
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#link
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#unlink
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss.rodes#updateById
             * @methodOf lbServices.EmergencyAccesss.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::EmergencyAccesss::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#affiliatedInstitution
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::EmergencyAccesss::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#alignment
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Fetches belongsTo relation alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignment = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::EmergencyAccesss::alignment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FenceInfo
 * @header lbServices.FenceInfo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FenceInfo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FenceInfo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/FenceInfos/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FenceInfo.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FenceInfo.affiliatedInstitutions() instead.
            "prototype$__get__affiliatedInstitutions": {
              url: urlBase + "/FenceInfos/:id/affiliatedInstitutions",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.alignments() instead.
            "prototype$__get__alignments": {
              url: urlBase + "/FenceInfos/:id/alignments",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/FenceInfos/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#create
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FenceInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#createMany
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FenceInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#upsert
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FenceInfos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#exists
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FenceInfos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#findById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FenceInfos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#find
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FenceInfos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#findOne
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FenceInfos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#updateAll
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/FenceInfos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#deleteById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FenceInfos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#count
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FenceInfos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#prototype$updateAttributes
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FenceInfos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#createChangeStream
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FenceInfos/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#deleteMultiple
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/FenceInfos/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#FuzzyPrecision
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `Name` – `{string=}` -
             *
             *  - `AdministrativeDepartment` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/FenceInfos/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#PagingFind
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/FenceInfos/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use RodeContain.fenceInfos() instead.
            "::get::RodeContain::fenceInfos": {
              url: urlBase + "/RodeContains/:id/fenceInfos",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.findById() instead.
            "::findById::AffiliatedInstitution::fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.destroyById() instead.
            "::destroyById::AffiliatedInstitution::fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.updateById() instead.
            "::updateById::AffiliatedInstitution::fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos() instead.
            "::get::AffiliatedInstitution::fenceInfos": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.create() instead.
            "::create::AffiliatedInstitution::fenceInfos": {
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.createMany() instead.
            "::createMany::AffiliatedInstitution::fenceInfos": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.destroyAll() instead.
            "::delete::AffiliatedInstitution::fenceInfos": {
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.count() instead.
            "::count::AffiliatedInstitution::fenceInfos": {
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.fenceInfos.findById() instead.
            "::findById::Alignment::fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/fenceInfos/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.fenceInfos.destroyById() instead.
            "::destroyById::Alignment::fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/fenceInfos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.fenceInfos.updateById() instead.
            "::updateById::Alignment::fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/fenceInfos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.fenceInfos() instead.
            "::get::Alignment::fenceInfos": {
              isArray: true,
              url: urlBase + "/Alignments/:id/fenceInfos",
              method: "GET",
            },

            // INTERNAL. Use Alignment.fenceInfos.create() instead.
            "::create::Alignment::fenceInfos": {
              url: urlBase + "/Alignments/:id/fenceInfos",
              method: "POST",
            },

            // INTERNAL. Use Alignment.fenceInfos.createMany() instead.
            "::createMany::Alignment::fenceInfos": {
              isArray: true,
              url: urlBase + "/Alignments/:id/fenceInfos",
              method: "POST",
            },

            // INTERNAL. Use Alignment.fenceInfos.destroyAll() instead.
            "::delete::Alignment::fenceInfos": {
              url: urlBase + "/Alignments/:id/fenceInfos",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.fenceInfos.count() instead.
            "::count::Alignment::fenceInfos": {
              url: urlBase + "/Alignments/:id/fenceInfos/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#updateOrCreate
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#update
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#destroyById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#removeById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.FenceInfo#modelName
        * @propertyOf lbServices.FenceInfo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FenceInfo`.
        */
        R.modelName = "FenceInfo";

    /**
     * @ngdoc object
     * @name lbServices.FenceInfo.rodes
     * @header lbServices.FenceInfo.rodes
     * @object
     * @description
     *
     * The object `FenceInfo.rodes` groups methods
     * manipulating `Rode` instances related to `FenceInfo`.
     *
     * Call {@link lbServices.FenceInfo#rodes FenceInfo.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#rodes
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Queries rodes of FenceInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#count
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Counts rodes of FenceInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#create
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#createMany
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#destroyAll
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#destroyById
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#exists
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#findById
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#link
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#unlink
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#updateById
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#affiliatedInstitutions
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitutions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitutions = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::FenceInfo::affiliatedInstitutions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#alignments
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Fetches belongsTo relation alignments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignments = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::FenceInfo::alignments"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SecurityEquipmentInformation
 * @header lbServices.SecurityEquipmentInformation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SecurityEquipmentInformation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SecurityEquipmentInformation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SecurityEquipmentInformations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SecurityEquipmentInformation.station() instead.
            "prototype$__get__station": {
              url: urlBase + "/SecurityEquipmentInformations/:id/station",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use SecurityEquipmentInformation.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/SecurityEquipmentInformations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use SecurityEquipmentInformation.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/SecurityEquipmentInformations/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#create
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SecurityEquipmentInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#createMany
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SecurityEquipmentInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#upsert
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SecurityEquipmentInformations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#exists
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SecurityEquipmentInformations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#findById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SecurityEquipmentInformations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#find
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SecurityEquipmentInformations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#findOne
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SecurityEquipmentInformations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#updateAll
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SecurityEquipmentInformations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#deleteById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SecurityEquipmentInformations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#count
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SecurityEquipmentInformations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#prototype$updateAttributes
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SecurityEquipmentInformations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#createChangeStream
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SecurityEquipmentInformations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#deleteMultiple
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/SecurityEquipmentInformations/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#FuzzyPrecision
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `Name` – `{string=}` -
             *
             *  - `AdministrativeDepartment` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/SecurityEquipmentInformations/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#PagingFind
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/SecurityEquipmentInformations/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.findById() instead.
            "::findById::Rode::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.destroyById() instead.
            "::destroyById::Rode::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.updateById() instead.
            "::updateById::Rode::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.link() instead.
            "::link::Rode::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.unlink() instead.
            "::unlink::Rode::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.exists() instead.
            "::exists::Rode::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/securityEquipmentInformations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations() instead.
            "::get::Rode::securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/rodes/:id/securityEquipmentInformations",
              method: "GET",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.create() instead.
            "::create::Rode::securityEquipmentInformations": {
              url: urlBase + "/rodes/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.createMany() instead.
            "::createMany::Rode::securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/rodes/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.destroyAll() instead.
            "::delete::Rode::securityEquipmentInformations": {
              url: urlBase + "/rodes/:id/securityEquipmentInformations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.securityEquipmentInformations.count() instead.
            "::count::Rode::securityEquipmentInformations": {
              url: urlBase + "/rodes/:id/securityEquipmentInformations/count",
              method: "GET",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.findById() instead.
            "::findById::Station::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/securityEquipmentInformations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.destroyById() instead.
            "::destroyById::Station::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/securityEquipmentInformations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.updateById() instead.
            "::updateById::Station::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/securityEquipmentInformations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.securityEquipmentInformations() instead.
            "::get::Station::securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/Stations/:id/securityEquipmentInformations",
              method: "GET",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.create() instead.
            "::create::Station::securityEquipmentInformations": {
              url: urlBase + "/Stations/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.createMany() instead.
            "::createMany::Station::securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/Stations/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.destroyAll() instead.
            "::delete::Station::securityEquipmentInformations": {
              url: urlBase + "/Stations/:id/securityEquipmentInformations",
              method: "DELETE",
            },

            // INTERNAL. Use Station.securityEquipmentInformations.count() instead.
            "::count::Station::securityEquipmentInformations": {
              url: urlBase + "/Stations/:id/securityEquipmentInformations/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.securityEquipmentInformation() instead.
            "::get::RodeContain::securityEquipmentInformation": {
              url: urlBase + "/RodeContains/:id/securityEquipmentInformation",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.findById() instead.
            "::findById::AffiliatedInstitution::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.destroyById() instead.
            "::destroyById::AffiliatedInstitution::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.updateById() instead.
            "::updateById::AffiliatedInstitution::securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations() instead.
            "::get::AffiliatedInstitution::securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.create() instead.
            "::create::AffiliatedInstitution::securityEquipmentInformations": {
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.createMany() instead.
            "::createMany::AffiliatedInstitution::securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.destroyAll() instead.
            "::delete::AffiliatedInstitution::securityEquipmentInformations": {
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.count() instead.
            "::count::AffiliatedInstitution::securityEquipmentInformations": {
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#updateOrCreate
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#update
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#destroyById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#removeById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SecurityEquipmentInformation#modelName
        * @propertyOf lbServices.SecurityEquipmentInformation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SecurityEquipmentInformation`.
        */
        R.modelName = "SecurityEquipmentInformation";


            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#station
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Fetches belongsTo relation station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.station = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::SecurityEquipmentInformation::station"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SecurityEquipmentInformation.rodes
     * @header lbServices.SecurityEquipmentInformation.rodes
     * @object
     * @description
     *
     * The object `SecurityEquipmentInformation.rodes` groups methods
     * manipulating `Rode` instances related to `SecurityEquipmentInformation`.
     *
     * Call {@link lbServices.SecurityEquipmentInformation#rodes SecurityEquipmentInformation.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#rodes
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Queries rodes of SecurityEquipmentInformation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#count
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Counts rodes of SecurityEquipmentInformation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#create
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#createMany
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#destroyAll
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#destroyById
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#exists
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#findById
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#link
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#unlink
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation.rodes#updateById
             * @methodOf lbServices.SecurityEquipmentInformation.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::SecurityEquipmentInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#affiliatedInstitution
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::SecurityEquipmentInformation::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RodeContain
 * @header lbServices.RodeContain
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RodeContain` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RodeContain",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RodeContains/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RodeContain.station() instead.
            "prototype$__get__station": {
              url: urlBase + "/RodeContains/:id/station",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.tunnel() instead.
            "prototype$__get__tunnel": {
              url: urlBase + "/RodeContains/:id/tunnel",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.servicePort() instead.
            "prototype$__get__servicePort": {
              url: urlBase + "/RodeContains/:id/servicePort",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.levelCrossing() instead.
            "prototype$__get__levelCrossing": {
              url: urlBase + "/RodeContains/:id/levelCrossing",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.keyPlace() instead.
            "prototype$__get__keyPlace": {
              url: urlBase + "/RodeContains/:id/keyPlace",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.hiddenDangerPlace() instead.
            "prototype$__get__hiddenDangerPlace": {
              url: urlBase + "/RodeContains/:id/hiddenDangerPlace",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.fenceInfos() instead.
            "prototype$__get__fenceInfos": {
              url: urlBase + "/RodeContains/:id/fenceInfos",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.culvert() instead.
            "prototype$__get__culvert": {
              url: urlBase + "/RodeContains/:id/culvert",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.crossIronBridge() instead.
            "prototype$__get__crossIronBridge": {
              url: urlBase + "/RodeContains/:id/crossIronBridge",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.broadcastWarningPost() instead.
            "prototype$__get__broadcastWarningPost": {
              url: urlBase + "/RodeContains/:id/broadcastWarningPost",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.bridge() instead.
            "prototype$__get__bridge": {
              url: urlBase + "/RodeContains/:id/bridge",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.baseStation() instead.
            "prototype$__get__baseStation": {
              url: urlBase + "/RodeContains/:id/baseStation",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.aPropagandaPoint() instead.
            "prototype$__get__aPropagandaPoint": {
              url: urlBase + "/RodeContains/:id/aPropagandaPoint",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.keyPersion() instead.
            "prototype$__get__keyPersion": {
              url: urlBase + "/RodeContains/:id/keyPersion",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.monitoring() instead.
            "prototype$__get__monitoring": {
              url: urlBase + "/RodeContains/:id/monitoring",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.emergencyAccesss() instead.
            "prototype$__get__emergencyAccesss": {
              url: urlBase + "/RodeContains/:id/emergencyAccesss",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.equipmentInfor() instead.
            "prototype$__get__equipmentInfor": {
              url: urlBase + "/RodeContains/:id/equipmentInfor",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.securityEquipmentInformation() instead.
            "prototype$__get__securityEquipmentInformation": {
              url: urlBase + "/RodeContains/:id/securityEquipmentInformation",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.rode() instead.
            "prototype$__get__rode": {
              url: urlBase + "/RodeContains/:id/rode",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.theRoadStation() instead.
            "prototype$__get__theRoadStation": {
              url: urlBase + "/RodeContains/:id/theRoadStation",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#create
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RodeContains",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#createMany
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RodeContains",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#upsert
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RodeContains",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#exists
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RodeContains/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#findById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RodeContains/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#find
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RodeContains",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#findOne
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RodeContains/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#updateAll
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RodeContains/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#deleteById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RodeContains/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#count
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RodeContains/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#prototype$updateAttributes
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RodeContains/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#createChangeStream
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RodeContains/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RodeContain#updateOrCreate
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#update
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#destroyById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#removeById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RodeContain#modelName
        * @propertyOf lbServices.RodeContain
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RodeContain`.
        */
        R.modelName = "RodeContain";


            /**
             * @ngdoc method
             * @name lbServices.RodeContain#station
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.station = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::RodeContain::station"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#tunnel
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation tunnel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnel = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::get::RodeContain::tunnel"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#servicePort
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation servicePort.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePort = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::get::RodeContain::servicePort"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#levelCrossing
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation levelCrossing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossing = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::get::RodeContain::levelCrossing"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#keyPlace
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation keyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlace = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::RodeContain::keyPlace"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#hiddenDangerPlace
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation hiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlace = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::RodeContain::hiddenDangerPlace"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#fenceInfos
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::get::RodeContain::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#culvert
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation culvert.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culvert = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::RodeContain::culvert"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#crossIronBridge
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation crossIronBridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridge = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::get::RodeContain::crossIronBridge"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#broadcastWarningPost
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation broadcastWarningPost.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPost = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::get::RodeContain::broadcastWarningPost"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#bridge
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation bridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridge = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::RodeContain::bridge"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#baseStation
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation baseStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStation = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::get::RodeContain::baseStation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#aPropagandaPoint
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation aPropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoint = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::get::RodeContain::aPropagandaPoint"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#keyPersion
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation keyPersion.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R.keyPersion = function() {
          var TargetResource = $injector.get("KeyPersion");
          var action = TargetResource["::get::RodeContain::keyPersion"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#monitoring
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation monitoring.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitoring = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::get::RodeContain::monitoring"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#emergencyAccesss
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation emergencyAccesss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccesss = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::get::RodeContain::emergencyAccesss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#equipmentInfor
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation equipmentInfor.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfor = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::get::RodeContain::equipmentInfor"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#securityEquipmentInformation
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation securityEquipmentInformation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformation = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::get::RodeContain::securityEquipmentInformation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#rode
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rode = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::RodeContain::rode"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#theRoadStation
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation theRoadStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStation = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::get::RodeContain::theRoadStation"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.HiddenDangerPlaceImage
 * @header lbServices.HiddenDangerPlaceImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `HiddenDangerPlaceImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "HiddenDangerPlaceImage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/HiddenDangerPlaceImages/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#create
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/HiddenDangerPlaceImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#createMany
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaceImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#upsert
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/HiddenDangerPlaceImages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#exists
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/HiddenDangerPlaceImages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#findById
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/HiddenDangerPlaceImages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#find
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaceImages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#findOne
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/HiddenDangerPlaceImages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#updateAll
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/HiddenDangerPlaceImages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#deleteById
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/HiddenDangerPlaceImages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#count
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/HiddenDangerPlaceImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#prototype$updateAttributes
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/HiddenDangerPlaceImages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#createChangeStream
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/HiddenDangerPlaceImages/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#deleteMultiple
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/HiddenDangerPlaceImages/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#upload
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Upload a file or more files
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` – `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/HiddenDangerPlaceImages/upload",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.findById() instead.
            "::findById::HiddenDangerPlace::hiddenDangerPlaceImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.destroyById() instead.
            "::destroyById::HiddenDangerPlace::hiddenDangerPlaceImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.updateById() instead.
            "::updateById::HiddenDangerPlace::hiddenDangerPlaceImages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages() instead.
            "::get::HiddenDangerPlace::hiddenDangerPlaceImages": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.create() instead.
            "::create::HiddenDangerPlace::hiddenDangerPlaceImages": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.createMany() instead.
            "::createMany::HiddenDangerPlace::hiddenDangerPlaceImages": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.destroyAll() instead.
            "::delete::HiddenDangerPlace::hiddenDangerPlaceImages": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceImages.count() instead.
            "::count::HiddenDangerPlace::hiddenDangerPlaceImages": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceImages/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#updateOrCreate
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#update
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#destroyById
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceImage#removeById
             * @methodOf lbServices.HiddenDangerPlaceImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceImage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.HiddenDangerPlaceImage#modelName
        * @propertyOf lbServices.HiddenDangerPlaceImage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `HiddenDangerPlaceImage`.
        */
        R.modelName = "HiddenDangerPlaceImage";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/Containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/Containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/Containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/Containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/Containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/Containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/Containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/Containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/Containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KeyPlaceImg
 * @header lbServices.KeyPlaceImg
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KeyPlaceImg` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KeyPlaceImg",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KeyPlaceImgs/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#create
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KeyPlaceImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#createMany
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KeyPlaceImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#upsert
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KeyPlaceImgs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#exists
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KeyPlaceImgs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#findById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KeyPlaceImgs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#find
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KeyPlaceImgs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#findOne
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KeyPlaceImgs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#updateAll
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KeyPlaceImgs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#deleteById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KeyPlaceImgs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#count
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KeyPlaceImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#prototype$updateAttributes
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KeyPlaceImgs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#createChangeStream
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KeyPlaceImgs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#deleteMultiple
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/KeyPlaceImgs/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#upload
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Upload a file or more files
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` – `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/KeyPlaceImgs/upload",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.findById() instead.
            "::findById::KeyPlace::keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyById() instead.
            "::destroyById::KeyPlace::keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.updateById() instead.
            "::updateById::KeyPlace::keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs() instead.
            "::get::KeyPlace::keyPlaceImgs": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.create() instead.
            "::create::KeyPlace::keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.createMany() instead.
            "::createMany::KeyPlace::keyPlaceImgs": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyAll() instead.
            "::delete::KeyPlace::keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.count() instead.
            "::count::KeyPlace::keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#updateOrCreate
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#update
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#destroyById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#removeById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KeyPlaceImg#modelName
        * @propertyOf lbServices.KeyPlaceImg
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KeyPlaceImg`.
        */
        R.modelName = "KeyPlaceImg";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.APropagandaPointImg
 * @header lbServices.APropagandaPointImg
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `APropagandaPointImg` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "APropagandaPointImg",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/APropagandaPointImgs/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#create
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/APropagandaPointImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#createMany
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/APropagandaPointImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#upsert
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/APropagandaPointImgs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#exists
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/APropagandaPointImgs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#findById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/APropagandaPointImgs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#find
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/APropagandaPointImgs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#findOne
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/APropagandaPointImgs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#updateAll
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/APropagandaPointImgs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#deleteById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/APropagandaPointImgs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#count
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/APropagandaPointImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#prototype$updateAttributes
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/APropagandaPointImgs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#createChangeStream
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/APropagandaPointImgs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#deleteMultiple
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/APropagandaPointImgs/deleteMultiple",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#upload
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Upload a file or more files
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` – `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/APropagandaPointImgs/upload",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.findById() instead.
            "::findById::APropagandaPoint::aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyById() instead.
            "::destroyById::APropagandaPoint::aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.updateById() instead.
            "::updateById::APropagandaPoint::aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs() instead.
            "::get::APropagandaPoint::aPropagandaPointImgs": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.create() instead.
            "::create::APropagandaPoint::aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.createMany() instead.
            "::createMany::APropagandaPoint::aPropagandaPointImgs": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyAll() instead.
            "::delete::APropagandaPoint::aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.count() instead.
            "::count::APropagandaPoint::aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#updateOrCreate
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#update
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#destroyById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#removeById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.APropagandaPointImg#modelName
        * @propertyOf lbServices.APropagandaPointImg
        * @description
        * The name of the model represented by this $resource,
        * i.e. `APropagandaPointImg`.
        */
        R.modelName = "APropagandaPointImg";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RodeClassification
 * @header lbServices.RodeClassification
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RodeClassification` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RodeClassification",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RodeClassifications/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RodeClassification.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RodeClassifications/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use RodeClassification.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RodeClassifications/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RodeClassification.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RodeClassifications/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RodeClassification.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/RodeClassifications/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use RodeClassification.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/RodeClassifications/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use RodeClassification.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/RodeClassifications/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use RodeClassification.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/RodeClassifications/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#create
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RodeClassifications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#createMany
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RodeClassifications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#upsert
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RodeClassifications",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#exists
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RodeClassifications/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#findById
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RodeClassifications/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#find
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RodeClassifications",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#findOne
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RodeClassifications/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#updateAll
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RodeClassifications/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#deleteById
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RodeClassifications/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#count
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RodeClassifications/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#prototype$updateAttributes
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RodeClassifications/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#createChangeStream
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RodeClassifications/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#deleteMultiple
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/RodeClassifications/deleteMultiple",
              method: "GET",
            },

            // INTERNAL. Use Rode.rodeClassifications() instead.
            "::get::Rode::rodeClassifications": {
              url: urlBase + "/rodes/:id/rodeClassifications",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#updateOrCreate
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#update
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#destroyById
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#removeById
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeClassification` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RodeClassification#modelName
        * @propertyOf lbServices.RodeClassification
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RodeClassification`.
        */
        R.modelName = "RodeClassification";

    /**
     * @ngdoc object
     * @name lbServices.RodeClassification.rodes
     * @header lbServices.RodeClassification.rodes
     * @object
     * @description
     *
     * The object `RodeClassification.rodes` groups methods
     * manipulating `Rode` instances related to `RodeClassification`.
     *
     * Call {@link lbServices.RodeClassification#rodes RodeClassification.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.RodeClassification#rodes
             * @methodOf lbServices.RodeClassification
             *
             * @description
             *
             * Queries rodes of RodeClassification.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification.rodes#count
             * @methodOf lbServices.RodeClassification.rodes
             *
             * @description
             *
             * Counts rodes of RodeClassification.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification.rodes#create
             * @methodOf lbServices.RodeClassification.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification.rodes#createMany
             * @methodOf lbServices.RodeClassification.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification.rodes#destroyAll
             * @methodOf lbServices.RodeClassification.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification.rodes#destroyById
             * @methodOf lbServices.RodeClassification.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification.rodes#findById
             * @methodOf lbServices.RodeClassification.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeClassification.rodes#updateById
             * @methodOf lbServices.RodeClassification.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::RodeClassification::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.StationRank
 * @header lbServices.StationRank
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `StationRank` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "StationRank",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/StationRanks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use StationRank.stations.findById() instead.
            "prototype$__findById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationRanks/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use StationRank.stations.destroyById() instead.
            "prototype$__destroyById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationRanks/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use StationRank.stations.updateById() instead.
            "prototype$__updateById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationRanks/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use StationRank.stations() instead.
            "prototype$__get__stations": {
              isArray: true,
              url: urlBase + "/StationRanks/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use StationRank.stations.create() instead.
            "prototype$__create__stations": {
              url: urlBase + "/StationRanks/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use StationRank.stations.destroyAll() instead.
            "prototype$__delete__stations": {
              url: urlBase + "/StationRanks/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use StationRank.stations.count() instead.
            "prototype$__count__stations": {
              url: urlBase + "/StationRanks/:id/stations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#create
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/StationRanks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#createMany
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/StationRanks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#upsert
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/StationRanks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#exists
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/StationRanks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#findById
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/StationRanks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#find
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/StationRanks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#findOne
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/StationRanks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#updateAll
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/StationRanks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#deleteById
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/StationRanks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#count
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/StationRanks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#prototype$updateAttributes
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/StationRanks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#createChangeStream
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/StationRanks/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationRank#deleteMultiple
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/StationRanks/deleteMultiple",
              method: "GET",
            },

            // INTERNAL. Use Station.stationRank() instead.
            "::get::Station::stationRank": {
              url: urlBase + "/Stations/:id/stationRank",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.StationRank#updateOrCreate
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.StationRank#update
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.StationRank#destroyById
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StationRank#removeById
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationRank` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.StationRank#modelName
        * @propertyOf lbServices.StationRank
        * @description
        * The name of the model represented by this $resource,
        * i.e. `StationRank`.
        */
        R.modelName = "StationRank";

    /**
     * @ngdoc object
     * @name lbServices.StationRank.stations
     * @header lbServices.StationRank.stations
     * @object
     * @description
     *
     * The object `StationRank.stations` groups methods
     * manipulating `Station` instances related to `StationRank`.
     *
     * Call {@link lbServices.StationRank#stations StationRank.stations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.StationRank#stations
             * @methodOf lbServices.StationRank
             *
             * @description
             *
             * Queries stations of StationRank.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::StationRank::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationRank.stations#count
             * @methodOf lbServices.StationRank.stations
             *
             * @description
             *
             * Counts stations of StationRank.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.stations.count = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::count::StationRank::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationRank.stations#create
             * @methodOf lbServices.StationRank.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.create = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::create::StationRank::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationRank.stations#createMany
             * @methodOf lbServices.StationRank.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.createMany = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::createMany::StationRank::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationRank.stations#destroyAll
             * @methodOf lbServices.StationRank.stations
             *
             * @description
             *
             * Deletes all stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyAll = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::delete::StationRank::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationRank.stations#destroyById
             * @methodOf lbServices.StationRank.stations
             *
             * @description
             *
             * Delete a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::destroyById::StationRank::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationRank.stations#findById
             * @methodOf lbServices.StationRank.stations
             *
             * @description
             *
             * Find a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.findById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::findById::StationRank::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationRank.stations#updateById
             * @methodOf lbServices.StationRank.stations
             *
             * @description
             *
             * Update a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.updateById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::updateById::StationRank::stations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LevelCrossingCrossproperty
 * @header lbServices.LevelCrossingCrossproperty
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LevelCrossingCrossproperty` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LevelCrossingCrossproperty",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LevelCrossingCrossproperties/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.findById() instead.
            "prototype$__findById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.destroyById() instead.
            "prototype$__destroyById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.updateById() instead.
            "prototype$__updateById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings() instead.
            "prototype$__get__levelCrossings": {
              isArray: true,
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.create() instead.
            "prototype$__create__levelCrossings": {
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.destroyAll() instead.
            "prototype$__delete__levelCrossings": {
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossingCrossproperty.levelCrossings.count() instead.
            "prototype$__count__levelCrossings": {
              url: urlBase + "/LevelCrossingCrossproperties/:id/levelCrossings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#create
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LevelCrossingCrossproperties",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#createMany
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LevelCrossingCrossproperties",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#upsert
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LevelCrossingCrossproperties",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#exists
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LevelCrossingCrossproperties/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#findById
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LevelCrossingCrossproperties/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#find
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LevelCrossingCrossproperties",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#findOne
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LevelCrossingCrossproperties/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#updateAll
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LevelCrossingCrossproperties/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#deleteById
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LevelCrossingCrossproperties/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#count
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LevelCrossingCrossproperties/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#prototype$updateAttributes
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LevelCrossingCrossproperties/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#createChangeStream
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LevelCrossingCrossproperties/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#deleteMultiple
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/LevelCrossingCrossproperties/deleteMultiple",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.levelCrossingCrossproperty() instead.
            "::get::LevelCrossing::levelCrossingCrossproperty": {
              url: urlBase + "/LevelCrossings/:id/levelCrossingCrossproperty",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#updateOrCreate
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#update
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#destroyById
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#removeById
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossingCrossproperty` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LevelCrossingCrossproperty#modelName
        * @propertyOf lbServices.LevelCrossingCrossproperty
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LevelCrossingCrossproperty`.
        */
        R.modelName = "LevelCrossingCrossproperty";

    /**
     * @ngdoc object
     * @name lbServices.LevelCrossingCrossproperty.levelCrossings
     * @header lbServices.LevelCrossingCrossproperty.levelCrossings
     * @object
     * @description
     *
     * The object `LevelCrossingCrossproperty.levelCrossings` groups methods
     * manipulating `LevelCrossing` instances related to `LevelCrossingCrossproperty`.
     *
     * Call {@link lbServices.LevelCrossingCrossproperty#levelCrossings LevelCrossingCrossproperty.levelCrossings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty#levelCrossings
             * @methodOf lbServices.LevelCrossingCrossproperty
             *
             * @description
             *
             * Queries levelCrossings of LevelCrossingCrossproperty.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::get::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty.levelCrossings#count
             * @methodOf lbServices.LevelCrossingCrossproperty.levelCrossings
             *
             * @description
             *
             * Counts levelCrossings of LevelCrossingCrossproperty.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.levelCrossings.count = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::count::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty.levelCrossings#create
             * @methodOf lbServices.LevelCrossingCrossproperty.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.create = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::create::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty.levelCrossings#createMany
             * @methodOf lbServices.LevelCrossingCrossproperty.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.createMany = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::createMany::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty.levelCrossings#destroyAll
             * @methodOf lbServices.LevelCrossingCrossproperty.levelCrossings
             *
             * @description
             *
             * Deletes all levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyAll = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::delete::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty.levelCrossings#destroyById
             * @methodOf lbServices.LevelCrossingCrossproperty.levelCrossings
             *
             * @description
             *
             * Delete a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::destroyById::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty.levelCrossings#findById
             * @methodOf lbServices.LevelCrossingCrossproperty.levelCrossings
             *
             * @description
             *
             * Find a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.findById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::findById::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossingCrossproperty.levelCrossings#updateById
             * @methodOf lbServices.LevelCrossingCrossproperty.levelCrossings
             *
             * @description
             *
             * Update a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.updateById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::updateById::LevelCrossingCrossproperty::levelCrossings"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Guardian
 * @header lbServices.Guardian
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Guardian` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Guardian",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Guardians/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Guardian.bridges.findById() instead.
            "prototype$__findById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.bridges.destroyById() instead.
            "prototype$__destroyById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.bridges.updateById() instead.
            "prototype$__updateById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.tunnels.findById() instead.
            "prototype$__findById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.tunnels.destroyById() instead.
            "prototype$__destroyById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.tunnels.updateById() instead.
            "prototype$__updateById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.levelCrossings.findById() instead.
            "prototype$__findById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.levelCrossings.destroyById() instead.
            "prototype$__destroyById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.levelCrossings.updateById() instead.
            "prototype$__updateById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.culverts.findById() instead.
            "prototype$__findById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Guardian.culverts.destroyById() instead.
            "prototype$__destroyById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.culverts.updateById() instead.
            "prototype$__updateById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Guardians/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Guardian.bridges() instead.
            "prototype$__get__bridges": {
              isArray: true,
              url: urlBase + "/Guardians/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Guardian.bridges.create() instead.
            "prototype$__create__bridges": {
              url: urlBase + "/Guardians/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Guardian.bridges.destroyAll() instead.
            "prototype$__delete__bridges": {
              url: urlBase + "/Guardians/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.bridges.count() instead.
            "prototype$__count__bridges": {
              url: urlBase + "/Guardians/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use Guardian.tunnels() instead.
            "prototype$__get__tunnels": {
              isArray: true,
              url: urlBase + "/Guardians/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Guardian.tunnels.create() instead.
            "prototype$__create__tunnels": {
              url: urlBase + "/Guardians/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Guardian.tunnels.destroyAll() instead.
            "prototype$__delete__tunnels": {
              url: urlBase + "/Guardians/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.tunnels.count() instead.
            "prototype$__count__tunnels": {
              url: urlBase + "/Guardians/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use Guardian.levelCrossings() instead.
            "prototype$__get__levelCrossings": {
              isArray: true,
              url: urlBase + "/Guardians/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Guardian.levelCrossings.create() instead.
            "prototype$__create__levelCrossings": {
              url: urlBase + "/Guardians/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Guardian.levelCrossings.destroyAll() instead.
            "prototype$__delete__levelCrossings": {
              url: urlBase + "/Guardians/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.levelCrossings.count() instead.
            "prototype$__count__levelCrossings": {
              url: urlBase + "/Guardians/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use Guardian.culverts() instead.
            "prototype$__get__culverts": {
              isArray: true,
              url: urlBase + "/Guardians/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Guardian.culverts.create() instead.
            "prototype$__create__culverts": {
              url: urlBase + "/Guardians/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Guardian.culverts.destroyAll() instead.
            "prototype$__delete__culverts": {
              url: urlBase + "/Guardians/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Guardian.culverts.count() instead.
            "prototype$__count__culverts": {
              url: urlBase + "/Guardians/:id/culverts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#create
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Guardians",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#createMany
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Guardians",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#upsert
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Guardians",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#exists
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Guardians/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#findById
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Guardians/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#find
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Guardians",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#findOne
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Guardians/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#updateAll
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Guardians/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#deleteById
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Guardians/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#count
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Guardians/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#prototype$updateAttributes
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Guardians/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#createChangeStream
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Guardians/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Guardian#deleteMultiple
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `multiple` – `{[number]=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "deleteMultiple": {
              url: urlBase + "/Guardians/deleteMultiple",
              method: "GET",
            },

            // INTERNAL. Use Bridge.guardian() instead.
            "::get::Bridge::guardian": {
              url: urlBase + "/Bridges/:id/guardian",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.guardian() instead.
            "::get::Tunnel::guardian": {
              url: urlBase + "/tunnels/:id/guardian",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.guardian() instead.
            "::get::LevelCrossing::guardian": {
              url: urlBase + "/LevelCrossings/:id/guardian",
              method: "GET",
            },

            // INTERNAL. Use Culvert.guardian() instead.
            "::get::Culvert::guardian": {
              url: urlBase + "/Culverts/:id/guardian",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Guardian#updateOrCreate
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Guardian#update
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Guardian#destroyById
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Guardian#removeById
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Guardian` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Guardian#modelName
        * @propertyOf lbServices.Guardian
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Guardian`.
        */
        R.modelName = "Guardian";

    /**
     * @ngdoc object
     * @name lbServices.Guardian.bridges
     * @header lbServices.Guardian.bridges
     * @object
     * @description
     *
     * The object `Guardian.bridges` groups methods
     * manipulating `Bridge` instances related to `Guardian`.
     *
     * Call {@link lbServices.Guardian#bridges Guardian.bridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Guardian#bridges
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Queries bridges of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::Guardian::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.bridges#count
             * @methodOf lbServices.Guardian.bridges
             *
             * @description
             *
             * Counts bridges of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bridges.count = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::count::Guardian::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.bridges#create
             * @methodOf lbServices.Guardian.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.create = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::create::Guardian::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.bridges#createMany
             * @methodOf lbServices.Guardian.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.createMany = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::createMany::Guardian::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.bridges#destroyAll
             * @methodOf lbServices.Guardian.bridges
             *
             * @description
             *
             * Deletes all bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyAll = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::delete::Guardian::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.bridges#destroyById
             * @methodOf lbServices.Guardian.bridges
             *
             * @description
             *
             * Delete a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::destroyById::Guardian::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.bridges#findById
             * @methodOf lbServices.Guardian.bridges
             *
             * @description
             *
             * Find a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.findById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::findById::Guardian::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.bridges#updateById
             * @methodOf lbServices.Guardian.bridges
             *
             * @description
             *
             * Update a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.updateById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::updateById::Guardian::bridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Guardian.tunnels
     * @header lbServices.Guardian.tunnels
     * @object
     * @description
     *
     * The object `Guardian.tunnels` groups methods
     * manipulating `Tunnel` instances related to `Guardian`.
     *
     * Call {@link lbServices.Guardian#tunnels Guardian.tunnels()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Guardian#tunnels
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Queries tunnels of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::get::Guardian::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.tunnels#count
             * @methodOf lbServices.Guardian.tunnels
             *
             * @description
             *
             * Counts tunnels of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tunnels.count = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::count::Guardian::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.tunnels#create
             * @methodOf lbServices.Guardian.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.create = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::create::Guardian::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.tunnels#createMany
             * @methodOf lbServices.Guardian.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.createMany = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::createMany::Guardian::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.tunnels#destroyAll
             * @methodOf lbServices.Guardian.tunnels
             *
             * @description
             *
             * Deletes all tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyAll = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::delete::Guardian::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.tunnels#destroyById
             * @methodOf lbServices.Guardian.tunnels
             *
             * @description
             *
             * Delete a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::destroyById::Guardian::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.tunnels#findById
             * @methodOf lbServices.Guardian.tunnels
             *
             * @description
             *
             * Find a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.findById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::findById::Guardian::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.tunnels#updateById
             * @methodOf lbServices.Guardian.tunnels
             *
             * @description
             *
             * Update a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.updateById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::updateById::Guardian::tunnels"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Guardian.levelCrossings
     * @header lbServices.Guardian.levelCrossings
     * @object
     * @description
     *
     * The object `Guardian.levelCrossings` groups methods
     * manipulating `LevelCrossing` instances related to `Guardian`.
     *
     * Call {@link lbServices.Guardian#levelCrossings Guardian.levelCrossings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Guardian#levelCrossings
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Queries levelCrossings of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::get::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.levelCrossings#count
             * @methodOf lbServices.Guardian.levelCrossings
             *
             * @description
             *
             * Counts levelCrossings of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.levelCrossings.count = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::count::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.levelCrossings#create
             * @methodOf lbServices.Guardian.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.create = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::create::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.levelCrossings#createMany
             * @methodOf lbServices.Guardian.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.createMany = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::createMany::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.levelCrossings#destroyAll
             * @methodOf lbServices.Guardian.levelCrossings
             *
             * @description
             *
             * Deletes all levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyAll = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::delete::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.levelCrossings#destroyById
             * @methodOf lbServices.Guardian.levelCrossings
             *
             * @description
             *
             * Delete a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::destroyById::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.levelCrossings#findById
             * @methodOf lbServices.Guardian.levelCrossings
             *
             * @description
             *
             * Find a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.findById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::findById::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.levelCrossings#updateById
             * @methodOf lbServices.Guardian.levelCrossings
             *
             * @description
             *
             * Update a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.updateById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::updateById::Guardian::levelCrossings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Guardian.culverts
     * @header lbServices.Guardian.culverts
     * @object
     * @description
     *
     * The object `Guardian.culverts` groups methods
     * manipulating `Culvert` instances related to `Guardian`.
     *
     * Call {@link lbServices.Guardian#culverts Guardian.culverts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Guardian#culverts
             * @methodOf lbServices.Guardian
             *
             * @description
             *
             * Queries culverts of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::Guardian::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.culverts#count
             * @methodOf lbServices.Guardian.culverts
             *
             * @description
             *
             * Counts culverts of Guardian.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.culverts.count = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::count::Guardian::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.culverts#create
             * @methodOf lbServices.Guardian.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.create = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::create::Guardian::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.culverts#createMany
             * @methodOf lbServices.Guardian.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.createMany = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::createMany::Guardian::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.culverts#destroyAll
             * @methodOf lbServices.Guardian.culverts
             *
             * @description
             *
             * Deletes all culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyAll = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::delete::Guardian::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.culverts#destroyById
             * @methodOf lbServices.Guardian.culverts
             *
             * @description
             *
             * Delete a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::destroyById::Guardian::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.culverts#findById
             * @methodOf lbServices.Guardian.culverts
             *
             * @description
             *
             * Find a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.findById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::findById::Guardian::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Guardian.culverts#updateById
             * @methodOf lbServices.Guardian.culverts
             *
             * @description
             *
             * Update a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.updateById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::updateById::Guardian::culverts"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.TeamMembers
 * @header lbServices.TeamMembers
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `TeamMembers` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "TeamMembers",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/TeamMembers/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use TeamMembers.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/TeamMembers/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use TeamMembers.politicalOutlook() instead.
            "prototype$__get__politicalOutlook": {
              url: urlBase + "/TeamMembers/:id/politicalOutlook",
              method: "GET",
            },

            // INTERNAL. Use TeamMembers.degreeOfEducation() instead.
            "prototype$__get__degreeOfEducation": {
              url: urlBase + "/TeamMembers/:id/degreeOfEducation",
              method: "GET",
            },

            // INTERNAL. Use TeamMembers.subordinateRanks() instead.
            "prototype$__get__subordinateRanks": {
              url: urlBase + "/TeamMembers/:id/subordinateRanks",
              method: "GET",
            },

            // INTERNAL. Use TeamMembers.teamPosition() instead.
            "prototype$__get__teamPosition": {
              url: urlBase + "/TeamMembers/:id/teamPosition",
              method: "GET",
            },

            // INTERNAL. Use TeamMembers.responsibilitySection() instead.
            "prototype$__get__responsibilitySection": {
              url: urlBase + "/TeamMembers/:id/responsibilitySection",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#create
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/TeamMembers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#createMany
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/TeamMembers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#upsert
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/TeamMembers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#exists
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/TeamMembers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#findById
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/TeamMembers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#find
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/TeamMembers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#findOne
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/TeamMembers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#updateAll
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/TeamMembers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#deleteById
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/TeamMembers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#count
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/TeamMembers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#prototype$updateAttributes
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/TeamMembers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#createChangeStream
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/TeamMembers/change-stream",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.findById() instead.
            "::findById::AffiliatedInstitution::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.destroyById() instead.
            "::destroyById::AffiliatedInstitution::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.updateById() instead.
            "::updateById::AffiliatedInstitution::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss() instead.
            "::get::AffiliatedInstitution::teamMemberss": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.create() instead.
            "::create::AffiliatedInstitution::teamMemberss": {
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.createMany() instead.
            "::createMany::AffiliatedInstitution::teamMemberss": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.destroyAll() instead.
            "::delete::AffiliatedInstitution::teamMemberss": {
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.count() instead.
            "::count::AffiliatedInstitution::teamMemberss": {
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/count",
              method: "GET",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.findById() instead.
            "::findById::PoliticalOutlook::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.destroyById() instead.
            "::destroyById::PoliticalOutlook::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.updateById() instead.
            "::updateById::PoliticalOutlook::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss() instead.
            "::get::PoliticalOutlook::teamMemberss": {
              isArray: true,
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.create() instead.
            "::create::PoliticalOutlook::teamMemberss": {
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.createMany() instead.
            "::createMany::PoliticalOutlook::teamMemberss": {
              isArray: true,
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.destroyAll() instead.
            "::delete::PoliticalOutlook::teamMemberss": {
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.count() instead.
            "::count::PoliticalOutlook::teamMemberss": {
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/count",
              method: "GET",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.findById() instead.
            "::findById::DegreeOfEducation::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.destroyById() instead.
            "::destroyById::DegreeOfEducation::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.updateById() instead.
            "::updateById::DegreeOfEducation::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss() instead.
            "::get::DegreeOfEducation::teamMemberss": {
              isArray: true,
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.create() instead.
            "::create::DegreeOfEducation::teamMemberss": {
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.createMany() instead.
            "::createMany::DegreeOfEducation::teamMemberss": {
              isArray: true,
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.destroyAll() instead.
            "::delete::DegreeOfEducation::teamMemberss": {
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.count() instead.
            "::count::DegreeOfEducation::teamMemberss": {
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/count",
              method: "GET",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.findById() instead.
            "::findById::SubordinateRanks::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.destroyById() instead.
            "::destroyById::SubordinateRanks::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.updateById() instead.
            "::updateById::SubordinateRanks::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss() instead.
            "::get::SubordinateRanks::teamMemberss": {
              isArray: true,
              url: urlBase + "/SubordinateRanks/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.create() instead.
            "::create::SubordinateRanks::teamMemberss": {
              url: urlBase + "/SubordinateRanks/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.createMany() instead.
            "::createMany::SubordinateRanks::teamMemberss": {
              isArray: true,
              url: urlBase + "/SubordinateRanks/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.destroyAll() instead.
            "::delete::SubordinateRanks::teamMemberss": {
              url: urlBase + "/SubordinateRanks/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.count() instead.
            "::count::SubordinateRanks::teamMemberss": {
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/count",
              method: "GET",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.findById() instead.
            "::findById::TeamPosition::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TeamPositions/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.destroyById() instead.
            "::destroyById::TeamPosition::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TeamPositions/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.updateById() instead.
            "::updateById::TeamPosition::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TeamPositions/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use TeamPosition.teamMemberss() instead.
            "::get::TeamPosition::teamMemberss": {
              isArray: true,
              url: urlBase + "/TeamPositions/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.create() instead.
            "::create::TeamPosition::teamMemberss": {
              url: urlBase + "/TeamPositions/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.createMany() instead.
            "::createMany::TeamPosition::teamMemberss": {
              isArray: true,
              url: urlBase + "/TeamPositions/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.destroyAll() instead.
            "::delete::TeamPosition::teamMemberss": {
              url: urlBase + "/TeamPositions/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.count() instead.
            "::count::TeamPosition::teamMemberss": {
              url: urlBase + "/TeamPositions/:id/teamMemberss/count",
              method: "GET",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.findById() instead.
            "::findById::ResponsibilitySection::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.destroyById() instead.
            "::destroyById::ResponsibilitySection::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.updateById() instead.
            "::updateById::ResponsibilitySection::teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss() instead.
            "::get::ResponsibilitySection::teamMemberss": {
              isArray: true,
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.create() instead.
            "::create::ResponsibilitySection::teamMemberss": {
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.createMany() instead.
            "::createMany::ResponsibilitySection::teamMemberss": {
              isArray: true,
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.destroyAll() instead.
            "::delete::ResponsibilitySection::teamMemberss": {
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.count() instead.
            "::count::ResponsibilitySection::teamMemberss": {
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#updateOrCreate
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#update
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#destroyById
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#removeById
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.TeamMembers#modelName
        * @propertyOf lbServices.TeamMembers
        * @description
        * The name of the model represented by this $resource,
        * i.e. `TeamMembers`.
        */
        R.modelName = "TeamMembers";


            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#affiliatedInstitution
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::TeamMembers::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#politicalOutlook
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Fetches belongsTo relation politicalOutlook.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
        R.politicalOutlook = function() {
          var TargetResource = $injector.get("PoliticalOutlook");
          var action = TargetResource["::get::TeamMembers::politicalOutlook"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#degreeOfEducation
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Fetches belongsTo relation degreeOfEducation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
        R.degreeOfEducation = function() {
          var TargetResource = $injector.get("DegreeOfEducation");
          var action = TargetResource["::get::TeamMembers::degreeOfEducation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#subordinateRanks
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Fetches belongsTo relation subordinateRanks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
        R.subordinateRanks = function() {
          var TargetResource = $injector.get("SubordinateRanks");
          var action = TargetResource["::get::TeamMembers::subordinateRanks"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#teamPosition
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Fetches belongsTo relation teamPosition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
        R.teamPosition = function() {
          var TargetResource = $injector.get("TeamPosition");
          var action = TargetResource["::get::TeamMembers::teamPosition"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamMembers#responsibilitySection
             * @methodOf lbServices.TeamMembers
             *
             * @description
             *
             * Fetches belongsTo relation responsibilitySection.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
        R.responsibilitySection = function() {
          var TargetResource = $injector.get("ResponsibilitySection");
          var action = TargetResource["::get::TeamMembers::responsibilitySection"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.TheRoadStation
 * @header lbServices.TheRoadStation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `TheRoadStation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "TheRoadStation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/TheRoadStations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use TheRoadStation.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use TheRoadStation.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use TheRoadStation.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use TheRoadStation.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use TheRoadStation.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TheRoadStations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use TheRoadStation.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/TheRoadStations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.serviceMode() instead.
            "prototype$__get__serviceMode": {
              url: urlBase + "/TheRoadStations/:id/serviceMode",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/TheRoadStations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/TheRoadStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use TheRoadStation.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/TheRoadStations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use TheRoadStation.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/TheRoadStations/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#create
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/TheRoadStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#createMany
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/TheRoadStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#upsert
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/TheRoadStations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#exists
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/TheRoadStations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#findById
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/TheRoadStations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#find
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/TheRoadStations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#findOne
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/TheRoadStations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#updateAll
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/TheRoadStations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#deleteById
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/TheRoadStations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#count
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/TheRoadStations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#prototype$updateAttributes
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/TheRoadStations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#createChangeStream
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/TheRoadStations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Rode.theRoadStations.findById() instead.
            "::findById::Rode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.theRoadStations.destroyById() instead.
            "::destroyById::Rode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.theRoadStations.updateById() instead.
            "::updateById::Rode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.theRoadStations.link() instead.
            "::link::Rode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.theRoadStations.unlink() instead.
            "::unlink::Rode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.theRoadStations.exists() instead.
            "::exists::Rode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/theRoadStations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.theRoadStations() instead.
            "::get::Rode::theRoadStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/theRoadStations",
              method: "GET",
            },

            // INTERNAL. Use Rode.theRoadStations.create() instead.
            "::create::Rode::theRoadStations": {
              url: urlBase + "/rodes/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.theRoadStations.createMany() instead.
            "::createMany::Rode::theRoadStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.theRoadStations.destroyAll() instead.
            "::delete::Rode::theRoadStations": {
              url: urlBase + "/rodes/:id/theRoadStations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.theRoadStations.count() instead.
            "::count::Rode::theRoadStations": {
              url: urlBase + "/rodes/:id/theRoadStations/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.theRoadStation() instead.
            "::get::RodeContain::theRoadStation": {
              url: urlBase + "/RodeContains/:id/theRoadStation",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.findById() instead.
            "::findById::AffiliatedInstitution::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.destroyById() instead.
            "::destroyById::AffiliatedInstitution::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.updateById() instead.
            "::updateById::AffiliatedInstitution::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations() instead.
            "::get::AffiliatedInstitution::theRoadStations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.create() instead.
            "::create::AffiliatedInstitution::theRoadStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.createMany() instead.
            "::createMany::AffiliatedInstitution::theRoadStations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.destroyAll() instead.
            "::delete::AffiliatedInstitution::theRoadStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.count() instead.
            "::count::AffiliatedInstitution::theRoadStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/count",
              method: "GET",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.findById() instead.
            "::findById::ServiceMode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServiceModes/:id/theRoadStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.destroyById() instead.
            "::destroyById::ServiceMode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServiceModes/:id/theRoadStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.updateById() instead.
            "::updateById::ServiceMode::theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServiceModes/:id/theRoadStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServiceMode.theRoadStations() instead.
            "::get::ServiceMode::theRoadStations": {
              isArray: true,
              url: urlBase + "/ServiceModes/:id/theRoadStations",
              method: "GET",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.create() instead.
            "::create::ServiceMode::theRoadStations": {
              url: urlBase + "/ServiceModes/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.createMany() instead.
            "::createMany::ServiceMode::theRoadStations": {
              isArray: true,
              url: urlBase + "/ServiceModes/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.destroyAll() instead.
            "::delete::ServiceMode::theRoadStations": {
              url: urlBase + "/ServiceModes/:id/theRoadStations",
              method: "DELETE",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.count() instead.
            "::count::ServiceMode::theRoadStations": {
              url: urlBase + "/ServiceModes/:id/theRoadStations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#updateOrCreate
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#update
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#destroyById
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#removeById
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.TheRoadStation#modelName
        * @propertyOf lbServices.TheRoadStation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `TheRoadStation`.
        */
        R.modelName = "TheRoadStation";

    /**
     * @ngdoc object
     * @name lbServices.TheRoadStation.rodes
     * @header lbServices.TheRoadStation.rodes
     * @object
     * @description
     *
     * The object `TheRoadStation.rodes` groups methods
     * manipulating `Rode` instances related to `TheRoadStation`.
     *
     * Call {@link lbServices.TheRoadStation#rodes TheRoadStation.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#rodes
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Queries rodes of TheRoadStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#count
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Counts rodes of TheRoadStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#create
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#createMany
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#destroyAll
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#destroyById
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#exists
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#findById
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#link
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#unlink
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation.rodes#updateById
             * @methodOf lbServices.TheRoadStation.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::TheRoadStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#affiliatedInstitution
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::TheRoadStation::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TheRoadStation#serviceMode
             * @methodOf lbServices.TheRoadStation
             *
             * @description
             *
             * Fetches belongsTo relation serviceMode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
        R.serviceMode = function() {
          var TargetResource = $injector.get("ServiceMode");
          var action = TargetResource["::get::TheRoadStation::serviceMode"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KeyPlaceCategory
 * @header lbServices.KeyPlaceCategory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KeyPlaceCategory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KeyPlaceCategory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KeyPlaceCategories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.findById() instead.
            "prototype$__findById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.destroyById() instead.
            "prototype$__destroyById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.updateById() instead.
            "prototype$__updateById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces() instead.
            "prototype$__get__keyPlaces": {
              isArray: true,
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.create() instead.
            "prototype$__create__keyPlaces": {
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.destroyAll() instead.
            "prototype$__delete__keyPlaces": {
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlaceCategory.keyPlaces.count() instead.
            "prototype$__count__keyPlaces": {
              url: urlBase + "/KeyPlaceCategories/:id/keyPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#create
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KeyPlaceCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#createMany
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KeyPlaceCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#upsert
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KeyPlaceCategories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#exists
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KeyPlaceCategories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#findById
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KeyPlaceCategories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#find
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KeyPlaceCategories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#findOne
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KeyPlaceCategories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#updateAll
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KeyPlaceCategories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#deleteById
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KeyPlaceCategories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#count
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KeyPlaceCategories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#prototype$updateAttributes
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KeyPlaceCategories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#createChangeStream
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KeyPlaceCategories/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceCategory() instead.
            "::get::KeyPlace::keyPlaceCategory": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceCategory",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#updateOrCreate
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#update
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#destroyById
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#removeById
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceCategory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KeyPlaceCategory#modelName
        * @propertyOf lbServices.KeyPlaceCategory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KeyPlaceCategory`.
        */
        R.modelName = "KeyPlaceCategory";

    /**
     * @ngdoc object
     * @name lbServices.KeyPlaceCategory.keyPlaces
     * @header lbServices.KeyPlaceCategory.keyPlaces
     * @object
     * @description
     *
     * The object `KeyPlaceCategory.keyPlaces` groups methods
     * manipulating `KeyPlace` instances related to `KeyPlaceCategory`.
     *
     * Call {@link lbServices.KeyPlaceCategory#keyPlaces KeyPlaceCategory.keyPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory#keyPlaces
             * @methodOf lbServices.KeyPlaceCategory
             *
             * @description
             *
             * Queries keyPlaces of KeyPlaceCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory.keyPlaces#count
             * @methodOf lbServices.KeyPlaceCategory.keyPlaces
             *
             * @description
             *
             * Counts keyPlaces of KeyPlaceCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPlaces.count = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::count::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory.keyPlaces#create
             * @methodOf lbServices.KeyPlaceCategory.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.create = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::create::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory.keyPlaces#createMany
             * @methodOf lbServices.KeyPlaceCategory.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.createMany = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::createMany::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory.keyPlaces#destroyAll
             * @methodOf lbServices.KeyPlaceCategory.keyPlaces
             *
             * @description
             *
             * Deletes all keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyAll = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::delete::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory.keyPlaces#destroyById
             * @methodOf lbServices.KeyPlaceCategory.keyPlaces
             *
             * @description
             *
             * Delete a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::destroyById::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory.keyPlaces#findById
             * @methodOf lbServices.KeyPlaceCategory.keyPlaces
             *
             * @description
             *
             * Find a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.findById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::findById::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceCategory.keyPlaces#updateById
             * @methodOf lbServices.KeyPlaceCategory.keyPlaces
             *
             * @description
             *
             * Update a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.updateById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::updateById::KeyPlaceCategory::keyPlaces"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Administration
 * @header lbServices.Administration
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Administration` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Administration",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Administrations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Administration.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Administration.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Administration.stations.findById() instead.
            "prototype$__findById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Administration.stations.destroyById() instead.
            "prototype$__destroyById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.stations.updateById() instead.
            "prototype$__updateById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Administrations/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Administration.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/Administrations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Administration.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/Administrations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Administration.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/Administrations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/Administrations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Administration.stations() instead.
            "prototype$__get__stations": {
              isArray: true,
              url: urlBase + "/Administrations/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use Administration.stations.create() instead.
            "prototype$__create__stations": {
              url: urlBase + "/Administrations/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Administration.stations.destroyAll() instead.
            "prototype$__delete__stations": {
              url: urlBase + "/Administrations/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use Administration.stations.count() instead.
            "prototype$__count__stations": {
              url: urlBase + "/Administrations/:id/stations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#create
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Administrations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#createMany
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Administrations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#upsert
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Administrations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#exists
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Administrations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#findById
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Administrations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#find
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Administrations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#findOne
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Administrations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#updateAll
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Administrations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#deleteById
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Administrations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#count
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Administrations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#prototype$updateAttributes
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Administrations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Administration#createChangeStream
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Administrations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Rode.administrations() instead.
            "::get::Rode::administrations": {
              url: urlBase + "/rodes/:id/administrations",
              method: "GET",
            },

            // INTERNAL. Use Station.administration() instead.
            "::get::Station::administration": {
              url: urlBase + "/Stations/:id/administration",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Administration#updateOrCreate
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Administration#update
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Administration#destroyById
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Administration#removeById
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Administration` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Administration#modelName
        * @propertyOf lbServices.Administration
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Administration`.
        */
        R.modelName = "Administration";

    /**
     * @ngdoc object
     * @name lbServices.Administration.rodes
     * @header lbServices.Administration.rodes
     * @object
     * @description
     *
     * The object `Administration.rodes` groups methods
     * manipulating `Rode` instances related to `Administration`.
     *
     * Call {@link lbServices.Administration#rodes Administration.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Administration#rodes
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Queries rodes of Administration.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Administration::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.rodes#count
             * @methodOf lbServices.Administration.rodes
             *
             * @description
             *
             * Counts rodes of Administration.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Administration::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.rodes#create
             * @methodOf lbServices.Administration.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Administration::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.rodes#createMany
             * @methodOf lbServices.Administration.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Administration::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.rodes#destroyAll
             * @methodOf lbServices.Administration.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Administration::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.rodes#destroyById
             * @methodOf lbServices.Administration.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Administration::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.rodes#findById
             * @methodOf lbServices.Administration.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Administration::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.rodes#updateById
             * @methodOf lbServices.Administration.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Administration::rodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Administration.stations
     * @header lbServices.Administration.stations
     * @object
     * @description
     *
     * The object `Administration.stations` groups methods
     * manipulating `Station` instances related to `Administration`.
     *
     * Call {@link lbServices.Administration#stations Administration.stations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Administration#stations
             * @methodOf lbServices.Administration
             *
             * @description
             *
             * Queries stations of Administration.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::Administration::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.stations#count
             * @methodOf lbServices.Administration.stations
             *
             * @description
             *
             * Counts stations of Administration.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.stations.count = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::count::Administration::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.stations#create
             * @methodOf lbServices.Administration.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.create = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::create::Administration::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.stations#createMany
             * @methodOf lbServices.Administration.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.createMany = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::createMany::Administration::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.stations#destroyAll
             * @methodOf lbServices.Administration.stations
             *
             * @description
             *
             * Deletes all stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyAll = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::delete::Administration::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.stations#destroyById
             * @methodOf lbServices.Administration.stations
             *
             * @description
             *
             * Delete a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::destroyById::Administration::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.stations#findById
             * @methodOf lbServices.Administration.stations
             *
             * @description
             *
             * Find a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.findById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::findById::Administration::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Administration.stations#updateById
             * @methodOf lbServices.Administration.stations
             *
             * @description
             *
             * Update a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.updateById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::updateById::Administration::stations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.StationNature
 * @header lbServices.StationNature
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `StationNature` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "StationNature",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/StationNatures/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use StationNature.stations.findById() instead.
            "prototype$__findById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationNatures/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use StationNature.stations.destroyById() instead.
            "prototype$__destroyById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationNatures/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use StationNature.stations.updateById() instead.
            "prototype$__updateById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/StationNatures/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use StationNature.stations() instead.
            "prototype$__get__stations": {
              isArray: true,
              url: urlBase + "/StationNatures/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use StationNature.stations.create() instead.
            "prototype$__create__stations": {
              url: urlBase + "/StationNatures/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use StationNature.stations.destroyAll() instead.
            "prototype$__delete__stations": {
              url: urlBase + "/StationNatures/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use StationNature.stations.count() instead.
            "prototype$__count__stations": {
              url: urlBase + "/StationNatures/:id/stations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#create
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/StationNatures",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#createMany
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/StationNatures",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#upsert
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/StationNatures",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#exists
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/StationNatures/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#findById
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/StationNatures/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#find
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/StationNatures",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#findOne
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/StationNatures/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#updateAll
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/StationNatures/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#deleteById
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/StationNatures/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#count
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/StationNatures/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#prototype$updateAttributes
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/StationNatures/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.StationNature#createChangeStream
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/StationNatures/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Station.stationNature() instead.
            "::get::Station::stationNature": {
              url: urlBase + "/Stations/:id/stationNature",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.StationNature#updateOrCreate
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.StationNature#update
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.StationNature#destroyById
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.StationNature#removeById
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `StationNature` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.StationNature#modelName
        * @propertyOf lbServices.StationNature
        * @description
        * The name of the model represented by this $resource,
        * i.e. `StationNature`.
        */
        R.modelName = "StationNature";

    /**
     * @ngdoc object
     * @name lbServices.StationNature.stations
     * @header lbServices.StationNature.stations
     * @object
     * @description
     *
     * The object `StationNature.stations` groups methods
     * manipulating `Station` instances related to `StationNature`.
     *
     * Call {@link lbServices.StationNature#stations StationNature.stations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.StationNature#stations
             * @methodOf lbServices.StationNature
             *
             * @description
             *
             * Queries stations of StationNature.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::StationNature::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationNature.stations#count
             * @methodOf lbServices.StationNature.stations
             *
             * @description
             *
             * Counts stations of StationNature.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.stations.count = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::count::StationNature::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationNature.stations#create
             * @methodOf lbServices.StationNature.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.create = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::create::StationNature::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationNature.stations#createMany
             * @methodOf lbServices.StationNature.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.createMany = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::createMany::StationNature::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationNature.stations#destroyAll
             * @methodOf lbServices.StationNature.stations
             *
             * @description
             *
             * Deletes all stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyAll = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::delete::StationNature::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationNature.stations#destroyById
             * @methodOf lbServices.StationNature.stations
             *
             * @description
             *
             * Delete a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::destroyById::StationNature::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationNature.stations#findById
             * @methodOf lbServices.StationNature.stations
             *
             * @description
             *
             * Find a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.findById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::findById::StationNature::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.StationNature.stations#updateById
             * @methodOf lbServices.StationNature.stations
             *
             * @description
             *
             * Update a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.updateById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::updateById::StationNature::stations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BridgeClass
 * @header lbServices.BridgeClass
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BridgeClass` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BridgeClass",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/BridgeClasses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BridgeClass.bridges.findById() instead.
            "prototype$__findById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BridgeClasses/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use BridgeClass.bridges.destroyById() instead.
            "prototype$__destroyById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BridgeClasses/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BridgeClass.bridges.updateById() instead.
            "prototype$__updateById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BridgeClasses/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BridgeClass.bridges() instead.
            "prototype$__get__bridges": {
              isArray: true,
              url: urlBase + "/BridgeClasses/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use BridgeClass.bridges.create() instead.
            "prototype$__create__bridges": {
              url: urlBase + "/BridgeClasses/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use BridgeClass.bridges.destroyAll() instead.
            "prototype$__delete__bridges": {
              url: urlBase + "/BridgeClasses/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use BridgeClass.bridges.count() instead.
            "prototype$__count__bridges": {
              url: urlBase + "/BridgeClasses/:id/bridges/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#create
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BridgeClasses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#createMany
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BridgeClasses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#upsert
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BridgeClasses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#exists
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BridgeClasses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#findById
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BridgeClasses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#find
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BridgeClasses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#findOne
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BridgeClasses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#updateAll
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/BridgeClasses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#deleteById
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BridgeClasses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#count
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BridgeClasses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#prototype$updateAttributes
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BridgeClasses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#createChangeStream
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BridgeClasses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Bridge.bridgeClass() instead.
            "::get::Bridge::bridgeClass": {
              url: urlBase + "/Bridges/:id/bridgeClass",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#updateOrCreate
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#update
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#destroyById
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#removeById
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BridgeClass` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BridgeClass#modelName
        * @propertyOf lbServices.BridgeClass
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BridgeClass`.
        */
        R.modelName = "BridgeClass";

    /**
     * @ngdoc object
     * @name lbServices.BridgeClass.bridges
     * @header lbServices.BridgeClass.bridges
     * @object
     * @description
     *
     * The object `BridgeClass.bridges` groups methods
     * manipulating `Bridge` instances related to `BridgeClass`.
     *
     * Call {@link lbServices.BridgeClass#bridges BridgeClass.bridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.BridgeClass#bridges
             * @methodOf lbServices.BridgeClass
             *
             * @description
             *
             * Queries bridges of BridgeClass.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass.bridges#count
             * @methodOf lbServices.BridgeClass.bridges
             *
             * @description
             *
             * Counts bridges of BridgeClass.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bridges.count = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::count::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass.bridges#create
             * @methodOf lbServices.BridgeClass.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.create = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::create::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass.bridges#createMany
             * @methodOf lbServices.BridgeClass.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.createMany = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::createMany::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass.bridges#destroyAll
             * @methodOf lbServices.BridgeClass.bridges
             *
             * @description
             *
             * Deletes all bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyAll = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::delete::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass.bridges#destroyById
             * @methodOf lbServices.BridgeClass.bridges
             *
             * @description
             *
             * Delete a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::destroyById::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass.bridges#findById
             * @methodOf lbServices.BridgeClass.bridges
             *
             * @description
             *
             * Find a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.findById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::findById::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BridgeClass.bridges#updateById
             * @methodOf lbServices.BridgeClass.bridges
             *
             * @description
             *
             * Update a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.updateById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::updateById::BridgeClass::bridges"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AffiliatedInstitution
 * @header lbServices.AffiliatedInstitution
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AffiliatedInstitution` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AffiliatedInstitution",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AffiliatedInstitutions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AffiliatedInstitution.bridges.findById() instead.
            "prototype$__findById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.destroyById() instead.
            "prototype$__destroyById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.updateById() instead.
            "prototype$__updateById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.findById() instead.
            "prototype$__findById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.destroyById() instead.
            "prototype$__destroyById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.updateById() instead.
            "prototype$__updateById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.findById() instead.
            "prototype$__findById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.destroyById() instead.
            "prototype$__destroyById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.updateById() instead.
            "prototype$__updateById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.findById() instead.
            "prototype$__findById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.destroyById() instead.
            "prototype$__destroyById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.updateById() instead.
            "prototype$__updateById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.findById() instead.
            "prototype$__findById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.destroyById() instead.
            "prototype$__destroyById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.updateById() instead.
            "prototype$__updateById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.findById() instead.
            "prototype$__findById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.destroyById() instead.
            "prototype$__destroyById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.updateById() instead.
            "prototype$__updateById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.findById() instead.
            "prototype$__findById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.destroyById() instead.
            "prototype$__destroyById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.updateById() instead.
            "prototype$__updateById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.findById() instead.
            "prototype$__findById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.destroyById() instead.
            "prototype$__destroyById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.updateById() instead.
            "prototype$__updateById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.findById() instead.
            "prototype$__findById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.destroyById() instead.
            "prototype$__destroyById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.updateById() instead.
            "prototype$__updateById__securityEquipmentInformations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.findById() instead.
            "prototype$__findById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.destroyById() instead.
            "prototype$__destroyById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.updateById() instead.
            "prototype$__updateById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.findById() instead.
            "prototype$__findById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.destroyById() instead.
            "prototype$__destroyById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.updateById() instead.
            "prototype$__updateById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.findById() instead.
            "prototype$__findById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.destroyById() instead.
            "prototype$__destroyById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.updateById() instead.
            "prototype$__updateById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.findById() instead.
            "prototype$__findById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.destroyById() instead.
            "prototype$__destroyById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.updateById() instead.
            "prototype$__updateById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.findById() instead.
            "prototype$__findById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.destroyById() instead.
            "prototype$__destroyById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.updateById() instead.
            "prototype$__updateById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.findById() instead.
            "prototype$__findById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.destroyById() instead.
            "prototype$__destroyById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.updateById() instead.
            "prototype$__updateById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.findById() instead.
            "prototype$__findById__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.destroyById() instead.
            "prototype$__destroyById__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.updateById() instead.
            "prototype$__updateById__monitorings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.findById() instead.
            "prototype$__findById__institutionalTeams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.destroyById() instead.
            "prototype$__destroyById__institutionalTeams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.updateById() instead.
            "prototype$__updateById__institutionalTeams": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.findById() instead.
            "prototype$__findById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.destroyById() instead.
            "prototype$__destroyById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.updateById() instead.
            "prototype$__updateById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges() instead.
            "prototype$__get__bridges": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.create() instead.
            "prototype$__create__bridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.destroyAll() instead.
            "prototype$__delete__bridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.bridges.count() instead.
            "prototype$__count__bridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels() instead.
            "prototype$__get__tunnels": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.create() instead.
            "prototype$__create__tunnels": {
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.destroyAll() instead.
            "prototype$__delete__tunnels": {
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.tunnels.count() instead.
            "prototype$__count__tunnels": {
              url: urlBase + "/AffiliatedInstitutions/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts() instead.
            "prototype$__get__culverts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.create() instead.
            "prototype$__create__culverts": {
              url: urlBase + "/AffiliatedInstitutions/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.destroyAll() instead.
            "prototype$__delete__culverts": {
              url: urlBase + "/AffiliatedInstitutions/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.culverts.count() instead.
            "prototype$__count__culverts": {
              url: urlBase + "/AffiliatedInstitutions/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges() instead.
            "prototype$__get__crossIronBridges": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.create() instead.
            "prototype$__create__crossIronBridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.destroyAll() instead.
            "prototype$__delete__crossIronBridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.crossIronBridges.count() instead.
            "prototype$__count__crossIronBridges": {
              url: urlBase + "/AffiliatedInstitutions/:id/crossIronBridges/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts() instead.
            "prototype$__get__servicePorts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.create() instead.
            "prototype$__create__servicePorts": {
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.destroyAll() instead.
            "prototype$__delete__servicePorts": {
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.servicePorts.count() instead.
            "prototype$__count__servicePorts": {
              url: urlBase + "/AffiliatedInstitutions/:id/servicePorts/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations() instead.
            "prototype$__get__baseStations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.create() instead.
            "prototype$__create__baseStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.destroyAll() instead.
            "prototype$__delete__baseStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.baseStations.count() instead.
            "prototype$__count__baseStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/baseStations/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors() instead.
            "prototype$__get__equipmentInfors": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.create() instead.
            "prototype$__create__equipmentInfors": {
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.destroyAll() instead.
            "prototype$__delete__equipmentInfors": {
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.equipmentInfors.count() instead.
            "prototype$__count__equipmentInfors": {
              url: urlBase + "/AffiliatedInstitutions/:id/equipmentInfors/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss() instead.
            "prototype$__get__emergencyAccessss": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.create() instead.
            "prototype$__create__emergencyAccessss": {
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.destroyAll() instead.
            "prototype$__delete__emergencyAccessss": {
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.emergencyAccessss.count() instead.
            "prototype$__count__emergencyAccessss": {
              url: urlBase + "/AffiliatedInstitutions/:id/emergencyAccessss/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations() instead.
            "prototype$__get__securityEquipmentInformations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.create() instead.
            "prototype$__create__securityEquipmentInformations": {
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.destroyAll() instead.
            "prototype$__delete__securityEquipmentInformations": {
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.securityEquipmentInformations.count() instead.
            "prototype$__count__securityEquipmentInformations": {
              url: urlBase + "/AffiliatedInstitutions/:id/securityEquipmentInformations/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos() instead.
            "prototype$__get__fenceInfos": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.create() instead.
            "prototype$__create__fenceInfos": {
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.destroyAll() instead.
            "prototype$__delete__fenceInfos": {
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.fenceInfos.count() instead.
            "prototype$__count__fenceInfos": {
              url: urlBase + "/AffiliatedInstitutions/:id/fenceInfos/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces() instead.
            "prototype$__get__keyPlaces": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.create() instead.
            "prototype$__create__keyPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.destroyAll() instead.
            "prototype$__delete__keyPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.keyPlaces.count() instead.
            "prototype$__count__keyPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces() instead.
            "prototype$__get__hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.create() instead.
            "prototype$__create__hiddenDangerPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.destroyAll() instead.
            "prototype$__delete__hiddenDangerPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.hiddenDangerPlaces.count() instead.
            "prototype$__count__hiddenDangerPlaces": {
              url: urlBase + "/AffiliatedInstitutions/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations() instead.
            "prototype$__get__theRoadStations": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.create() instead.
            "prototype$__create__theRoadStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.destroyAll() instead.
            "prototype$__delete__theRoadStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.theRoadStations.count() instead.
            "prototype$__count__theRoadStations": {
              url: urlBase + "/AffiliatedInstitutions/:id/theRoadStations/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts() instead.
            "prototype$__get__broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.create() instead.
            "prototype$__create__broadcastWarningPosts": {
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.destroyAll() instead.
            "prototype$__delete__broadcastWarningPosts": {
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.broadcastWarningPosts.count() instead.
            "prototype$__count__broadcastWarningPosts": {
              url: urlBase + "/AffiliatedInstitutions/:id/broadcastWarningPosts/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints() instead.
            "prototype$__get__aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.create() instead.
            "prototype$__create__aPropagandaPoints": {
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.destroyAll() instead.
            "prototype$__delete__aPropagandaPoints": {
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.aPropagandaPoints.count() instead.
            "prototype$__count__aPropagandaPoints": {
              url: urlBase + "/AffiliatedInstitutions/:id/aPropagandaPoints/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings() instead.
            "prototype$__get__monitorings": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.create() instead.
            "prototype$__create__monitorings": {
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.destroyAll() instead.
            "prototype$__delete__monitorings": {
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.monitorings.count() instead.
            "prototype$__count__monitorings": {
              url: urlBase + "/AffiliatedInstitutions/:id/monitorings/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams() instead.
            "prototype$__get__institutionalTeams": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.create() instead.
            "prototype$__create__institutionalTeams": {
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.destroyAll() instead.
            "prototype$__delete__institutionalTeams": {
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.institutionalTeams.count() instead.
            "prototype$__count__institutionalTeams": {
              url: urlBase + "/AffiliatedInstitutions/:id/institutionalTeams/count",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss() instead.
            "prototype$__get__teamMemberss": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.create() instead.
            "prototype$__create__teamMemberss": {
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.destroyAll() instead.
            "prototype$__delete__teamMemberss": {
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use AffiliatedInstitution.teamMemberss.count() instead.
            "prototype$__count__teamMemberss": {
              url: urlBase + "/AffiliatedInstitutions/:id/teamMemberss/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#create
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AffiliatedInstitutions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#createMany
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#upsert
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AffiliatedInstitutions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#exists
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AffiliatedInstitutions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#findById
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AffiliatedInstitutions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#find
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AffiliatedInstitutions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#findOne
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AffiliatedInstitutions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#updateAll
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AffiliatedInstitutions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#deleteById
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AffiliatedInstitutions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#count
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AffiliatedInstitutions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#prototype$updateAttributes
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AffiliatedInstitutions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#createChangeStream
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AffiliatedInstitutions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Bridge.affiliatedinstitution() instead.
            "::get::Bridge::affiliatedinstitution": {
              url: urlBase + "/Bridges/:id/affiliatedinstitution",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.affiliatedInstitution() instead.
            "::get::Tunnel::affiliatedInstitution": {
              url: urlBase + "/tunnels/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.affiliatedInstitution() instead.
            "::get::LevelCrossing::affiliatedInstitution": {
              url: urlBase + "/LevelCrossings/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use Culvert.affiliatedInstitution() instead.
            "::get::Culvert::affiliatedInstitution": {
              url: urlBase + "/Culverts/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use CrossIronBridge.affiliatedInstitution() instead.
            "::get::CrossIronBridge::affiliatedInstitution": {
              url: urlBase + "/CrossIronBridges/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.affiliatedInstitution() instead.
            "::get::ServicePort::affiliatedInstitution": {
              url: urlBase + "/ServicePorts/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.affiliatedInstitution() instead.
            "::get::BaseStation::affiliatedInstitution": {
              url: urlBase + "/BaseStations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.affiliatedInstitutions() instead.
            "::get::KeyPlace::affiliatedInstitutions": {
              url: urlBase + "/KeyPlaces/:id/affiliatedInstitutions",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.affiliatedInstitution() instead.
            "::get::HiddenDangerPlace::affiliatedInstitution": {
              url: urlBase + "/HiddenDangerPlaces/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.affiliatedInstitution() instead.
            "::get::BroadcastWarningPost::affiliatedInstitution": {
              url: urlBase + "/BroadcastWarningPosts/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.affiliatedinstitution() instead.
            "::get::APropagandaPoint::affiliatedinstitution": {
              url: urlBase + "/APropagandaPoints/:id/affiliatedinstitution",
              method: "GET",
            },

            // INTERNAL. Use InstitutionalTeam.affiliatedInstitution() instead.
            "::get::InstitutionalTeam::affiliatedInstitution": {
              url: urlBase + "/InstitutionalTeams/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use Station.affiliatedInstitution() instead.
            "::get::Station::affiliatedInstitution": {
              url: urlBase + "/Stations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.affiliatedInstitution() instead.
            "::get::EquipmentInfor::affiliatedInstitution": {
              url: urlBase + "/EquipmentInfors/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use Monitoring.affiliatedInstitution() instead.
            "::get::Monitoring::affiliatedInstitution": {
              url: urlBase + "/Monitorings/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.affiliatedInstitution() instead.
            "::get::EmergencyAccesss::affiliatedInstitution": {
              url: urlBase + "/EmergencyAccessses/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.affiliatedInstitutions() instead.
            "::get::FenceInfo::affiliatedInstitutions": {
              url: urlBase + "/FenceInfos/:id/affiliatedInstitutions",
              method: "GET",
            },

            // INTERNAL. Use SecurityEquipmentInformation.affiliatedInstitution() instead.
            "::get::SecurityEquipmentInformation::affiliatedInstitution": {
              url: urlBase + "/SecurityEquipmentInformations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use TeamMembers.affiliatedInstitution() instead.
            "::get::TeamMembers::affiliatedInstitution": {
              url: urlBase + "/TeamMembers/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use TheRoadStation.affiliatedInstitution() instead.
            "::get::TheRoadStation::affiliatedInstitution": {
              url: urlBase + "/TheRoadStations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use RouteMapInformation.affiliatedInstitution() instead.
            "::get::RouteMapInformation::affiliatedInstitution": {
              url: urlBase + "/RouteMapInformations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use AdministrativeAreaMapInformation.affiliatedInstitution() instead.
            "::get::AdministrativeAreaMapInformation::affiliatedInstitution": {
              url: urlBase + "/AdministrativeAreaMapInformations/:id/affiliatedInstitution",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#updateOrCreate
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#update
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#destroyById
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#removeById
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AffiliatedInstitution#modelName
        * @propertyOf lbServices.AffiliatedInstitution
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AffiliatedInstitution`.
        */
        R.modelName = "AffiliatedInstitution";

    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.bridges
     * @header lbServices.AffiliatedInstitution.bridges
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.bridges` groups methods
     * manipulating `Bridge` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#bridges AffiliatedInstitution.bridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#bridges
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries bridges of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.bridges#count
             * @methodOf lbServices.AffiliatedInstitution.bridges
             *
             * @description
             *
             * Counts bridges of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bridges.count = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::count::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.bridges#create
             * @methodOf lbServices.AffiliatedInstitution.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.create = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::create::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.bridges#createMany
             * @methodOf lbServices.AffiliatedInstitution.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.createMany = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::createMany::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.bridges#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.bridges
             *
             * @description
             *
             * Deletes all bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyAll = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::delete::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.bridges#destroyById
             * @methodOf lbServices.AffiliatedInstitution.bridges
             *
             * @description
             *
             * Delete a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::destroyById::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.bridges#findById
             * @methodOf lbServices.AffiliatedInstitution.bridges
             *
             * @description
             *
             * Find a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.findById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::findById::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.bridges#updateById
             * @methodOf lbServices.AffiliatedInstitution.bridges
             *
             * @description
             *
             * Update a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.updateById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::updateById::AffiliatedInstitution::bridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.tunnels
     * @header lbServices.AffiliatedInstitution.tunnels
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.tunnels` groups methods
     * manipulating `Tunnel` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#tunnels AffiliatedInstitution.tunnels()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#tunnels
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries tunnels of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::get::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.tunnels#count
             * @methodOf lbServices.AffiliatedInstitution.tunnels
             *
             * @description
             *
             * Counts tunnels of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tunnels.count = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::count::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.tunnels#create
             * @methodOf lbServices.AffiliatedInstitution.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.create = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::create::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.tunnels#createMany
             * @methodOf lbServices.AffiliatedInstitution.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.createMany = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::createMany::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.tunnels#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.tunnels
             *
             * @description
             *
             * Deletes all tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyAll = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::delete::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.tunnels#destroyById
             * @methodOf lbServices.AffiliatedInstitution.tunnels
             *
             * @description
             *
             * Delete a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::destroyById::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.tunnels#findById
             * @methodOf lbServices.AffiliatedInstitution.tunnels
             *
             * @description
             *
             * Find a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.findById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::findById::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.tunnels#updateById
             * @methodOf lbServices.AffiliatedInstitution.tunnels
             *
             * @description
             *
             * Update a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.updateById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::updateById::AffiliatedInstitution::tunnels"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.culverts
     * @header lbServices.AffiliatedInstitution.culverts
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.culverts` groups methods
     * manipulating `Culvert` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#culverts AffiliatedInstitution.culverts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#culverts
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries culverts of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.culverts#count
             * @methodOf lbServices.AffiliatedInstitution.culverts
             *
             * @description
             *
             * Counts culverts of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.culverts.count = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::count::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.culverts#create
             * @methodOf lbServices.AffiliatedInstitution.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.create = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::create::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.culverts#createMany
             * @methodOf lbServices.AffiliatedInstitution.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.createMany = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::createMany::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.culverts#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.culverts
             *
             * @description
             *
             * Deletes all culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyAll = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::delete::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.culverts#destroyById
             * @methodOf lbServices.AffiliatedInstitution.culverts
             *
             * @description
             *
             * Delete a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::destroyById::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.culverts#findById
             * @methodOf lbServices.AffiliatedInstitution.culverts
             *
             * @description
             *
             * Find a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.findById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::findById::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.culverts#updateById
             * @methodOf lbServices.AffiliatedInstitution.culverts
             *
             * @description
             *
             * Update a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.updateById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::updateById::AffiliatedInstitution::culverts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.crossIronBridges
     * @header lbServices.AffiliatedInstitution.crossIronBridges
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.crossIronBridges` groups methods
     * manipulating `CrossIronBridge` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#crossIronBridges AffiliatedInstitution.crossIronBridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#crossIronBridges
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries crossIronBridges of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::get::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.crossIronBridges#count
             * @methodOf lbServices.AffiliatedInstitution.crossIronBridges
             *
             * @description
             *
             * Counts crossIronBridges of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.crossIronBridges.count = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::count::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.crossIronBridges#create
             * @methodOf lbServices.AffiliatedInstitution.crossIronBridges
             *
             * @description
             *
             * Creates a new instance in crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.create = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::create::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.crossIronBridges#createMany
             * @methodOf lbServices.AffiliatedInstitution.crossIronBridges
             *
             * @description
             *
             * Creates a new instance in crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.createMany = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::createMany::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.crossIronBridges#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.crossIronBridges
             *
             * @description
             *
             * Deletes all crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.destroyAll = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::delete::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.crossIronBridges#destroyById
             * @methodOf lbServices.AffiliatedInstitution.crossIronBridges
             *
             * @description
             *
             * Delete a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.destroyById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::destroyById::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.crossIronBridges#findById
             * @methodOf lbServices.AffiliatedInstitution.crossIronBridges
             *
             * @description
             *
             * Find a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.findById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::findById::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.crossIronBridges#updateById
             * @methodOf lbServices.AffiliatedInstitution.crossIronBridges
             *
             * @description
             *
             * Update a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.updateById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::updateById::AffiliatedInstitution::crossIronBridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.servicePorts
     * @header lbServices.AffiliatedInstitution.servicePorts
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.servicePorts` groups methods
     * manipulating `ServicePort` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#servicePorts AffiliatedInstitution.servicePorts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#servicePorts
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries servicePorts of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::get::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.servicePorts#count
             * @methodOf lbServices.AffiliatedInstitution.servicePorts
             *
             * @description
             *
             * Counts servicePorts of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.servicePorts.count = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::count::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.servicePorts#create
             * @methodOf lbServices.AffiliatedInstitution.servicePorts
             *
             * @description
             *
             * Creates a new instance in servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.create = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::create::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.servicePorts#createMany
             * @methodOf lbServices.AffiliatedInstitution.servicePorts
             *
             * @description
             *
             * Creates a new instance in servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.createMany = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::createMany::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.servicePorts#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.servicePorts
             *
             * @description
             *
             * Deletes all servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.destroyAll = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::delete::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.servicePorts#destroyById
             * @methodOf lbServices.AffiliatedInstitution.servicePorts
             *
             * @description
             *
             * Delete a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.destroyById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::destroyById::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.servicePorts#findById
             * @methodOf lbServices.AffiliatedInstitution.servicePorts
             *
             * @description
             *
             * Find a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.findById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::findById::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.servicePorts#updateById
             * @methodOf lbServices.AffiliatedInstitution.servicePorts
             *
             * @description
             *
             * Update a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.updateById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::updateById::AffiliatedInstitution::servicePorts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.baseStations
     * @header lbServices.AffiliatedInstitution.baseStations
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.baseStations` groups methods
     * manipulating `BaseStation` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#baseStations AffiliatedInstitution.baseStations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#baseStations
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries baseStations of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::get::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.baseStations#count
             * @methodOf lbServices.AffiliatedInstitution.baseStations
             *
             * @description
             *
             * Counts baseStations of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.baseStations.count = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::count::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.baseStations#create
             * @methodOf lbServices.AffiliatedInstitution.baseStations
             *
             * @description
             *
             * Creates a new instance in baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.create = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::create::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.baseStations#createMany
             * @methodOf lbServices.AffiliatedInstitution.baseStations
             *
             * @description
             *
             * Creates a new instance in baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.createMany = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::createMany::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.baseStations#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.baseStations
             *
             * @description
             *
             * Deletes all baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.destroyAll = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::delete::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.baseStations#destroyById
             * @methodOf lbServices.AffiliatedInstitution.baseStations
             *
             * @description
             *
             * Delete a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.destroyById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::destroyById::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.baseStations#findById
             * @methodOf lbServices.AffiliatedInstitution.baseStations
             *
             * @description
             *
             * Find a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.findById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::findById::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.baseStations#updateById
             * @methodOf lbServices.AffiliatedInstitution.baseStations
             *
             * @description
             *
             * Update a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.updateById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::updateById::AffiliatedInstitution::baseStations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.equipmentInfors
     * @header lbServices.AffiliatedInstitution.equipmentInfors
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.equipmentInfors` groups methods
     * manipulating `EquipmentInfor` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#equipmentInfors AffiliatedInstitution.equipmentInfors()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#equipmentInfors
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries equipmentInfors of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::get::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.equipmentInfors#count
             * @methodOf lbServices.AffiliatedInstitution.equipmentInfors
             *
             * @description
             *
             * Counts equipmentInfors of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.equipmentInfors.count = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::count::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.equipmentInfors#create
             * @methodOf lbServices.AffiliatedInstitution.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.create = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::create::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.equipmentInfors#createMany
             * @methodOf lbServices.AffiliatedInstitution.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.createMany = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::createMany::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.equipmentInfors#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.equipmentInfors
             *
             * @description
             *
             * Deletes all equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyAll = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::delete::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.equipmentInfors#destroyById
             * @methodOf lbServices.AffiliatedInstitution.equipmentInfors
             *
             * @description
             *
             * Delete a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::destroyById::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.equipmentInfors#findById
             * @methodOf lbServices.AffiliatedInstitution.equipmentInfors
             *
             * @description
             *
             * Find a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.findById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::findById::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.equipmentInfors#updateById
             * @methodOf lbServices.AffiliatedInstitution.equipmentInfors
             *
             * @description
             *
             * Update a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.updateById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::updateById::AffiliatedInstitution::equipmentInfors"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.emergencyAccessss
     * @header lbServices.AffiliatedInstitution.emergencyAccessss
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.emergencyAccessss` groups methods
     * manipulating `EmergencyAccesss` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#emergencyAccessss AffiliatedInstitution.emergencyAccessss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#emergencyAccessss
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries emergencyAccessss of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::get::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.emergencyAccessss#count
             * @methodOf lbServices.AffiliatedInstitution.emergencyAccessss
             *
             * @description
             *
             * Counts emergencyAccessss of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.emergencyAccessss.count = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::count::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.emergencyAccessss#create
             * @methodOf lbServices.AffiliatedInstitution.emergencyAccessss
             *
             * @description
             *
             * Creates a new instance in emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.create = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::create::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.emergencyAccessss#createMany
             * @methodOf lbServices.AffiliatedInstitution.emergencyAccessss
             *
             * @description
             *
             * Creates a new instance in emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.createMany = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::createMany::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.emergencyAccessss#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.emergencyAccessss
             *
             * @description
             *
             * Deletes all emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.emergencyAccessss.destroyAll = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::delete::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.emergencyAccessss#destroyById
             * @methodOf lbServices.AffiliatedInstitution.emergencyAccessss
             *
             * @description
             *
             * Delete a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.emergencyAccessss.destroyById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::destroyById::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.emergencyAccessss#findById
             * @methodOf lbServices.AffiliatedInstitution.emergencyAccessss
             *
             * @description
             *
             * Find a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.findById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::findById::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.emergencyAccessss#updateById
             * @methodOf lbServices.AffiliatedInstitution.emergencyAccessss
             *
             * @description
             *
             * Update a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.updateById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::updateById::AffiliatedInstitution::emergencyAccessss"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.securityEquipmentInformations
     * @header lbServices.AffiliatedInstitution.securityEquipmentInformations
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.securityEquipmentInformations` groups methods
     * manipulating `SecurityEquipmentInformation` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#securityEquipmentInformations AffiliatedInstitution.securityEquipmentInformations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#securityEquipmentInformations
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries securityEquipmentInformations of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::get::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.securityEquipmentInformations#count
             * @methodOf lbServices.AffiliatedInstitution.securityEquipmentInformations
             *
             * @description
             *
             * Counts securityEquipmentInformations of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.securityEquipmentInformations.count = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::count::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.securityEquipmentInformations#create
             * @methodOf lbServices.AffiliatedInstitution.securityEquipmentInformations
             *
             * @description
             *
             * Creates a new instance in securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.create = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::create::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.securityEquipmentInformations#createMany
             * @methodOf lbServices.AffiliatedInstitution.securityEquipmentInformations
             *
             * @description
             *
             * Creates a new instance in securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.createMany = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::createMany::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.securityEquipmentInformations#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.securityEquipmentInformations
             *
             * @description
             *
             * Deletes all securityEquipmentInformations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.securityEquipmentInformations.destroyAll = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::delete::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.securityEquipmentInformations#destroyById
             * @methodOf lbServices.AffiliatedInstitution.securityEquipmentInformations
             *
             * @description
             *
             * Delete a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.securityEquipmentInformations.destroyById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::destroyById::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.securityEquipmentInformations#findById
             * @methodOf lbServices.AffiliatedInstitution.securityEquipmentInformations
             *
             * @description
             *
             * Find a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.findById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::findById::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.securityEquipmentInformations#updateById
             * @methodOf lbServices.AffiliatedInstitution.securityEquipmentInformations
             *
             * @description
             *
             * Update a related item by id for securityEquipmentInformations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for securityEquipmentInformations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R.securityEquipmentInformations.updateById = function() {
          var TargetResource = $injector.get("SecurityEquipmentInformation");
          var action = TargetResource["::updateById::AffiliatedInstitution::securityEquipmentInformations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.fenceInfos
     * @header lbServices.AffiliatedInstitution.fenceInfos
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.fenceInfos` groups methods
     * manipulating `FenceInfo` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#fenceInfos AffiliatedInstitution.fenceInfos()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#fenceInfos
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries fenceInfos of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::get::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.fenceInfos#count
             * @methodOf lbServices.AffiliatedInstitution.fenceInfos
             *
             * @description
             *
             * Counts fenceInfos of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fenceInfos.count = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::count::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.fenceInfos#create
             * @methodOf lbServices.AffiliatedInstitution.fenceInfos
             *
             * @description
             *
             * Creates a new instance in fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.create = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::create::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.fenceInfos#createMany
             * @methodOf lbServices.AffiliatedInstitution.fenceInfos
             *
             * @description
             *
             * Creates a new instance in fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.createMany = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::createMany::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.fenceInfos#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.fenceInfos
             *
             * @description
             *
             * Deletes all fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fenceInfos.destroyAll = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::delete::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.fenceInfos#destroyById
             * @methodOf lbServices.AffiliatedInstitution.fenceInfos
             *
             * @description
             *
             * Delete a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fenceInfos.destroyById = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::destroyById::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.fenceInfos#findById
             * @methodOf lbServices.AffiliatedInstitution.fenceInfos
             *
             * @description
             *
             * Find a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.findById = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::findById::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.fenceInfos#updateById
             * @methodOf lbServices.AffiliatedInstitution.fenceInfos
             *
             * @description
             *
             * Update a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.updateById = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::updateById::AffiliatedInstitution::fenceInfos"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.keyPlaces
     * @header lbServices.AffiliatedInstitution.keyPlaces
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.keyPlaces` groups methods
     * manipulating `KeyPlace` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#keyPlaces AffiliatedInstitution.keyPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#keyPlaces
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries keyPlaces of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.keyPlaces#count
             * @methodOf lbServices.AffiliatedInstitution.keyPlaces
             *
             * @description
             *
             * Counts keyPlaces of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPlaces.count = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::count::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.keyPlaces#create
             * @methodOf lbServices.AffiliatedInstitution.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.create = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::create::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.keyPlaces#createMany
             * @methodOf lbServices.AffiliatedInstitution.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.createMany = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::createMany::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.keyPlaces#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.keyPlaces
             *
             * @description
             *
             * Deletes all keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyAll = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::delete::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.keyPlaces#destroyById
             * @methodOf lbServices.AffiliatedInstitution.keyPlaces
             *
             * @description
             *
             * Delete a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::destroyById::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.keyPlaces#findById
             * @methodOf lbServices.AffiliatedInstitution.keyPlaces
             *
             * @description
             *
             * Find a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.findById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::findById::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.keyPlaces#updateById
             * @methodOf lbServices.AffiliatedInstitution.keyPlaces
             *
             * @description
             *
             * Update a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.updateById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::updateById::AffiliatedInstitution::keyPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces
     * @header lbServices.AffiliatedInstitution.hiddenDangerPlaces
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.hiddenDangerPlaces` groups methods
     * manipulating `HiddenDangerPlace` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#hiddenDangerPlaces AffiliatedInstitution.hiddenDangerPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#hiddenDangerPlaces
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries hiddenDangerPlaces of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces#count
             * @methodOf lbServices.AffiliatedInstitution.hiddenDangerPlaces
             *
             * @description
             *
             * Counts hiddenDangerPlaces of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.hiddenDangerPlaces.count = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::count::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces#create
             * @methodOf lbServices.AffiliatedInstitution.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.create = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::create::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces#createMany
             * @methodOf lbServices.AffiliatedInstitution.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.createMany = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::createMany::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.hiddenDangerPlaces
             *
             * @description
             *
             * Deletes all hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyAll = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::delete::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces#destroyById
             * @methodOf lbServices.AffiliatedInstitution.hiddenDangerPlaces
             *
             * @description
             *
             * Delete a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::destroyById::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces#findById
             * @methodOf lbServices.AffiliatedInstitution.hiddenDangerPlaces
             *
             * @description
             *
             * Find a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.findById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::findById::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.hiddenDangerPlaces#updateById
             * @methodOf lbServices.AffiliatedInstitution.hiddenDangerPlaces
             *
             * @description
             *
             * Update a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.updateById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::updateById::AffiliatedInstitution::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.theRoadStations
     * @header lbServices.AffiliatedInstitution.theRoadStations
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.theRoadStations` groups methods
     * manipulating `TheRoadStation` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#theRoadStations AffiliatedInstitution.theRoadStations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#theRoadStations
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries theRoadStations of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::get::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.theRoadStations#count
             * @methodOf lbServices.AffiliatedInstitution.theRoadStations
             *
             * @description
             *
             * Counts theRoadStations of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.theRoadStations.count = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::count::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.theRoadStations#create
             * @methodOf lbServices.AffiliatedInstitution.theRoadStations
             *
             * @description
             *
             * Creates a new instance in theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.create = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::create::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.theRoadStations#createMany
             * @methodOf lbServices.AffiliatedInstitution.theRoadStations
             *
             * @description
             *
             * Creates a new instance in theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.createMany = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::createMany::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.theRoadStations#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.theRoadStations
             *
             * @description
             *
             * Deletes all theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.theRoadStations.destroyAll = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::delete::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.theRoadStations#destroyById
             * @methodOf lbServices.AffiliatedInstitution.theRoadStations
             *
             * @description
             *
             * Delete a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.theRoadStations.destroyById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::destroyById::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.theRoadStations#findById
             * @methodOf lbServices.AffiliatedInstitution.theRoadStations
             *
             * @description
             *
             * Find a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.findById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::findById::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.theRoadStations#updateById
             * @methodOf lbServices.AffiliatedInstitution.theRoadStations
             *
             * @description
             *
             * Update a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.updateById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::updateById::AffiliatedInstitution::theRoadStations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.broadcastWarningPosts
     * @header lbServices.AffiliatedInstitution.broadcastWarningPosts
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.broadcastWarningPosts` groups methods
     * manipulating `BroadcastWarningPost` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#broadcastWarningPosts AffiliatedInstitution.broadcastWarningPosts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#broadcastWarningPosts
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries broadcastWarningPosts of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::get::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.broadcastWarningPosts#count
             * @methodOf lbServices.AffiliatedInstitution.broadcastWarningPosts
             *
             * @description
             *
             * Counts broadcastWarningPosts of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.broadcastWarningPosts.count = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::count::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.broadcastWarningPosts#create
             * @methodOf lbServices.AffiliatedInstitution.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.create = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::create::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.broadcastWarningPosts#createMany
             * @methodOf lbServices.AffiliatedInstitution.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.createMany = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::createMany::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.broadcastWarningPosts#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.broadcastWarningPosts
             *
             * @description
             *
             * Deletes all broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyAll = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::delete::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.broadcastWarningPosts#destroyById
             * @methodOf lbServices.AffiliatedInstitution.broadcastWarningPosts
             *
             * @description
             *
             * Delete a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::destroyById::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.broadcastWarningPosts#findById
             * @methodOf lbServices.AffiliatedInstitution.broadcastWarningPosts
             *
             * @description
             *
             * Find a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.findById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::findById::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.broadcastWarningPosts#updateById
             * @methodOf lbServices.AffiliatedInstitution.broadcastWarningPosts
             *
             * @description
             *
             * Update a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.updateById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::updateById::AffiliatedInstitution::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.aPropagandaPoints
     * @header lbServices.AffiliatedInstitution.aPropagandaPoints
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.aPropagandaPoints` groups methods
     * manipulating `APropagandaPoint` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#aPropagandaPoints AffiliatedInstitution.aPropagandaPoints()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#aPropagandaPoints
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries aPropagandaPoints of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::get::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.aPropagandaPoints#count
             * @methodOf lbServices.AffiliatedInstitution.aPropagandaPoints
             *
             * @description
             *
             * Counts aPropagandaPoints of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.aPropagandaPoints.count = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::count::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.aPropagandaPoints#create
             * @methodOf lbServices.AffiliatedInstitution.aPropagandaPoints
             *
             * @description
             *
             * Creates a new instance in aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.create = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::create::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.aPropagandaPoints#createMany
             * @methodOf lbServices.AffiliatedInstitution.aPropagandaPoints
             *
             * @description
             *
             * Creates a new instance in aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.createMany = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::createMany::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.aPropagandaPoints#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.aPropagandaPoints
             *
             * @description
             *
             * Deletes all aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.destroyAll = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::delete::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.aPropagandaPoints#destroyById
             * @methodOf lbServices.AffiliatedInstitution.aPropagandaPoints
             *
             * @description
             *
             * Delete a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.destroyById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::destroyById::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.aPropagandaPoints#findById
             * @methodOf lbServices.AffiliatedInstitution.aPropagandaPoints
             *
             * @description
             *
             * Find a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.findById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::findById::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.aPropagandaPoints#updateById
             * @methodOf lbServices.AffiliatedInstitution.aPropagandaPoints
             *
             * @description
             *
             * Update a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.updateById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::updateById::AffiliatedInstitution::aPropagandaPoints"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.monitorings
     * @header lbServices.AffiliatedInstitution.monitorings
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.monitorings` groups methods
     * manipulating `Monitoring` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#monitorings AffiliatedInstitution.monitorings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#monitorings
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries monitorings of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::get::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.monitorings#count
             * @methodOf lbServices.AffiliatedInstitution.monitorings
             *
             * @description
             *
             * Counts monitorings of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.monitorings.count = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::count::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.monitorings#create
             * @methodOf lbServices.AffiliatedInstitution.monitorings
             *
             * @description
             *
             * Creates a new instance in monitorings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.create = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::create::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.monitorings#createMany
             * @methodOf lbServices.AffiliatedInstitution.monitorings
             *
             * @description
             *
             * Creates a new instance in monitorings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.createMany = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::createMany::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.monitorings#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.monitorings
             *
             * @description
             *
             * Deletes all monitorings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.monitorings.destroyAll = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::delete::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.monitorings#destroyById
             * @methodOf lbServices.AffiliatedInstitution.monitorings
             *
             * @description
             *
             * Delete a related item by id for monitorings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.monitorings.destroyById = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::destroyById::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.monitorings#findById
             * @methodOf lbServices.AffiliatedInstitution.monitorings
             *
             * @description
             *
             * Find a related item by id for monitorings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.findById = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::findById::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.monitorings#updateById
             * @methodOf lbServices.AffiliatedInstitution.monitorings
             *
             * @description
             *
             * Update a related item by id for monitorings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for monitorings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R.monitorings.updateById = function() {
          var TargetResource = $injector.get("Monitoring");
          var action = TargetResource["::updateById::AffiliatedInstitution::monitorings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.institutionalTeams
     * @header lbServices.AffiliatedInstitution.institutionalTeams
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.institutionalTeams` groups methods
     * manipulating `InstitutionalTeam` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#institutionalTeams AffiliatedInstitution.institutionalTeams()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#institutionalTeams
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries institutionalTeams of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R.institutionalTeams = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::get::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.institutionalTeams#count
             * @methodOf lbServices.AffiliatedInstitution.institutionalTeams
             *
             * @description
             *
             * Counts institutionalTeams of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.institutionalTeams.count = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::count::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.institutionalTeams#create
             * @methodOf lbServices.AffiliatedInstitution.institutionalTeams
             *
             * @description
             *
             * Creates a new instance in institutionalTeams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R.institutionalTeams.create = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::create::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.institutionalTeams#createMany
             * @methodOf lbServices.AffiliatedInstitution.institutionalTeams
             *
             * @description
             *
             * Creates a new instance in institutionalTeams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R.institutionalTeams.createMany = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::createMany::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.institutionalTeams#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.institutionalTeams
             *
             * @description
             *
             * Deletes all institutionalTeams of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.institutionalTeams.destroyAll = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::delete::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.institutionalTeams#destroyById
             * @methodOf lbServices.AffiliatedInstitution.institutionalTeams
             *
             * @description
             *
             * Delete a related item by id for institutionalTeams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for institutionalTeams
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.institutionalTeams.destroyById = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::destroyById::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.institutionalTeams#findById
             * @methodOf lbServices.AffiliatedInstitution.institutionalTeams
             *
             * @description
             *
             * Find a related item by id for institutionalTeams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for institutionalTeams
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R.institutionalTeams.findById = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::findById::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.institutionalTeams#updateById
             * @methodOf lbServices.AffiliatedInstitution.institutionalTeams
             *
             * @description
             *
             * Update a related item by id for institutionalTeams.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for institutionalTeams
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R.institutionalTeams.updateById = function() {
          var TargetResource = $injector.get("InstitutionalTeam");
          var action = TargetResource["::updateById::AffiliatedInstitution::institutionalTeams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AffiliatedInstitution.teamMemberss
     * @header lbServices.AffiliatedInstitution.teamMemberss
     * @object
     * @description
     *
     * The object `AffiliatedInstitution.teamMemberss` groups methods
     * manipulating `TeamMembers` instances related to `AffiliatedInstitution`.
     *
     * Call {@link lbServices.AffiliatedInstitution#teamMemberss AffiliatedInstitution.teamMemberss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution#teamMemberss
             * @methodOf lbServices.AffiliatedInstitution
             *
             * @description
             *
             * Queries teamMemberss of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::get::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.teamMemberss#count
             * @methodOf lbServices.AffiliatedInstitution.teamMemberss
             *
             * @description
             *
             * Counts teamMemberss of AffiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teamMemberss.count = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::count::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.teamMemberss#create
             * @methodOf lbServices.AffiliatedInstitution.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.create = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::create::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.teamMemberss#createMany
             * @methodOf lbServices.AffiliatedInstitution.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.createMany = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::createMany::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.teamMemberss#destroyAll
             * @methodOf lbServices.AffiliatedInstitution.teamMemberss
             *
             * @description
             *
             * Deletes all teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyAll = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::delete::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.teamMemberss#destroyById
             * @methodOf lbServices.AffiliatedInstitution.teamMemberss
             *
             * @description
             *
             * Delete a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::destroyById::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.teamMemberss#findById
             * @methodOf lbServices.AffiliatedInstitution.teamMemberss
             *
             * @description
             *
             * Find a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.findById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::findById::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AffiliatedInstitution.teamMemberss#updateById
             * @methodOf lbServices.AffiliatedInstitution.teamMemberss
             *
             * @description
             *
             * Update a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.updateById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::updateById::AffiliatedInstitution::teamMemberss"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.CrossProperty
 * @header lbServices.CrossProperty
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CrossProperty` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CrossProperty",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/CrossProperties/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#create
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/CrossProperties",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#createMany
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/CrossProperties",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#upsert
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/CrossProperties",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#exists
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/CrossProperties/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#findById
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/CrossProperties/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#find
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/CrossProperties",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#findOne
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/CrossProperties/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#updateAll
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/CrossProperties/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#deleteById
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/CrossProperties/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#count
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/CrossProperties/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#prototype$updateAttributes
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/CrossProperties/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#createChangeStream
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/CrossProperties/change-stream",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossing.crossProperty() instead.
            "::get::LevelCrossing::crossProperty": {
              url: urlBase + "/LevelCrossings/:id/crossProperty",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#updateOrCreate
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#update
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#destroyById
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CrossProperty#removeById
             * @methodOf lbServices.CrossProperty
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossProperty` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CrossProperty#modelName
        * @propertyOf lbServices.CrossProperty
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CrossProperty`.
        */
        R.modelName = "CrossProperty";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Alignment
 * @header lbServices.Alignment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Alignment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Alignment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Alignments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Alignment.bridges.findById() instead.
            "prototype$__findById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.bridges.destroyById() instead.
            "prototype$__destroyById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.bridges.updateById() instead.
            "prototype$__updateById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.tunnels.findById() instead.
            "prototype$__findById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.tunnels.destroyById() instead.
            "prototype$__destroyById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.tunnels.updateById() instead.
            "prototype$__updateById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.levelCrossings.findById() instead.
            "prototype$__findById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.levelCrossings.destroyById() instead.
            "prototype$__destroyById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.levelCrossings.updateById() instead.
            "prototype$__updateById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.culverts.findById() instead.
            "prototype$__findById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.culverts.destroyById() instead.
            "prototype$__destroyById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.culverts.updateById() instead.
            "prototype$__updateById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.equipmentInfors.findById() instead.
            "prototype$__findById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.equipmentInfors.destroyById() instead.
            "prototype$__destroyById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.equipmentInfors.updateById() instead.
            "prototype$__updateById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.findById() instead.
            "prototype$__findById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/emergencyAccessss/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.destroyById() instead.
            "prototype$__destroyById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/emergencyAccessss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.updateById() instead.
            "prototype$__updateById__emergencyAccessss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/emergencyAccessss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.fenceInfos.findById() instead.
            "prototype$__findById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/fenceInfos/:fk",
              method: "GET",
            },

            // INTERNAL. Use Alignment.fenceInfos.destroyById() instead.
            "prototype$__destroyById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/fenceInfos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.fenceInfos.updateById() instead.
            "prototype$__updateById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Alignments/:id/fenceInfos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Alignment.bridges() instead.
            "prototype$__get__bridges": {
              isArray: true,
              url: urlBase + "/Alignments/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Alignment.bridges.create() instead.
            "prototype$__create__bridges": {
              url: urlBase + "/Alignments/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Alignment.bridges.destroyAll() instead.
            "prototype$__delete__bridges": {
              url: urlBase + "/Alignments/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.bridges.count() instead.
            "prototype$__count__bridges": {
              url: urlBase + "/Alignments/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.tunnels() instead.
            "prototype$__get__tunnels": {
              isArray: true,
              url: urlBase + "/Alignments/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Alignment.tunnels.create() instead.
            "prototype$__create__tunnels": {
              url: urlBase + "/Alignments/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Alignment.tunnels.destroyAll() instead.
            "prototype$__delete__tunnels": {
              url: urlBase + "/Alignments/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.tunnels.count() instead.
            "prototype$__count__tunnels": {
              url: urlBase + "/Alignments/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.levelCrossings() instead.
            "prototype$__get__levelCrossings": {
              isArray: true,
              url: urlBase + "/Alignments/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Alignment.levelCrossings.create() instead.
            "prototype$__create__levelCrossings": {
              url: urlBase + "/Alignments/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Alignment.levelCrossings.destroyAll() instead.
            "prototype$__delete__levelCrossings": {
              url: urlBase + "/Alignments/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.levelCrossings.count() instead.
            "prototype$__count__levelCrossings": {
              url: urlBase + "/Alignments/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.culverts() instead.
            "prototype$__get__culverts": {
              isArray: true,
              url: urlBase + "/Alignments/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Alignment.culverts.create() instead.
            "prototype$__create__culverts": {
              url: urlBase + "/Alignments/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Alignment.culverts.destroyAll() instead.
            "prototype$__delete__culverts": {
              url: urlBase + "/Alignments/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.culverts.count() instead.
            "prototype$__count__culverts": {
              url: urlBase + "/Alignments/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.equipmentInfors() instead.
            "prototype$__get__equipmentInfors": {
              isArray: true,
              url: urlBase + "/Alignments/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use Alignment.equipmentInfors.create() instead.
            "prototype$__create__equipmentInfors": {
              url: urlBase + "/Alignments/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Alignment.equipmentInfors.destroyAll() instead.
            "prototype$__delete__equipmentInfors": {
              url: urlBase + "/Alignments/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.equipmentInfors.count() instead.
            "prototype$__count__equipmentInfors": {
              url: urlBase + "/Alignments/:id/equipmentInfors/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.emergencyAccessss() instead.
            "prototype$__get__emergencyAccessss": {
              isArray: true,
              url: urlBase + "/Alignments/:id/emergencyAccessss",
              method: "GET",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.create() instead.
            "prototype$__create__emergencyAccessss": {
              url: urlBase + "/Alignments/:id/emergencyAccessss",
              method: "POST",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.destroyAll() instead.
            "prototype$__delete__emergencyAccessss": {
              url: urlBase + "/Alignments/:id/emergencyAccessss",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.emergencyAccessss.count() instead.
            "prototype$__count__emergencyAccessss": {
              url: urlBase + "/Alignments/:id/emergencyAccessss/count",
              method: "GET",
            },

            // INTERNAL. Use Alignment.fenceInfos() instead.
            "prototype$__get__fenceInfos": {
              isArray: true,
              url: urlBase + "/Alignments/:id/fenceInfos",
              method: "GET",
            },

            // INTERNAL. Use Alignment.fenceInfos.create() instead.
            "prototype$__create__fenceInfos": {
              url: urlBase + "/Alignments/:id/fenceInfos",
              method: "POST",
            },

            // INTERNAL. Use Alignment.fenceInfos.destroyAll() instead.
            "prototype$__delete__fenceInfos": {
              url: urlBase + "/Alignments/:id/fenceInfos",
              method: "DELETE",
            },

            // INTERNAL. Use Alignment.fenceInfos.count() instead.
            "prototype$__count__fenceInfos": {
              url: urlBase + "/Alignments/:id/fenceInfos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#create
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Alignments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#createMany
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Alignments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#upsert
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Alignments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#exists
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Alignments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#findById
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Alignments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#find
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Alignments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#findOne
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Alignments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#updateAll
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Alignments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#deleteById
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Alignments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#count
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Alignments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#prototype$updateAttributes
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Alignments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Alignment#createChangeStream
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Alignments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Bridge.alignment() instead.
            "::get::Bridge::alignment": {
              url: urlBase + "/Bridges/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.alignment() instead.
            "::get::Tunnel::alignment": {
              url: urlBase + "/tunnels/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.alignment() instead.
            "::get::LevelCrossing::alignment": {
              url: urlBase + "/LevelCrossings/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use Culvert.alignment() instead.
            "::get::Culvert::alignment": {
              url: urlBase + "/Culverts/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use EquipmentInfor.alignment() instead.
            "::get::EquipmentInfor::alignment": {
              url: urlBase + "/EquipmentInfors/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use EmergencyAccesss.alignment() instead.
            "::get::EmergencyAccesss::alignment": {
              url: urlBase + "/EmergencyAccessses/:id/alignment",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.alignments() instead.
            "::get::FenceInfo::alignments": {
              url: urlBase + "/FenceInfos/:id/alignments",
              method: "GET",
            },

            // INTERNAL. Use RouteMapInformation.alignment() instead.
            "::get::RouteMapInformation::alignment": {
              url: urlBase + "/RouteMapInformations/:id/alignment",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Alignment#updateOrCreate
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Alignment#update
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Alignment#destroyById
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Alignment#removeById
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Alignment#modelName
        * @propertyOf lbServices.Alignment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Alignment`.
        */
        R.modelName = "Alignment";

    /**
     * @ngdoc object
     * @name lbServices.Alignment.bridges
     * @header lbServices.Alignment.bridges
     * @object
     * @description
     *
     * The object `Alignment.bridges` groups methods
     * manipulating `Bridge` instances related to `Alignment`.
     *
     * Call {@link lbServices.Alignment#bridges Alignment.bridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Alignment#bridges
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Queries bridges of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::Alignment::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.bridges#count
             * @methodOf lbServices.Alignment.bridges
             *
             * @description
             *
             * Counts bridges of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bridges.count = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::count::Alignment::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.bridges#create
             * @methodOf lbServices.Alignment.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.create = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::create::Alignment::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.bridges#createMany
             * @methodOf lbServices.Alignment.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.createMany = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::createMany::Alignment::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.bridges#destroyAll
             * @methodOf lbServices.Alignment.bridges
             *
             * @description
             *
             * Deletes all bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyAll = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::delete::Alignment::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.bridges#destroyById
             * @methodOf lbServices.Alignment.bridges
             *
             * @description
             *
             * Delete a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::destroyById::Alignment::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.bridges#findById
             * @methodOf lbServices.Alignment.bridges
             *
             * @description
             *
             * Find a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.findById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::findById::Alignment::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.bridges#updateById
             * @methodOf lbServices.Alignment.bridges
             *
             * @description
             *
             * Update a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.updateById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::updateById::Alignment::bridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Alignment.tunnels
     * @header lbServices.Alignment.tunnels
     * @object
     * @description
     *
     * The object `Alignment.tunnels` groups methods
     * manipulating `Tunnel` instances related to `Alignment`.
     *
     * Call {@link lbServices.Alignment#tunnels Alignment.tunnels()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Alignment#tunnels
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Queries tunnels of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::get::Alignment::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.tunnels#count
             * @methodOf lbServices.Alignment.tunnels
             *
             * @description
             *
             * Counts tunnels of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tunnels.count = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::count::Alignment::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.tunnels#create
             * @methodOf lbServices.Alignment.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.create = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::create::Alignment::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.tunnels#createMany
             * @methodOf lbServices.Alignment.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.createMany = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::createMany::Alignment::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.tunnels#destroyAll
             * @methodOf lbServices.Alignment.tunnels
             *
             * @description
             *
             * Deletes all tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyAll = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::delete::Alignment::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.tunnels#destroyById
             * @methodOf lbServices.Alignment.tunnels
             *
             * @description
             *
             * Delete a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::destroyById::Alignment::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.tunnels#findById
             * @methodOf lbServices.Alignment.tunnels
             *
             * @description
             *
             * Find a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.findById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::findById::Alignment::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.tunnels#updateById
             * @methodOf lbServices.Alignment.tunnels
             *
             * @description
             *
             * Update a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.updateById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::updateById::Alignment::tunnels"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Alignment.levelCrossings
     * @header lbServices.Alignment.levelCrossings
     * @object
     * @description
     *
     * The object `Alignment.levelCrossings` groups methods
     * manipulating `LevelCrossing` instances related to `Alignment`.
     *
     * Call {@link lbServices.Alignment#levelCrossings Alignment.levelCrossings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Alignment#levelCrossings
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Queries levelCrossings of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::get::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.levelCrossings#count
             * @methodOf lbServices.Alignment.levelCrossings
             *
             * @description
             *
             * Counts levelCrossings of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.levelCrossings.count = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::count::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.levelCrossings#create
             * @methodOf lbServices.Alignment.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.create = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::create::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.levelCrossings#createMany
             * @methodOf lbServices.Alignment.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.createMany = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::createMany::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.levelCrossings#destroyAll
             * @methodOf lbServices.Alignment.levelCrossings
             *
             * @description
             *
             * Deletes all levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyAll = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::delete::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.levelCrossings#destroyById
             * @methodOf lbServices.Alignment.levelCrossings
             *
             * @description
             *
             * Delete a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::destroyById::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.levelCrossings#findById
             * @methodOf lbServices.Alignment.levelCrossings
             *
             * @description
             *
             * Find a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.findById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::findById::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.levelCrossings#updateById
             * @methodOf lbServices.Alignment.levelCrossings
             *
             * @description
             *
             * Update a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.updateById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::updateById::Alignment::levelCrossings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Alignment.culverts
     * @header lbServices.Alignment.culverts
     * @object
     * @description
     *
     * The object `Alignment.culverts` groups methods
     * manipulating `Culvert` instances related to `Alignment`.
     *
     * Call {@link lbServices.Alignment#culverts Alignment.culverts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Alignment#culverts
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Queries culverts of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::Alignment::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.culverts#count
             * @methodOf lbServices.Alignment.culverts
             *
             * @description
             *
             * Counts culverts of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.culverts.count = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::count::Alignment::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.culverts#create
             * @methodOf lbServices.Alignment.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.create = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::create::Alignment::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.culverts#createMany
             * @methodOf lbServices.Alignment.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.createMany = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::createMany::Alignment::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.culverts#destroyAll
             * @methodOf lbServices.Alignment.culverts
             *
             * @description
             *
             * Deletes all culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyAll = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::delete::Alignment::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.culverts#destroyById
             * @methodOf lbServices.Alignment.culverts
             *
             * @description
             *
             * Delete a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::destroyById::Alignment::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.culverts#findById
             * @methodOf lbServices.Alignment.culverts
             *
             * @description
             *
             * Find a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.findById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::findById::Alignment::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.culverts#updateById
             * @methodOf lbServices.Alignment.culverts
             *
             * @description
             *
             * Update a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.updateById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::updateById::Alignment::culverts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Alignment.equipmentInfors
     * @header lbServices.Alignment.equipmentInfors
     * @object
     * @description
     *
     * The object `Alignment.equipmentInfors` groups methods
     * manipulating `EquipmentInfor` instances related to `Alignment`.
     *
     * Call {@link lbServices.Alignment#equipmentInfors Alignment.equipmentInfors()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Alignment#equipmentInfors
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Queries equipmentInfors of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::get::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.equipmentInfors#count
             * @methodOf lbServices.Alignment.equipmentInfors
             *
             * @description
             *
             * Counts equipmentInfors of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.equipmentInfors.count = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::count::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.equipmentInfors#create
             * @methodOf lbServices.Alignment.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.create = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::create::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.equipmentInfors#createMany
             * @methodOf lbServices.Alignment.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.createMany = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::createMany::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.equipmentInfors#destroyAll
             * @methodOf lbServices.Alignment.equipmentInfors
             *
             * @description
             *
             * Deletes all equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyAll = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::delete::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.equipmentInfors#destroyById
             * @methodOf lbServices.Alignment.equipmentInfors
             *
             * @description
             *
             * Delete a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::destroyById::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.equipmentInfors#findById
             * @methodOf lbServices.Alignment.equipmentInfors
             *
             * @description
             *
             * Find a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.findById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::findById::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.equipmentInfors#updateById
             * @methodOf lbServices.Alignment.equipmentInfors
             *
             * @description
             *
             * Update a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.updateById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::updateById::Alignment::equipmentInfors"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Alignment.emergencyAccessss
     * @header lbServices.Alignment.emergencyAccessss
     * @object
     * @description
     *
     * The object `Alignment.emergencyAccessss` groups methods
     * manipulating `EmergencyAccesss` instances related to `Alignment`.
     *
     * Call {@link lbServices.Alignment#emergencyAccessss Alignment.emergencyAccessss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Alignment#emergencyAccessss
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Queries emergencyAccessss of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::get::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.emergencyAccessss#count
             * @methodOf lbServices.Alignment.emergencyAccessss
             *
             * @description
             *
             * Counts emergencyAccessss of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.emergencyAccessss.count = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::count::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.emergencyAccessss#create
             * @methodOf lbServices.Alignment.emergencyAccessss
             *
             * @description
             *
             * Creates a new instance in emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.create = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::create::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.emergencyAccessss#createMany
             * @methodOf lbServices.Alignment.emergencyAccessss
             *
             * @description
             *
             * Creates a new instance in emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.createMany = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::createMany::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.emergencyAccessss#destroyAll
             * @methodOf lbServices.Alignment.emergencyAccessss
             *
             * @description
             *
             * Deletes all emergencyAccessss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.emergencyAccessss.destroyAll = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::delete::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.emergencyAccessss#destroyById
             * @methodOf lbServices.Alignment.emergencyAccessss
             *
             * @description
             *
             * Delete a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.emergencyAccessss.destroyById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::destroyById::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.emergencyAccessss#findById
             * @methodOf lbServices.Alignment.emergencyAccessss
             *
             * @description
             *
             * Find a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.findById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::findById::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.emergencyAccessss#updateById
             * @methodOf lbServices.Alignment.emergencyAccessss
             *
             * @description
             *
             * Update a related item by id for emergencyAccessss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for emergencyAccessss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R.emergencyAccessss.updateById = function() {
          var TargetResource = $injector.get("EmergencyAccesss");
          var action = TargetResource["::updateById::Alignment::emergencyAccessss"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Alignment.fenceInfos
     * @header lbServices.Alignment.fenceInfos
     * @object
     * @description
     *
     * The object `Alignment.fenceInfos` groups methods
     * manipulating `FenceInfo` instances related to `Alignment`.
     *
     * Call {@link lbServices.Alignment#fenceInfos Alignment.fenceInfos()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Alignment#fenceInfos
             * @methodOf lbServices.Alignment
             *
             * @description
             *
             * Queries fenceInfos of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::get::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.fenceInfos#count
             * @methodOf lbServices.Alignment.fenceInfos
             *
             * @description
             *
             * Counts fenceInfos of Alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fenceInfos.count = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::count::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.fenceInfos#create
             * @methodOf lbServices.Alignment.fenceInfos
             *
             * @description
             *
             * Creates a new instance in fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.create = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::create::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.fenceInfos#createMany
             * @methodOf lbServices.Alignment.fenceInfos
             *
             * @description
             *
             * Creates a new instance in fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.createMany = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::createMany::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.fenceInfos#destroyAll
             * @methodOf lbServices.Alignment.fenceInfos
             *
             * @description
             *
             * Deletes all fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fenceInfos.destroyAll = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::delete::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.fenceInfos#destroyById
             * @methodOf lbServices.Alignment.fenceInfos
             *
             * @description
             *
             * Delete a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fenceInfos.destroyById = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::destroyById::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.fenceInfos#findById
             * @methodOf lbServices.Alignment.fenceInfos
             *
             * @description
             *
             * Find a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.findById = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::findById::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Alignment.fenceInfos#updateById
             * @methodOf lbServices.Alignment.fenceInfos
             *
             * @description
             *
             * Update a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos.updateById = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::updateById::Alignment::fenceInfos"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ClassIfication
 * @header lbServices.ClassIfication
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ClassIfication` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ClassIfication",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ClassIfications/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ClassIfication.culverts.findById() instead.
            "prototype$__findById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ClassIfications/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use ClassIfication.culverts.destroyById() instead.
            "prototype$__destroyById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ClassIfications/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ClassIfication.culverts.updateById() instead.
            "prototype$__updateById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ClassIfications/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ClassIfication.culverts() instead.
            "prototype$__get__culverts": {
              isArray: true,
              url: urlBase + "/ClassIfications/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use ClassIfication.culverts.create() instead.
            "prototype$__create__culverts": {
              url: urlBase + "/ClassIfications/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use ClassIfication.culverts.destroyAll() instead.
            "prototype$__delete__culverts": {
              url: urlBase + "/ClassIfications/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use ClassIfication.culverts.count() instead.
            "prototype$__count__culverts": {
              url: urlBase + "/ClassIfications/:id/culverts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#create
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ClassIfications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#createMany
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ClassIfications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#upsert
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ClassIfications",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#exists
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ClassIfications/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#findById
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ClassIfications/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#find
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ClassIfications",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#findOne
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ClassIfications/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#updateAll
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ClassIfications/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#deleteById
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ClassIfications/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#count
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ClassIfications/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#prototype$updateAttributes
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ClassIfications/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#createChangeStream
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ClassIfications/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Culvert.classIfication() instead.
            "::get::Culvert::classIfication": {
              url: urlBase + "/Culverts/:id/classIfication",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#updateOrCreate
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#update
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#destroyById
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#removeById
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClassIfication` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ClassIfication#modelName
        * @propertyOf lbServices.ClassIfication
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ClassIfication`.
        */
        R.modelName = "ClassIfication";

    /**
     * @ngdoc object
     * @name lbServices.ClassIfication.culverts
     * @header lbServices.ClassIfication.culverts
     * @object
     * @description
     *
     * The object `ClassIfication.culverts` groups methods
     * manipulating `Culvert` instances related to `ClassIfication`.
     *
     * Call {@link lbServices.ClassIfication#culverts ClassIfication.culverts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ClassIfication#culverts
             * @methodOf lbServices.ClassIfication
             *
             * @description
             *
             * Queries culverts of ClassIfication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication.culverts#count
             * @methodOf lbServices.ClassIfication.culverts
             *
             * @description
             *
             * Counts culverts of ClassIfication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.culverts.count = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::count::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication.culverts#create
             * @methodOf lbServices.ClassIfication.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.create = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::create::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication.culverts#createMany
             * @methodOf lbServices.ClassIfication.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.createMany = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::createMany::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication.culverts#destroyAll
             * @methodOf lbServices.ClassIfication.culverts
             *
             * @description
             *
             * Deletes all culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyAll = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::delete::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication.culverts#destroyById
             * @methodOf lbServices.ClassIfication.culverts
             *
             * @description
             *
             * Delete a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::destroyById::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication.culverts#findById
             * @methodOf lbServices.ClassIfication.culverts
             *
             * @description
             *
             * Find a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.findById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::findById::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClassIfication.culverts#updateById
             * @methodOf lbServices.ClassIfication.culverts
             *
             * @description
             *
             * Update a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.updateById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::updateById::ClassIfication::culverts"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Category
 * @header lbServices.Category
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Category` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Category",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Categories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Category.equipmentInfors.findById() instead.
            "prototype$__findById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/equipmentInfors/:fk",
              method: "GET",
            },

            // INTERNAL. Use Category.equipmentInfors.destroyById() instead.
            "prototype$__destroyById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/equipmentInfors/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Category.equipmentInfors.updateById() instead.
            "prototype$__updateById__equipmentInfors": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/equipmentInfors/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Category.equipmentInfors() instead.
            "prototype$__get__equipmentInfors": {
              isArray: true,
              url: urlBase + "/Categories/:id/equipmentInfors",
              method: "GET",
            },

            // INTERNAL. Use Category.equipmentInfors.create() instead.
            "prototype$__create__equipmentInfors": {
              url: urlBase + "/Categories/:id/equipmentInfors",
              method: "POST",
            },

            // INTERNAL. Use Category.equipmentInfors.destroyAll() instead.
            "prototype$__delete__equipmentInfors": {
              url: urlBase + "/Categories/:id/equipmentInfors",
              method: "DELETE",
            },

            // INTERNAL. Use Category.equipmentInfors.count() instead.
            "prototype$__count__equipmentInfors": {
              url: urlBase + "/Categories/:id/equipmentInfors/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#create
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Categories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#createMany
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Categories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#upsert
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Categories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#exists
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Categories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#findById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Categories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#find
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Categories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#findOne
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Categories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#updateAll
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Categories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#deleteById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Categories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#count
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Categories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#prototype$updateAttributes
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Categories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#createChangeStream
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Categories/change-stream",
              method: "POST",
            },

            // INTERNAL. Use EquipmentInfor.category() instead.
            "::get::EquipmentInfor::category": {
              url: urlBase + "/EquipmentInfors/:id/category",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Category#updateOrCreate
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Category#update
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Category#destroyById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Category#removeById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Category#modelName
        * @propertyOf lbServices.Category
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Category`.
        */
        R.modelName = "Category";

    /**
     * @ngdoc object
     * @name lbServices.Category.equipmentInfors
     * @header lbServices.Category.equipmentInfors
     * @object
     * @description
     *
     * The object `Category.equipmentInfors` groups methods
     * manipulating `EquipmentInfor` instances related to `Category`.
     *
     * Call {@link lbServices.Category#equipmentInfors Category.equipmentInfors()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Category#equipmentInfors
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Queries equipmentInfors of Category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::get::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.equipmentInfors#count
             * @methodOf lbServices.Category.equipmentInfors
             *
             * @description
             *
             * Counts equipmentInfors of Category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.equipmentInfors.count = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::count::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.equipmentInfors#create
             * @methodOf lbServices.Category.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.create = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::create::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.equipmentInfors#createMany
             * @methodOf lbServices.Category.equipmentInfors
             *
             * @description
             *
             * Creates a new instance in equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.createMany = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::createMany::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.equipmentInfors#destroyAll
             * @methodOf lbServices.Category.equipmentInfors
             *
             * @description
             *
             * Deletes all equipmentInfors of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyAll = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::delete::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.equipmentInfors#destroyById
             * @methodOf lbServices.Category.equipmentInfors
             *
             * @description
             *
             * Delete a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipmentInfors.destroyById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::destroyById::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.equipmentInfors#findById
             * @methodOf lbServices.Category.equipmentInfors
             *
             * @description
             *
             * Find a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.findById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::findById::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.equipmentInfors#updateById
             * @methodOf lbServices.Category.equipmentInfors
             *
             * @description
             *
             * Update a related item by id for equipmentInfors.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for equipmentInfors
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R.equipmentInfors.updateById = function() {
          var TargetResource = $injector.get("EquipmentInfor");
          var action = TargetResource["::updateById::Category::equipmentInfors"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Hazardlevel
 * @header lbServices.Hazardlevel
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Hazardlevel` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Hazardlevel",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Hazardlevels/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Hazardlevel.keyPlaces.findById() instead.
            "prototype$__findById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.destroyById() instead.
            "prototype$__destroyById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.updateById() instead.
            "prototype$__updateById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.findById() instead.
            "prototype$__findById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.destroyById() instead.
            "prototype$__destroyById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.updateById() instead.
            "prototype$__updateById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces() instead.
            "prototype$__get__keyPlaces": {
              isArray: true,
              url: urlBase + "/Hazardlevels/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.create() instead.
            "prototype$__create__keyPlaces": {
              url: urlBase + "/Hazardlevels/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.destroyAll() instead.
            "prototype$__delete__keyPlaces": {
              url: urlBase + "/Hazardlevels/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.keyPlaces.count() instead.
            "prototype$__count__keyPlaces": {
              url: urlBase + "/Hazardlevels/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces() instead.
            "prototype$__get__hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.create() instead.
            "prototype$__create__hiddenDangerPlaces": {
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.destroyAll() instead.
            "prototype$__delete__hiddenDangerPlaces": {
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Hazardlevel.hiddenDangerPlaces.count() instead.
            "prototype$__count__hiddenDangerPlaces": {
              url: urlBase + "/Hazardlevels/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#create
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Hazardlevels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#createMany
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Hazardlevels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#upsert
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Hazardlevels",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#exists
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Hazardlevels/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#findById
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Hazardlevels/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#find
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Hazardlevels",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#findOne
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Hazardlevels/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#updateAll
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Hazardlevels/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#deleteById
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Hazardlevels/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#count
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Hazardlevels/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#prototype$updateAttributes
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Hazardlevels/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#createChangeStream
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Hazardlevels/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.hazardlevels() instead.
            "::get::KeyPlace::hazardlevels": {
              url: urlBase + "/KeyPlaces/:id/hazardlevels",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.hazardlevel() instead.
            "::get::HiddenDangerPlace::hazardlevel": {
              url: urlBase + "/HiddenDangerPlaces/:id/hazardlevel",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#updateOrCreate
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#update
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#destroyById
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#removeById
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Hazardlevel` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Hazardlevel#modelName
        * @propertyOf lbServices.Hazardlevel
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Hazardlevel`.
        */
        R.modelName = "Hazardlevel";

    /**
     * @ngdoc object
     * @name lbServices.Hazardlevel.keyPlaces
     * @header lbServices.Hazardlevel.keyPlaces
     * @object
     * @description
     *
     * The object `Hazardlevel.keyPlaces` groups methods
     * manipulating `KeyPlace` instances related to `Hazardlevel`.
     *
     * Call {@link lbServices.Hazardlevel#keyPlaces Hazardlevel.keyPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#keyPlaces
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Queries keyPlaces of Hazardlevel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.keyPlaces#count
             * @methodOf lbServices.Hazardlevel.keyPlaces
             *
             * @description
             *
             * Counts keyPlaces of Hazardlevel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPlaces.count = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::count::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.keyPlaces#create
             * @methodOf lbServices.Hazardlevel.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.create = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::create::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.keyPlaces#createMany
             * @methodOf lbServices.Hazardlevel.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.createMany = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::createMany::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.keyPlaces#destroyAll
             * @methodOf lbServices.Hazardlevel.keyPlaces
             *
             * @description
             *
             * Deletes all keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyAll = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::delete::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.keyPlaces#destroyById
             * @methodOf lbServices.Hazardlevel.keyPlaces
             *
             * @description
             *
             * Delete a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::destroyById::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.keyPlaces#findById
             * @methodOf lbServices.Hazardlevel.keyPlaces
             *
             * @description
             *
             * Find a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.findById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::findById::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.keyPlaces#updateById
             * @methodOf lbServices.Hazardlevel.keyPlaces
             *
             * @description
             *
             * Update a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.updateById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::updateById::Hazardlevel::keyPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Hazardlevel.hiddenDangerPlaces
     * @header lbServices.Hazardlevel.hiddenDangerPlaces
     * @object
     * @description
     *
     * The object `Hazardlevel.hiddenDangerPlaces` groups methods
     * manipulating `HiddenDangerPlace` instances related to `Hazardlevel`.
     *
     * Call {@link lbServices.Hazardlevel#hiddenDangerPlaces Hazardlevel.hiddenDangerPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel#hiddenDangerPlaces
             * @methodOf lbServices.Hazardlevel
             *
             * @description
             *
             * Queries hiddenDangerPlaces of Hazardlevel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.hiddenDangerPlaces#count
             * @methodOf lbServices.Hazardlevel.hiddenDangerPlaces
             *
             * @description
             *
             * Counts hiddenDangerPlaces of Hazardlevel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.hiddenDangerPlaces.count = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::count::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.hiddenDangerPlaces#create
             * @methodOf lbServices.Hazardlevel.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.create = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::create::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.hiddenDangerPlaces#createMany
             * @methodOf lbServices.Hazardlevel.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.createMany = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::createMany::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.hiddenDangerPlaces#destroyAll
             * @methodOf lbServices.Hazardlevel.hiddenDangerPlaces
             *
             * @description
             *
             * Deletes all hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyAll = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::delete::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.hiddenDangerPlaces#destroyById
             * @methodOf lbServices.Hazardlevel.hiddenDangerPlaces
             *
             * @description
             *
             * Delete a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::destroyById::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.hiddenDangerPlaces#findById
             * @methodOf lbServices.Hazardlevel.hiddenDangerPlaces
             *
             * @description
             *
             * Find a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.findById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::findById::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Hazardlevel.hiddenDangerPlaces#updateById
             * @methodOf lbServices.Hazardlevel.hiddenDangerPlaces
             *
             * @description
             *
             * Update a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.updateById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::updateById::Hazardlevel::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.HiddenDangerPlaceCategory
 * @header lbServices.HiddenDangerPlaceCategory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `HiddenDangerPlaceCategory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "HiddenDangerPlaceCategory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/HiddenDangerPlaceCategories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.findById() instead.
            "prototype$__findById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.destroyById() instead.
            "prototype$__destroyById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.updateById() instead.
            "prototype$__updateById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces() instead.
            "prototype$__get__hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.create() instead.
            "prototype$__create__hiddenDangerPlaces": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.destroyAll() instead.
            "prototype$__delete__hiddenDangerPlaces": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlaceCategory.hiddenDangerPlaces.count() instead.
            "prototype$__count__hiddenDangerPlaces": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#create
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/HiddenDangerPlaceCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#createMany
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaceCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#upsert
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/HiddenDangerPlaceCategories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#exists
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#findById
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#find
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaceCategories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#findOne
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/HiddenDangerPlaceCategories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#updateAll
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/HiddenDangerPlaceCategories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#deleteById
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#count
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/HiddenDangerPlaceCategories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#prototype$updateAttributes
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/HiddenDangerPlaceCategories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#createChangeStream
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/HiddenDangerPlaceCategories/change-stream",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.hiddenDangerPlaceCategory() instead.
            "::get::HiddenDangerPlace::hiddenDangerPlaceCategory": {
              url: urlBase + "/HiddenDangerPlaces/:id/hiddenDangerPlaceCategory",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#updateOrCreate
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#update
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#destroyById
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#removeById
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlaceCategory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.HiddenDangerPlaceCategory#modelName
        * @propertyOf lbServices.HiddenDangerPlaceCategory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `HiddenDangerPlaceCategory`.
        */
        R.modelName = "HiddenDangerPlaceCategory";

    /**
     * @ngdoc object
     * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
     * @header lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
     * @object
     * @description
     *
     * The object `HiddenDangerPlaceCategory.hiddenDangerPlaces` groups methods
     * manipulating `HiddenDangerPlace` instances related to `HiddenDangerPlaceCategory`.
     *
     * Call {@link lbServices.HiddenDangerPlaceCategory#hiddenDangerPlaces HiddenDangerPlaceCategory.hiddenDangerPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory#hiddenDangerPlaces
             * @methodOf lbServices.HiddenDangerPlaceCategory
             *
             * @description
             *
             * Queries hiddenDangerPlaces of HiddenDangerPlaceCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces#count
             * @methodOf lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
             *
             * @description
             *
             * Counts hiddenDangerPlaces of HiddenDangerPlaceCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.hiddenDangerPlaces.count = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::count::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces#create
             * @methodOf lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.create = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::create::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces#createMany
             * @methodOf lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.createMany = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::createMany::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces#destroyAll
             * @methodOf lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
             *
             * @description
             *
             * Deletes all hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyAll = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::delete::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces#destroyById
             * @methodOf lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
             *
             * @description
             *
             * Delete a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::destroyById::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces#findById
             * @methodOf lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
             *
             * @description
             *
             * Find a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.findById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::findById::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces#updateById
             * @methodOf lbServices.HiddenDangerPlaceCategory.hiddenDangerPlaces
             *
             * @description
             *
             * Update a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.updateById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::updateById::HiddenDangerPlaceCategory::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.State
 * @header lbServices.State
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `State` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "State",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/States/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use State.hiddenDangerPlaces.findById() instead.
            "prototype$__findById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.destroyById() instead.
            "prototype$__destroyById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.updateById() instead.
            "prototype$__updateById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use State.broadcastWarningPosts.findById() instead.
            "prototype$__findById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use State.broadcastWarningPosts.destroyById() instead.
            "prototype$__destroyById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use State.broadcastWarningPosts.updateById() instead.
            "prototype$__updateById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use State.hiddenDangerPlaces() instead.
            "prototype$__get__hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/States/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.create() instead.
            "prototype$__create__hiddenDangerPlaces": {
              url: urlBase + "/States/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.destroyAll() instead.
            "prototype$__delete__hiddenDangerPlaces": {
              url: urlBase + "/States/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use State.hiddenDangerPlaces.count() instead.
            "prototype$__count__hiddenDangerPlaces": {
              url: urlBase + "/States/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use State.broadcastWarningPosts() instead.
            "prototype$__get__broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/States/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use State.broadcastWarningPosts.create() instead.
            "prototype$__create__broadcastWarningPosts": {
              url: urlBase + "/States/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use State.broadcastWarningPosts.destroyAll() instead.
            "prototype$__delete__broadcastWarningPosts": {
              url: urlBase + "/States/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use State.broadcastWarningPosts.count() instead.
            "prototype$__count__broadcastWarningPosts": {
              url: urlBase + "/States/:id/broadcastWarningPosts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#create
             * @methodOf lbServices.State
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/States",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#createMany
             * @methodOf lbServices.State
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/States",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#upsert
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/States",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#exists
             * @methodOf lbServices.State
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/States/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#findById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/States/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#find
             * @methodOf lbServices.State
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/States",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#findOne
             * @methodOf lbServices.State
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/States/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#updateAll
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/States/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#deleteById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/States/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#count
             * @methodOf lbServices.State
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/States/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#prototype$updateAttributes
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/States/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#createChangeStream
             * @methodOf lbServices.State
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/States/change-stream",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.state() instead.
            "::get::HiddenDangerPlace::state": {
              url: urlBase + "/HiddenDangerPlaces/:id/state",
              method: "GET",
            },

            // INTERNAL. Use BroadcastWarningPost.state() instead.
            "::get::BroadcastWarningPost::state": {
              url: urlBase + "/BroadcastWarningPosts/:id/state",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.State#updateOrCreate
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.State#update
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.State#destroyById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.State#removeById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.State#modelName
        * @propertyOf lbServices.State
        * @description
        * The name of the model represented by this $resource,
        * i.e. `State`.
        */
        R.modelName = "State";

    /**
     * @ngdoc object
     * @name lbServices.State.hiddenDangerPlaces
     * @header lbServices.State.hiddenDangerPlaces
     * @object
     * @description
     *
     * The object `State.hiddenDangerPlaces` groups methods
     * manipulating `HiddenDangerPlace` instances related to `State`.
     *
     * Call {@link lbServices.State#hiddenDangerPlaces State.hiddenDangerPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.State#hiddenDangerPlaces
             * @methodOf lbServices.State
             *
             * @description
             *
             * Queries hiddenDangerPlaces of State.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.hiddenDangerPlaces#count
             * @methodOf lbServices.State.hiddenDangerPlaces
             *
             * @description
             *
             * Counts hiddenDangerPlaces of State.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.hiddenDangerPlaces.count = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::count::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.hiddenDangerPlaces#create
             * @methodOf lbServices.State.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.create = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::create::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.hiddenDangerPlaces#createMany
             * @methodOf lbServices.State.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.createMany = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::createMany::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.hiddenDangerPlaces#destroyAll
             * @methodOf lbServices.State.hiddenDangerPlaces
             *
             * @description
             *
             * Deletes all hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyAll = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::delete::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.hiddenDangerPlaces#destroyById
             * @methodOf lbServices.State.hiddenDangerPlaces
             *
             * @description
             *
             * Delete a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::destroyById::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.hiddenDangerPlaces#findById
             * @methodOf lbServices.State.hiddenDangerPlaces
             *
             * @description
             *
             * Find a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.findById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::findById::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.hiddenDangerPlaces#updateById
             * @methodOf lbServices.State.hiddenDangerPlaces
             *
             * @description
             *
             * Update a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.updateById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::updateById::State::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.State.broadcastWarningPosts
     * @header lbServices.State.broadcastWarningPosts
     * @object
     * @description
     *
     * The object `State.broadcastWarningPosts` groups methods
     * manipulating `BroadcastWarningPost` instances related to `State`.
     *
     * Call {@link lbServices.State#broadcastWarningPosts State.broadcastWarningPosts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.State#broadcastWarningPosts
             * @methodOf lbServices.State
             *
             * @description
             *
             * Queries broadcastWarningPosts of State.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::get::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.broadcastWarningPosts#count
             * @methodOf lbServices.State.broadcastWarningPosts
             *
             * @description
             *
             * Counts broadcastWarningPosts of State.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.broadcastWarningPosts.count = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::count::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.broadcastWarningPosts#create
             * @methodOf lbServices.State.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.create = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::create::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.broadcastWarningPosts#createMany
             * @methodOf lbServices.State.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.createMany = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::createMany::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.broadcastWarningPosts#destroyAll
             * @methodOf lbServices.State.broadcastWarningPosts
             *
             * @description
             *
             * Deletes all broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyAll = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::delete::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.broadcastWarningPosts#destroyById
             * @methodOf lbServices.State.broadcastWarningPosts
             *
             * @description
             *
             * Delete a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::destroyById::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.broadcastWarningPosts#findById
             * @methodOf lbServices.State.broadcastWarningPosts
             *
             * @description
             *
             * Find a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.findById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::findById::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.broadcastWarningPosts#updateById
             * @methodOf lbServices.State.broadcastWarningPosts
             *
             * @description
             *
             * Update a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.updateById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::updateById::State::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ServiceMode
 * @header lbServices.ServiceMode
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ServiceMode` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ServiceMode",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ServiceModes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ServiceMode.theRoadStations.findById() instead.
            "prototype$__findById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServiceModes/:id/theRoadStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.destroyById() instead.
            "prototype$__destroyById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServiceModes/:id/theRoadStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.updateById() instead.
            "prototype$__updateById__theRoadStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServiceModes/:id/theRoadStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServiceMode.theRoadStations() instead.
            "prototype$__get__theRoadStations": {
              isArray: true,
              url: urlBase + "/ServiceModes/:id/theRoadStations",
              method: "GET",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.create() instead.
            "prototype$__create__theRoadStations": {
              url: urlBase + "/ServiceModes/:id/theRoadStations",
              method: "POST",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.destroyAll() instead.
            "prototype$__delete__theRoadStations": {
              url: urlBase + "/ServiceModes/:id/theRoadStations",
              method: "DELETE",
            },

            // INTERNAL. Use ServiceMode.theRoadStations.count() instead.
            "prototype$__count__theRoadStations": {
              url: urlBase + "/ServiceModes/:id/theRoadStations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#create
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ServiceModes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#createMany
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ServiceModes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#upsert
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ServiceModes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#exists
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ServiceModes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#findById
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ServiceModes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#find
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ServiceModes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#findOne
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ServiceModes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#updateAll
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ServiceModes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#deleteById
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ServiceModes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#count
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ServiceModes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#prototype$updateAttributes
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ServiceModes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#createChangeStream
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ServiceModes/change-stream",
              method: "POST",
            },

            // INTERNAL. Use TheRoadStation.serviceMode() instead.
            "::get::TheRoadStation::serviceMode": {
              url: urlBase + "/TheRoadStations/:id/serviceMode",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#updateOrCreate
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#update
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#destroyById
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#removeById
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServiceMode` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ServiceMode#modelName
        * @propertyOf lbServices.ServiceMode
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ServiceMode`.
        */
        R.modelName = "ServiceMode";

    /**
     * @ngdoc object
     * @name lbServices.ServiceMode.theRoadStations
     * @header lbServices.ServiceMode.theRoadStations
     * @object
     * @description
     *
     * The object `ServiceMode.theRoadStations` groups methods
     * manipulating `TheRoadStation` instances related to `ServiceMode`.
     *
     * Call {@link lbServices.ServiceMode#theRoadStations ServiceMode.theRoadStations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ServiceMode#theRoadStations
             * @methodOf lbServices.ServiceMode
             *
             * @description
             *
             * Queries theRoadStations of ServiceMode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::get::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode.theRoadStations#count
             * @methodOf lbServices.ServiceMode.theRoadStations
             *
             * @description
             *
             * Counts theRoadStations of ServiceMode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.theRoadStations.count = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::count::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode.theRoadStations#create
             * @methodOf lbServices.ServiceMode.theRoadStations
             *
             * @description
             *
             * Creates a new instance in theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.create = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::create::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode.theRoadStations#createMany
             * @methodOf lbServices.ServiceMode.theRoadStations
             *
             * @description
             *
             * Creates a new instance in theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.createMany = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::createMany::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode.theRoadStations#destroyAll
             * @methodOf lbServices.ServiceMode.theRoadStations
             *
             * @description
             *
             * Deletes all theRoadStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.theRoadStations.destroyAll = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::delete::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode.theRoadStations#destroyById
             * @methodOf lbServices.ServiceMode.theRoadStations
             *
             * @description
             *
             * Delete a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.theRoadStations.destroyById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::destroyById::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode.theRoadStations#findById
             * @methodOf lbServices.ServiceMode.theRoadStations
             *
             * @description
             *
             * Find a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.findById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::findById::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServiceMode.theRoadStations#updateById
             * @methodOf lbServices.ServiceMode.theRoadStations
             *
             * @description
             *
             * Update a related item by id for theRoadStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for theRoadStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TheRoadStation` object.)
             * </em>
             */
        R.theRoadStations.updateById = function() {
          var TargetResource = $injector.get("TheRoadStation");
          var action = TargetResource["::updateById::ServiceMode::theRoadStations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.PoliticalOutlook
 * @header lbServices.PoliticalOutlook
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PoliticalOutlook` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PoliticalOutlook",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/PoliticalOutlooks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use PoliticalOutlook.teamMemberss.findById() instead.
            "prototype$__findById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.destroyById() instead.
            "prototype$__destroyById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.updateById() instead.
            "prototype$__updateById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss() instead.
            "prototype$__get__teamMemberss": {
              isArray: true,
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.create() instead.
            "prototype$__create__teamMemberss": {
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.destroyAll() instead.
            "prototype$__delete__teamMemberss": {
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use PoliticalOutlook.teamMemberss.count() instead.
            "prototype$__count__teamMemberss": {
              url: urlBase + "/PoliticalOutlooks/:id/teamMemberss/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#create
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/PoliticalOutlooks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#createMany
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/PoliticalOutlooks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#upsert
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/PoliticalOutlooks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#exists
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/PoliticalOutlooks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#findById
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/PoliticalOutlooks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#find
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/PoliticalOutlooks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#findOne
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/PoliticalOutlooks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#updateAll
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/PoliticalOutlooks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#deleteById
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/PoliticalOutlooks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#count
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/PoliticalOutlooks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#prototype$updateAttributes
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/PoliticalOutlooks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#createChangeStream
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/PoliticalOutlooks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use TeamMembers.politicalOutlook() instead.
            "::get::TeamMembers::politicalOutlook": {
              url: urlBase + "/TeamMembers/:id/politicalOutlook",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#updateOrCreate
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#update
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#destroyById
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#removeById
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PoliticalOutlook` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.PoliticalOutlook#modelName
        * @propertyOf lbServices.PoliticalOutlook
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PoliticalOutlook`.
        */
        R.modelName = "PoliticalOutlook";

    /**
     * @ngdoc object
     * @name lbServices.PoliticalOutlook.teamMemberss
     * @header lbServices.PoliticalOutlook.teamMemberss
     * @object
     * @description
     *
     * The object `PoliticalOutlook.teamMemberss` groups methods
     * manipulating `TeamMembers` instances related to `PoliticalOutlook`.
     *
     * Call {@link lbServices.PoliticalOutlook#teamMemberss PoliticalOutlook.teamMemberss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook#teamMemberss
             * @methodOf lbServices.PoliticalOutlook
             *
             * @description
             *
             * Queries teamMemberss of PoliticalOutlook.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::get::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook.teamMemberss#count
             * @methodOf lbServices.PoliticalOutlook.teamMemberss
             *
             * @description
             *
             * Counts teamMemberss of PoliticalOutlook.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teamMemberss.count = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::count::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook.teamMemberss#create
             * @methodOf lbServices.PoliticalOutlook.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.create = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::create::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook.teamMemberss#createMany
             * @methodOf lbServices.PoliticalOutlook.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.createMany = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::createMany::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook.teamMemberss#destroyAll
             * @methodOf lbServices.PoliticalOutlook.teamMemberss
             *
             * @description
             *
             * Deletes all teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyAll = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::delete::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook.teamMemberss#destroyById
             * @methodOf lbServices.PoliticalOutlook.teamMemberss
             *
             * @description
             *
             * Delete a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::destroyById::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook.teamMemberss#findById
             * @methodOf lbServices.PoliticalOutlook.teamMemberss
             *
             * @description
             *
             * Find a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.findById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::findById::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.PoliticalOutlook.teamMemberss#updateById
             * @methodOf lbServices.PoliticalOutlook.teamMemberss
             *
             * @description
             *
             * Update a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.updateById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::updateById::PoliticalOutlook::teamMemberss"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.DegreeOfEducation
 * @header lbServices.DegreeOfEducation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DegreeOfEducation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "DegreeOfEducation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/DegreeOfEducations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use DegreeOfEducation.teamMemberss.findById() instead.
            "prototype$__findById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.destroyById() instead.
            "prototype$__destroyById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.updateById() instead.
            "prototype$__updateById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss() instead.
            "prototype$__get__teamMemberss": {
              isArray: true,
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.create() instead.
            "prototype$__create__teamMemberss": {
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.destroyAll() instead.
            "prototype$__delete__teamMemberss": {
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use DegreeOfEducation.teamMemberss.count() instead.
            "prototype$__count__teamMemberss": {
              url: urlBase + "/DegreeOfEducations/:id/teamMemberss/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#create
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/DegreeOfEducations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#createMany
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/DegreeOfEducations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#upsert
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/DegreeOfEducations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#exists
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/DegreeOfEducations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#findById
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/DegreeOfEducations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#find
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/DegreeOfEducations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#findOne
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/DegreeOfEducations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#updateAll
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/DegreeOfEducations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#deleteById
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/DegreeOfEducations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#count
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/DegreeOfEducations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#prototype$updateAttributes
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/DegreeOfEducations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#createChangeStream
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/DegreeOfEducations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use TeamMembers.degreeOfEducation() instead.
            "::get::TeamMembers::degreeOfEducation": {
              url: urlBase + "/TeamMembers/:id/degreeOfEducation",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#updateOrCreate
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#update
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#destroyById
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#removeById
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DegreeOfEducation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DegreeOfEducation#modelName
        * @propertyOf lbServices.DegreeOfEducation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DegreeOfEducation`.
        */
        R.modelName = "DegreeOfEducation";

    /**
     * @ngdoc object
     * @name lbServices.DegreeOfEducation.teamMemberss
     * @header lbServices.DegreeOfEducation.teamMemberss
     * @object
     * @description
     *
     * The object `DegreeOfEducation.teamMemberss` groups methods
     * manipulating `TeamMembers` instances related to `DegreeOfEducation`.
     *
     * Call {@link lbServices.DegreeOfEducation#teamMemberss DegreeOfEducation.teamMemberss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation#teamMemberss
             * @methodOf lbServices.DegreeOfEducation
             *
             * @description
             *
             * Queries teamMemberss of DegreeOfEducation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::get::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation.teamMemberss#count
             * @methodOf lbServices.DegreeOfEducation.teamMemberss
             *
             * @description
             *
             * Counts teamMemberss of DegreeOfEducation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teamMemberss.count = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::count::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation.teamMemberss#create
             * @methodOf lbServices.DegreeOfEducation.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.create = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::create::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation.teamMemberss#createMany
             * @methodOf lbServices.DegreeOfEducation.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.createMany = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::createMany::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation.teamMemberss#destroyAll
             * @methodOf lbServices.DegreeOfEducation.teamMemberss
             *
             * @description
             *
             * Deletes all teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyAll = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::delete::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation.teamMemberss#destroyById
             * @methodOf lbServices.DegreeOfEducation.teamMemberss
             *
             * @description
             *
             * Delete a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::destroyById::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation.teamMemberss#findById
             * @methodOf lbServices.DegreeOfEducation.teamMemberss
             *
             * @description
             *
             * Find a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.findById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::findById::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DegreeOfEducation.teamMemberss#updateById
             * @methodOf lbServices.DegreeOfEducation.teamMemberss
             *
             * @description
             *
             * Update a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.updateById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::updateById::DegreeOfEducation::teamMemberss"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SubordinateRanks
 * @header lbServices.SubordinateRanks
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SubordinateRanks` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SubordinateRanks",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SubordinateRanks/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SubordinateRanks.teamMemberss.findById() instead.
            "prototype$__findById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.destroyById() instead.
            "prototype$__destroyById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.updateById() instead.
            "prototype$__updateById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss() instead.
            "prototype$__get__teamMemberss": {
              isArray: true,
              url: urlBase + "/SubordinateRanks/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.create() instead.
            "prototype$__create__teamMemberss": {
              url: urlBase + "/SubordinateRanks/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.destroyAll() instead.
            "prototype$__delete__teamMemberss": {
              url: urlBase + "/SubordinateRanks/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use SubordinateRanks.teamMemberss.count() instead.
            "prototype$__count__teamMemberss": {
              url: urlBase + "/SubordinateRanks/:id/teamMemberss/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#create
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SubordinateRanks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#createMany
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SubordinateRanks",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#upsert
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SubordinateRanks",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#exists
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SubordinateRanks/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#findById
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SubordinateRanks/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#find
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SubordinateRanks",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#findOne
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SubordinateRanks/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#updateAll
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SubordinateRanks/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#deleteById
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SubordinateRanks/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#count
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SubordinateRanks/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#prototype$updateAttributes
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SubordinateRanks/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#createChangeStream
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SubordinateRanks/change-stream",
              method: "POST",
            },

            // INTERNAL. Use TeamMembers.subordinateRanks() instead.
            "::get::TeamMembers::subordinateRanks": {
              url: urlBase + "/TeamMembers/:id/subordinateRanks",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#updateOrCreate
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#update
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#destroyById
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#removeById
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubordinateRanks` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SubordinateRanks#modelName
        * @propertyOf lbServices.SubordinateRanks
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SubordinateRanks`.
        */
        R.modelName = "SubordinateRanks";

    /**
     * @ngdoc object
     * @name lbServices.SubordinateRanks.teamMemberss
     * @header lbServices.SubordinateRanks.teamMemberss
     * @object
     * @description
     *
     * The object `SubordinateRanks.teamMemberss` groups methods
     * manipulating `TeamMembers` instances related to `SubordinateRanks`.
     *
     * Call {@link lbServices.SubordinateRanks#teamMemberss SubordinateRanks.teamMemberss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks#teamMemberss
             * @methodOf lbServices.SubordinateRanks
             *
             * @description
             *
             * Queries teamMemberss of SubordinateRanks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::get::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks.teamMemberss#count
             * @methodOf lbServices.SubordinateRanks.teamMemberss
             *
             * @description
             *
             * Counts teamMemberss of SubordinateRanks.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teamMemberss.count = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::count::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks.teamMemberss#create
             * @methodOf lbServices.SubordinateRanks.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.create = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::create::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks.teamMemberss#createMany
             * @methodOf lbServices.SubordinateRanks.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.createMany = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::createMany::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks.teamMemberss#destroyAll
             * @methodOf lbServices.SubordinateRanks.teamMemberss
             *
             * @description
             *
             * Deletes all teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyAll = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::delete::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks.teamMemberss#destroyById
             * @methodOf lbServices.SubordinateRanks.teamMemberss
             *
             * @description
             *
             * Delete a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::destroyById::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks.teamMemberss#findById
             * @methodOf lbServices.SubordinateRanks.teamMemberss
             *
             * @description
             *
             * Find a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.findById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::findById::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubordinateRanks.teamMemberss#updateById
             * @methodOf lbServices.SubordinateRanks.teamMemberss
             *
             * @description
             *
             * Update a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.updateById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::updateById::SubordinateRanks::teamMemberss"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.TeamPosition
 * @header lbServices.TeamPosition
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `TeamPosition` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "TeamPosition",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/TeamPositions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use TeamPosition.teamMemberss.findById() instead.
            "prototype$__findById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TeamPositions/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.destroyById() instead.
            "prototype$__destroyById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TeamPositions/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.updateById() instead.
            "prototype$__updateById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/TeamPositions/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use TeamPosition.teamMemberss() instead.
            "prototype$__get__teamMemberss": {
              isArray: true,
              url: urlBase + "/TeamPositions/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.create() instead.
            "prototype$__create__teamMemberss": {
              url: urlBase + "/TeamPositions/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.destroyAll() instead.
            "prototype$__delete__teamMemberss": {
              url: urlBase + "/TeamPositions/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use TeamPosition.teamMemberss.count() instead.
            "prototype$__count__teamMemberss": {
              url: urlBase + "/TeamPositions/:id/teamMemberss/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#create
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/TeamPositions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#createMany
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/TeamPositions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#upsert
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/TeamPositions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#exists
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/TeamPositions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#findById
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/TeamPositions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#find
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/TeamPositions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#findOne
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/TeamPositions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#updateAll
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/TeamPositions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#deleteById
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/TeamPositions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#count
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/TeamPositions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#prototype$updateAttributes
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/TeamPositions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#createChangeStream
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/TeamPositions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use TeamMembers.teamPosition() instead.
            "::get::TeamMembers::teamPosition": {
              url: urlBase + "/TeamMembers/:id/teamPosition",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#updateOrCreate
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#update
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#destroyById
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#removeById
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamPosition` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.TeamPosition#modelName
        * @propertyOf lbServices.TeamPosition
        * @description
        * The name of the model represented by this $resource,
        * i.e. `TeamPosition`.
        */
        R.modelName = "TeamPosition";

    /**
     * @ngdoc object
     * @name lbServices.TeamPosition.teamMemberss
     * @header lbServices.TeamPosition.teamMemberss
     * @object
     * @description
     *
     * The object `TeamPosition.teamMemberss` groups methods
     * manipulating `TeamMembers` instances related to `TeamPosition`.
     *
     * Call {@link lbServices.TeamPosition#teamMemberss TeamPosition.teamMemberss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.TeamPosition#teamMemberss
             * @methodOf lbServices.TeamPosition
             *
             * @description
             *
             * Queries teamMemberss of TeamPosition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::get::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition.teamMemberss#count
             * @methodOf lbServices.TeamPosition.teamMemberss
             *
             * @description
             *
             * Counts teamMemberss of TeamPosition.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teamMemberss.count = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::count::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition.teamMemberss#create
             * @methodOf lbServices.TeamPosition.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.create = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::create::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition.teamMemberss#createMany
             * @methodOf lbServices.TeamPosition.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.createMany = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::createMany::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition.teamMemberss#destroyAll
             * @methodOf lbServices.TeamPosition.teamMemberss
             *
             * @description
             *
             * Deletes all teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyAll = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::delete::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition.teamMemberss#destroyById
             * @methodOf lbServices.TeamPosition.teamMemberss
             *
             * @description
             *
             * Delete a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::destroyById::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition.teamMemberss#findById
             * @methodOf lbServices.TeamPosition.teamMemberss
             *
             * @description
             *
             * Find a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.findById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::findById::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeamPosition.teamMemberss#updateById
             * @methodOf lbServices.TeamPosition.teamMemberss
             *
             * @description
             *
             * Update a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.updateById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::updateById::TeamPosition::teamMemberss"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ResponsibilitySection
 * @header lbServices.ResponsibilitySection
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ResponsibilitySection` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ResponsibilitySection",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ResponsibilitySections/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ResponsibilitySection.teamMemberss.findById() instead.
            "prototype$__findById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/:fk",
              method: "GET",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.destroyById() instead.
            "prototype$__destroyById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.updateById() instead.
            "prototype$__updateById__teamMemberss": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss() instead.
            "prototype$__get__teamMemberss": {
              isArray: true,
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss",
              method: "GET",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.create() instead.
            "prototype$__create__teamMemberss": {
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss",
              method: "POST",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.destroyAll() instead.
            "prototype$__delete__teamMemberss": {
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss",
              method: "DELETE",
            },

            // INTERNAL. Use ResponsibilitySection.teamMemberss.count() instead.
            "prototype$__count__teamMemberss": {
              url: urlBase + "/ResponsibilitySections/:id/teamMemberss/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#create
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ResponsibilitySections",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#createMany
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ResponsibilitySections",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#upsert
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ResponsibilitySections",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#exists
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ResponsibilitySections/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#findById
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ResponsibilitySections/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#find
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ResponsibilitySections",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#findOne
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ResponsibilitySections/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#updateAll
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ResponsibilitySections/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#deleteById
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ResponsibilitySections/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#count
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ResponsibilitySections/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#prototype$updateAttributes
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ResponsibilitySections/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#createChangeStream
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ResponsibilitySections/change-stream",
              method: "POST",
            },

            // INTERNAL. Use TeamMembers.responsibilitySection() instead.
            "::get::TeamMembers::responsibilitySection": {
              url: urlBase + "/TeamMembers/:id/responsibilitySection",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#updateOrCreate
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#update
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#destroyById
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#removeById
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ResponsibilitySection` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ResponsibilitySection#modelName
        * @propertyOf lbServices.ResponsibilitySection
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ResponsibilitySection`.
        */
        R.modelName = "ResponsibilitySection";

    /**
     * @ngdoc object
     * @name lbServices.ResponsibilitySection.teamMemberss
     * @header lbServices.ResponsibilitySection.teamMemberss
     * @object
     * @description
     *
     * The object `ResponsibilitySection.teamMemberss` groups methods
     * manipulating `TeamMembers` instances related to `ResponsibilitySection`.
     *
     * Call {@link lbServices.ResponsibilitySection#teamMemberss ResponsibilitySection.teamMemberss()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection#teamMemberss
             * @methodOf lbServices.ResponsibilitySection
             *
             * @description
             *
             * Queries teamMemberss of ResponsibilitySection.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::get::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection.teamMemberss#count
             * @methodOf lbServices.ResponsibilitySection.teamMemberss
             *
             * @description
             *
             * Counts teamMemberss of ResponsibilitySection.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teamMemberss.count = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::count::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection.teamMemberss#create
             * @methodOf lbServices.ResponsibilitySection.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.create = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::create::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection.teamMemberss#createMany
             * @methodOf lbServices.ResponsibilitySection.teamMemberss
             *
             * @description
             *
             * Creates a new instance in teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.createMany = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::createMany::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection.teamMemberss#destroyAll
             * @methodOf lbServices.ResponsibilitySection.teamMemberss
             *
             * @description
             *
             * Deletes all teamMemberss of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyAll = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::delete::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection.teamMemberss#destroyById
             * @methodOf lbServices.ResponsibilitySection.teamMemberss
             *
             * @description
             *
             * Delete a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teamMemberss.destroyById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::destroyById::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection.teamMemberss#findById
             * @methodOf lbServices.ResponsibilitySection.teamMemberss
             *
             * @description
             *
             * Find a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.findById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::findById::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ResponsibilitySection.teamMemberss#updateById
             * @methodOf lbServices.ResponsibilitySection.teamMemberss
             *
             * @description
             *
             * Update a related item by id for teamMemberss.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for teamMemberss
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeamMembers` object.)
             * </em>
             */
        R.teamMemberss.updateById = function() {
          var TargetResource = $injector.get("TeamMembers");
          var action = TargetResource["::updateById::ResponsibilitySection::teamMemberss"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RouteMapInformation
 * @header lbServices.RouteMapInformation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RouteMapInformation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RouteMapInformation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RouteMapInformations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RouteMapInformation.rodes() instead.
            "prototype$__get__rodes": {
              url: urlBase + "/RouteMapInformations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use RouteMapInformation.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/RouteMapInformations/:id/affiliatedInstitution",
              method: "GET",
            },

            // INTERNAL. Use RouteMapInformation.alignment() instead.
            "prototype$__get__alignment": {
              url: urlBase + "/RouteMapInformations/:id/alignment",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#create
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RouteMapInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#createMany
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RouteMapInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#upsert
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RouteMapInformations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#exists
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RouteMapInformations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#findById
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RouteMapInformations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#find
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RouteMapInformations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#findOne
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RouteMapInformations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#updateAll
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RouteMapInformations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#deleteById
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RouteMapInformations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#count
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RouteMapInformations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#prototype$updateAttributes
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RouteMapInformations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#createChangeStream
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RouteMapInformations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#updateOrCreate
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#update
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#destroyById
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#removeById
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RouteMapInformation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RouteMapInformation#modelName
        * @propertyOf lbServices.RouteMapInformation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RouteMapInformation`.
        */
        R.modelName = "RouteMapInformation";


            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#rodes
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Fetches belongsTo relation rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::RouteMapInformation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#affiliatedInstitution
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::RouteMapInformation::affiliatedInstitution"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RouteMapInformation#alignment
             * @methodOf lbServices.RouteMapInformation
             *
             * @description
             *
             * Fetches belongsTo relation alignment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Alignment` object.)
             * </em>
             */
        R.alignment = function() {
          var TargetResource = $injector.get("Alignment");
          var action = TargetResource["::get::RouteMapInformation::alignment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AdministrativeAreaMapInformation
 * @header lbServices.AdministrativeAreaMapInformation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AdministrativeAreaMapInformation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AdministrativeAreaMapInformation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AdministrativeAreaMapInformations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AdministrativeAreaMapInformation.affiliatedInstitution() instead.
            "prototype$__get__affiliatedInstitution": {
              url: urlBase + "/AdministrativeAreaMapInformations/:id/affiliatedInstitution",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#create
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AdministrativeAreaMapInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#createMany
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AdministrativeAreaMapInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#upsert
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AdministrativeAreaMapInformations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#exists
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AdministrativeAreaMapInformations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#findById
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AdministrativeAreaMapInformations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#find
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AdministrativeAreaMapInformations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#findOne
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AdministrativeAreaMapInformations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#updateAll
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AdministrativeAreaMapInformations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#deleteById
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AdministrativeAreaMapInformations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#count
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AdministrativeAreaMapInformations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#prototype$updateAttributes
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AdministrativeAreaMapInformations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#createChangeStream
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AdministrativeAreaMapInformations/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#updateOrCreate
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#update
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#destroyById
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#removeById
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AdministrativeAreaMapInformation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AdministrativeAreaMapInformation#modelName
        * @propertyOf lbServices.AdministrativeAreaMapInformation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AdministrativeAreaMapInformation`.
        */
        R.modelName = "AdministrativeAreaMapInformation";


            /**
             * @ngdoc method
             * @name lbServices.AdministrativeAreaMapInformation#affiliatedInstitution
             * @methodOf lbServices.AdministrativeAreaMapInformation
             *
             * @description
             *
             * Fetches belongsTo relation affiliatedInstitution.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AffiliatedInstitution` object.)
             * </em>
             */
        R.affiliatedInstitution = function() {
          var TargetResource = $injector.get("AffiliatedInstitution");
          var action = TargetResource["::get::AdministrativeAreaMapInformation::affiliatedInstitution"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
