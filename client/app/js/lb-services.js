// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "http://localhost:3000/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.AccessToken
 * @header lbServices.AccessToken
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AccessToken` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AccessToken",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/accessTokens/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AccessToken.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/accessTokens/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#create
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#createMany
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#upsert
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/accessTokens",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#exists
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/accessTokens/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#findById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/accessTokens/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#find
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#findOne
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/accessTokens/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#updateAll
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/accessTokens/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#deleteById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/accessTokens/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#count
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#prototype$updateAttributes
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AccessToken id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/accessTokens/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#createChangeStream
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/accessTokens/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.findById() instead.
            "::findById::user::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.destroyById() instead.
            "::destroyById::user::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.updateById() instead.
            "::updateById::user::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.accessTokens() instead.
            "::get::user::accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.create() instead.
            "::create::user::accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.createMany() instead.
            "::createMany::user::accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.destroyAll() instead.
            "::delete::user::accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.count() instead.
            "::count::user::accessTokens": {
              url: urlBase + "/users/:id/accessTokens/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AccessToken#updateOrCreate
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#update
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#destroyById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#removeById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AccessToken#modelName
        * @propertyOf lbServices.AccessToken
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AccessToken`.
        */
        R.modelName = "AccessToken";


            /**
             * @ngdoc method
             * @name lbServices.AccessToken#user
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - AccessToken id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::accessToken::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * **Details**
 *
 * Map principals to roles
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RoleMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RoleMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RoleMapping.role() instead.
            "prototype$__get__role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#create
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createMany
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsert
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RoleMappings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#exists
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RoleMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RoleMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#find
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findOne
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RoleMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAll
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RoleMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#deleteById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RoleMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#count
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RoleMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$updateAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RoleMappings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createChangeStream
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RoleMappings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.findById() instead.
            "::findById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "::destroyById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "::updateById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "::get::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "::create::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.createMany() instead.
            "::createMany::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "::delete::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "::count::Role::principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#update
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#destroyById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#removeById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RoleMapping#modelName
        * @propertyOf lbServices.RoleMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RoleMapping`.
        */
        R.modelName = "RoleMapping";


            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#role
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Role",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Roles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Role.principals.findById() instead.
            "prototype$__findById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "prototype$__destroyById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "prototype$__updateById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "prototype$__get__principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "prototype$__create__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "prototype$__delete__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "prototype$__count__principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#create
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createMany
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#upsert
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Roles",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#exists
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Roles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Roles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#find
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findOne
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Roles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#updateAll
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Roles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#deleteById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Roles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#count
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#prototype$updateAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Roles/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createChangeStream
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Roles/change-stream",
              method: "POST",
            },

            // INTERNAL. Use RoleMapping.role() instead.
            "::get::RoleMapping::role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            // INTERNAL. Use User.roles.findById() instead.
            "::findById::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roles.destroyById() instead.
            "::destroyById::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.updateById() instead.
            "::updateById::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.link() instead.
            "::link::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.unlink() instead.
            "::unlink::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.exists() instead.
            "::exists::user::roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.roles() instead.
            "::get::user::roles": {
              isArray: true,
              url: urlBase + "/users/:id/roles",
              method: "GET",
            },

            // INTERNAL. Use User.roles.create() instead.
            "::create::user::roles": {
              url: urlBase + "/users/:id/roles",
              method: "POST",
            },

            // INTERNAL. Use User.roles.createMany() instead.
            "::createMany::user::roles": {
              isArray: true,
              url: urlBase + "/users/:id/roles",
              method: "POST",
            },

            // INTERNAL. Use User.roles.destroyAll() instead.
            "::delete::user::roles": {
              url: urlBase + "/users/:id/roles",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.count() instead.
            "::count::user::roles": {
              url: urlBase + "/users/:id/roles/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Role#updateOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Role#update
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Role#destroyById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#removeById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Role#modelName
        * @propertyOf lbServices.Role
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Role`.
        */
        R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Role#principals
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Queries principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#count
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Counts principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#create
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#createMany
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyAll
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Deletes all principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Delete a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#findById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Find a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#updateById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Update a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserCredential
 * @header lbServices.UserCredential
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserCredential` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserCredential",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/userCredentials/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserCredential.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/userCredentials/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#create
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/userCredentials",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#createMany
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/userCredentials",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#upsert
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/userCredentials",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#exists
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/userCredentials/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#findById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/userCredentials/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#find
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/userCredentials",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#findOne
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/userCredentials/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#updateAll
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/userCredentials/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#deleteById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/userCredentials/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#count
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/userCredentials/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#prototype$updateAttributes
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserCredential id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/userCredentials/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#createChangeStream
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/userCredentials/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.findById() instead.
            "::findById::user::credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.destroyById() instead.
            "::destroyById::user::credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.updateById() instead.
            "::updateById::user::credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.credentials() instead.
            "::get::user::credentials": {
              isArray: true,
              url: urlBase + "/users/:id/credentials",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.create() instead.
            "::create::user::credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.createMany() instead.
            "::createMany::user::credentials": {
              isArray: true,
              url: urlBase + "/users/:id/credentials",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.destroyAll() instead.
            "::delete::user::credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.count() instead.
            "::count::user::credentials": {
              url: urlBase + "/users/:id/credentials/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserCredential#updateOrCreate
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#update
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#destroyById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserCredential#removeById
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.UserCredential#modelName
        * @propertyOf lbServices.UserCredential
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserCredential`.
        */
        R.modelName = "UserCredential";


            /**
             * @ngdoc method
             * @name lbServices.UserCredential#user
             * @methodOf lbServices.UserCredential
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserCredential id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::userCredential::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.UserIdentity
 * @header lbServices.UserIdentity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserIdentity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "UserIdentity",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/userIdentities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use UserIdentity.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/userIdentities/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#create
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/userIdentities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#createMany
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/userIdentities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#upsert
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/userIdentities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#exists
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/userIdentities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#findById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/userIdentities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#find
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/userIdentities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#findOne
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/userIdentities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#updateAll
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/userIdentities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#deleteById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/userIdentities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#count
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/userIdentities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#prototype$updateAttributes
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserIdentity id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/userIdentities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#createChangeStream
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/userIdentities/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.identities.findById() instead.
            "::findById::user::identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.identities.destroyById() instead.
            "::destroyById::user::identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.updateById() instead.
            "::updateById::user::identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.identities() instead.
            "::get::user::identities": {
              isArray: true,
              url: urlBase + "/users/:id/identities",
              method: "GET",
            },

            // INTERNAL. Use User.identities.create() instead.
            "::create::user::identities": {
              url: urlBase + "/users/:id/identities",
              method: "POST",
            },

            // INTERNAL. Use User.identities.createMany() instead.
            "::createMany::user::identities": {
              isArray: true,
              url: urlBase + "/users/:id/identities",
              method: "POST",
            },

            // INTERNAL. Use User.identities.destroyAll() instead.
            "::delete::user::identities": {
              url: urlBase + "/users/:id/identities",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.count() instead.
            "::count::user::identities": {
              url: urlBase + "/users/:id/identities/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#updateOrCreate
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#update
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#destroyById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#removeById
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.UserIdentity#modelName
        * @propertyOf lbServices.UserIdentity
        * @description
        * The name of the model represented by this $resource,
        * i.e. `UserIdentity`.
        */
        R.modelName = "UserIdentity";


            /**
             * @ngdoc method
             * @name lbServices.UserIdentity#user
             * @methodOf lbServices.UserIdentity
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - UserIdentity id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::userIdentity::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Setting
 * @header lbServices.Setting
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Setting` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Setting",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/settings/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Setting#create
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/settings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#createMany
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/settings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#upsert
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/settings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#exists
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/settings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#findById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/settings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#find
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/settings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#findOne
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/settings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#updateAll
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/settings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#deleteById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/settings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#count
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/settings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#prototype$updateAttributes
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/settings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#createChangeStream
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/settings/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Setting#updateOrCreate
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#update
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#destroyById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#removeById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Setting#modelName
        * @propertyOf lbServices.Setting
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Setting`.
        */
        R.modelName = "Setting";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AuthProvider
 * @header lbServices.AuthProvider
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AuthProvider` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AuthProvider",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AuthProviders/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#create
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AuthProviders",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#createMany
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AuthProviders",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#upsert
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AuthProviders",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#exists
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AuthProviders/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#findById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AuthProviders/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#find
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AuthProviders",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#findOne
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AuthProviders/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#updateAll
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AuthProviders/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#deleteById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AuthProviders/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#count
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AuthProviders/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#prototype$updateAttributes
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AuthProviders/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#createChangeStream
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AuthProviders/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#updateOrCreate
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#update
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#destroyById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AuthProvider#removeById
             * @methodOf lbServices.AuthProvider
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AuthProvider` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AuthProvider#modelName
        * @propertyOf lbServices.AuthProvider
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AuthProvider`.
        */
        R.modelName = "AuthProvider";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/users/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use User.accessTokens.findById() instead.
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.destroyById() instead.
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.updateById() instead.
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.identities.findById() instead.
            "prototype$__findById__identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.identities.destroyById() instead.
            "prototype$__destroyById__identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.updateById() instead.
            "prototype$__updateById__identities": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/identities/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.credentials.findById() instead.
            "prototype$__findById__credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.destroyById() instead.
            "prototype$__destroyById__credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.updateById() instead.
            "prototype$__updateById__credentials": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/credentials/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.findById() instead.
            "prototype$__findById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roles.destroyById() instead.
            "prototype$__destroyById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.updateById() instead.
            "prototype$__updateById__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.link() instead.
            "prototype$__link__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roles.unlink() instead.
            "prototype$__unlink__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.exists() instead.
            "prototype$__exists__roles": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roles/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use User.accessTokens() instead.
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.create() instead.
            "prototype$__create__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.destroyAll() instead.
            "prototype$__delete__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.count() instead.
            "prototype$__count__accessTokens": {
              url: urlBase + "/users/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use User.identities() instead.
            "prototype$__get__identities": {
              isArray: true,
              url: urlBase + "/users/:id/identities",
              method: "GET",
            },

            // INTERNAL. Use User.identities.create() instead.
            "prototype$__create__identities": {
              url: urlBase + "/users/:id/identities",
              method: "POST",
            },

            // INTERNAL. Use User.identities.destroyAll() instead.
            "prototype$__delete__identities": {
              url: urlBase + "/users/:id/identities",
              method: "DELETE",
            },

            // INTERNAL. Use User.identities.count() instead.
            "prototype$__count__identities": {
              url: urlBase + "/users/:id/identities/count",
              method: "GET",
            },

            // INTERNAL. Use User.credentials() instead.
            "prototype$__get__credentials": {
              isArray: true,
              url: urlBase + "/users/:id/credentials",
              method: "GET",
            },

            // INTERNAL. Use User.credentials.create() instead.
            "prototype$__create__credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "POST",
            },

            // INTERNAL. Use User.credentials.destroyAll() instead.
            "prototype$__delete__credentials": {
              url: urlBase + "/users/:id/credentials",
              method: "DELETE",
            },

            // INTERNAL. Use User.credentials.count() instead.
            "prototype$__count__credentials": {
              url: urlBase + "/users/:id/credentials/count",
              method: "GET",
            },

            // INTERNAL. Use User.roles() instead.
            "prototype$__get__roles": {
              isArray: true,
              url: urlBase + "/users/:id/roles",
              method: "GET",
            },

            // INTERNAL. Use User.roles.create() instead.
            "prototype$__create__roles": {
              url: urlBase + "/users/:id/roles",
              method: "POST",
            },

            // INTERNAL. Use User.roles.destroyAll() instead.
            "prototype$__delete__roles": {
              url: urlBase + "/users/:id/roles",
              method: "DELETE",
            },

            // INTERNAL. Use User.roles.count() instead.
            "prototype$__count__roles": {
              url: urlBase + "/users/:id/roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/users",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/users/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/users/reset",
              method: "POST",
            },

            // INTERNAL. Use AccessToken.user() instead.
            "::get::accessToken::user": {
              url: urlBase + "/accessTokens/:id/user",
              method: "GET",
            },

            // INTERNAL. Use UserCredential.user() instead.
            "::get::userCredential::user": {
              url: urlBase + "/userCredentials/:id/user",
              method: "GET",
            },

            // INTERNAL. Use UserIdentity.user() instead.
            "::get::userIdentity::user": {
              url: urlBase + "/userIdentities/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";

    /**
     * @ngdoc object
     * @name lbServices.User.accessTokens
     * @header lbServices.User.accessTokens
     * @object
     * @description
     *
     * The object `User.accessTokens` groups methods
     * manipulating `AccessToken` instances related to `User`.
     *
     * Call {@link lbServices.User#accessTokens User.accessTokens()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::get::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#count
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Counts accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accessTokens.count = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::count::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#create
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.create = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::create::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#createMany
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.createMany = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::createMany::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#destroyAll
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessTokens.destroyAll = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::delete::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#destroyById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessTokens.destroyById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::destroyById::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#findById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.findById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::findById::user::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#updateById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.updateById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::updateById::user::accessTokens"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.identities
     * @header lbServices.User.identities
     * @object
     * @description
     *
     * The object `User.identities` groups methods
     * manipulating `UserIdentity` instances related to `User`.
     *
     * Call {@link lbServices.User#identities User.identities()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#identities
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries identities of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::get::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#count
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Counts identities of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.identities.count = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::count::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#create
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Creates a new instance in identities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.create = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::create::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#createMany
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Creates a new instance in identities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.createMany = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::createMany::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#destroyAll
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Deletes all identities of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.identities.destroyAll = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::delete::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#destroyById
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Delete a related item by id for identities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for identities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.identities.destroyById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::destroyById::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#findById
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Find a related item by id for identities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for identities
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.findById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::findById::user::identities"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.identities#updateById
             * @methodOf lbServices.User.identities
             *
             * @description
             *
             * Update a related item by id for identities.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for identities
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserIdentity` object.)
             * </em>
             */
        R.identities.updateById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::updateById::user::identities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.credentials
     * @header lbServices.User.credentials
     * @object
     * @description
     *
     * The object `User.credentials` groups methods
     * manipulating `UserCredential` instances related to `User`.
     *
     * Call {@link lbServices.User#credentials User.credentials()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#credentials
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries credentials of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::get::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#count
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Counts credentials of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.credentials.count = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::count::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#create
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Creates a new instance in credentials of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.create = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::create::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#createMany
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Creates a new instance in credentials of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.createMany = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::createMany::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#destroyAll
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Deletes all credentials of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.credentials.destroyAll = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::delete::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#destroyById
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Delete a related item by id for credentials.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for credentials
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.credentials.destroyById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::destroyById::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#findById
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Find a related item by id for credentials.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for credentials
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.findById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::findById::user::credentials"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.credentials#updateById
             * @methodOf lbServices.User.credentials
             *
             * @description
             *
             * Update a related item by id for credentials.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for credentials
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `UserCredential` object.)
             * </em>
             */
        R.credentials.updateById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::updateById::user::credentials"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.roles
     * @header lbServices.User.roles
     * @object
     * @description
     *
     * The object `User.roles` groups methods
     * manipulating `Role` instances related to `User`.
     *
     * Call {@link lbServices.User#roles User.roles()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#roles
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries roles of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#count
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Counts roles of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.roles.count = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::count::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#create
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Creates a new instance in roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.create = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::create::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#createMany
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Creates a new instance in roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.createMany = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::createMany::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#destroyAll
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Deletes all roles of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roles.destroyAll = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::delete::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#destroyById
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Delete a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roles.destroyById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::destroyById::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#exists
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Check the existence of roles relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.exists = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::exists::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#findById
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Find a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.findById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::findById::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#link
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Add a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.link = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::link::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#unlink
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Remove the roles relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roles.unlink = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::unlink::user::roles"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roles#updateById
             * @methodOf lbServices.User.roles
             *
             * @description
             *
             * Update a related item by id for roles.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for roles
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.roles.updateById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::updateById::user::roles"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Meta
 * @header lbServices.Meta
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Meta` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Meta",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Meta/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Meta#getModels
             * @methodOf lbServices.Meta
             *
             * @description
             *
             * Get all Models
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Meta` object.)
             * </em>
             */
            "getModels": {
              isArray: true,
              url: urlBase + "/Meta",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Meta#getModelById
             * @methodOf lbServices.Meta
             *
             * @description
             *
             * Get a Model by name
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `name` – `{*}` - Model name
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Meta` object.)
             * </em>
             */
            "getModelById": {
              url: urlBase + "/Meta/:name",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Meta#modelName
        * @propertyOf lbServices.Meta
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Meta`.
        */
        R.modelName = "Meta";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Rode
 * @header lbServices.Rode
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Rode` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Rode",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/rodes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Rode.aPropagandaPoints.findById() instead.
            "prototype$__findById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyById() instead.
            "prototype$__destroyById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.updateById() instead.
            "prototype$__updateById__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.link() instead.
            "prototype$__link__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.unlink() instead.
            "prototype$__unlink__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.exists() instead.
            "prototype$__exists__aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.baseStations.findById() instead.
            "prototype$__findById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.destroyById() instead.
            "prototype$__destroyById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.updateById() instead.
            "prototype$__updateById__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.link() instead.
            "prototype$__link__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.unlink() instead.
            "prototype$__unlink__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.exists() instead.
            "prototype$__exists__baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.bridges.findById() instead.
            "prototype$__findById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.destroyById() instead.
            "prototype$__destroyById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.updateById() instead.
            "prototype$__updateById__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.link() instead.
            "prototype$__link__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.unlink() instead.
            "prototype$__unlink__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.exists() instead.
            "prototype$__exists__bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.findById() instead.
            "prototype$__findById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyById() instead.
            "prototype$__destroyById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.updateById() instead.
            "prototype$__updateById__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.link() instead.
            "prototype$__link__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.unlink() instead.
            "prototype$__unlink__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.exists() instead.
            "prototype$__exists__broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.crossIronBridges.findById() instead.
            "prototype$__findById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyById() instead.
            "prototype$__destroyById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.updateById() instead.
            "prototype$__updateById__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.link() instead.
            "prototype$__link__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.unlink() instead.
            "prototype$__unlink__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.exists() instead.
            "prototype$__exists__crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.culverts.findById() instead.
            "prototype$__findById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.destroyById() instead.
            "prototype$__destroyById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.updateById() instead.
            "prototype$__updateById__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.link() instead.
            "prototype$__link__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.unlink() instead.
            "prototype$__unlink__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.exists() instead.
            "prototype$__exists__culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.findById() instead.
            "prototype$__findById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyById() instead.
            "prototype$__destroyById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.updateById() instead.
            "prototype$__updateById__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.link() instead.
            "prototype$__link__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.unlink() instead.
            "prototype$__unlink__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.exists() instead.
            "prototype$__exists__hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "HEAD",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__findById__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__findById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__destroyById__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__updateById__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__updateById__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__link__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Add a related item by id for fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__link__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/rel/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__unlink__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Remove the fenceInfos relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__unlink__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/rel/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__exists__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Check the existence of fenceInfos relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for fenceInfos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__exists__fenceInfos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/fenceInfos/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.keyPlaces.findById() instead.
            "prototype$__findById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyById() instead.
            "prototype$__destroyById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.updateById() instead.
            "prototype$__updateById__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.link() instead.
            "prototype$__link__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.unlink() instead.
            "prototype$__unlink__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.exists() instead.
            "prototype$__exists__keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.levelCrossings.findById() instead.
            "prototype$__findById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyById() instead.
            "prototype$__destroyById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.updateById() instead.
            "prototype$__updateById__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.link() instead.
            "prototype$__link__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.unlink() instead.
            "prototype$__unlink__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.exists() instead.
            "prototype$__exists__levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.servicePorts.findById() instead.
            "prototype$__findById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.destroyById() instead.
            "prototype$__destroyById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.updateById() instead.
            "prototype$__updateById__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.link() instead.
            "prototype$__link__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.unlink() instead.
            "prototype$__unlink__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.exists() instead.
            "prototype$__exists__servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.stations.findById() instead.
            "prototype$__findById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.destroyById() instead.
            "prototype$__destroyById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.updateById() instead.
            "prototype$__updateById__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.link() instead.
            "prototype$__link__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.unlink() instead.
            "prototype$__unlink__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.exists() instead.
            "prototype$__exists__stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.tunnels.findById() instead.
            "prototype$__findById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.destroyById() instead.
            "prototype$__destroyById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.updateById() instead.
            "prototype$__updateById__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.link() instead.
            "prototype$__link__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.unlink() instead.
            "prototype$__unlink__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.exists() instead.
            "prototype$__exists__tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.aPropagandaPoints() instead.
            "prototype$__get__aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.create() instead.
            "prototype$__create__aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyAll() instead.
            "prototype$__delete__aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.count() instead.
            "prototype$__count__aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations() instead.
            "prototype$__get__baseStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/baseStations",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.create() instead.
            "prototype$__create__baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.destroyAll() instead.
            "prototype$__delete__baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.count() instead.
            "prototype$__count__baseStations": {
              url: urlBase + "/rodes/:id/baseStations/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges() instead.
            "prototype$__get__bridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.create() instead.
            "prototype$__create__bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.destroyAll() instead.
            "prototype$__delete__bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.count() instead.
            "prototype$__count__bridges": {
              url: urlBase + "/rodes/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts() instead.
            "prototype$__get__broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.create() instead.
            "prototype$__create__broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyAll() instead.
            "prototype$__delete__broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.count() instead.
            "prototype$__count__broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges() instead.
            "prototype$__get__crossIronBridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.create() instead.
            "prototype$__create__crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyAll() instead.
            "prototype$__delete__crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.count() instead.
            "prototype$__count__crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts() instead.
            "prototype$__get__culverts": {
              isArray: true,
              url: urlBase + "/rodes/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.create() instead.
            "prototype$__create__culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.destroyAll() instead.
            "prototype$__delete__culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.count() instead.
            "prototype$__count__culverts": {
              url: urlBase + "/rodes/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces() instead.
            "prototype$__get__hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.create() instead.
            "prototype$__create__hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyAll() instead.
            "prototype$__delete__hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.count() instead.
            "prototype$__count__hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__get__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries fenceInfos of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__get__fenceInfos": {
              isArray: true,
              url: urlBase + "/rodes/:id/fenceInfos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__create__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Creates a new instance in fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$__create__fenceInfos": {
              url: urlBase + "/rodes/:id/fenceInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__delete__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Deletes all fenceInfos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__fenceInfos": {
              url: urlBase + "/rodes/:id/fenceInfos",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$__count__fenceInfos
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Counts fenceInfos of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__fenceInfos": {
              url: urlBase + "/rodes/:id/fenceInfos/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces() instead.
            "prototype$__get__keyPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.create() instead.
            "prototype$__create__keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyAll() instead.
            "prototype$__delete__keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.count() instead.
            "prototype$__count__keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings() instead.
            "prototype$__get__levelCrossings": {
              isArray: true,
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.create() instead.
            "prototype$__create__levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyAll() instead.
            "prototype$__delete__levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.count() instead.
            "prototype$__count__levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts() instead.
            "prototype$__get__servicePorts": {
              isArray: true,
              url: urlBase + "/rodes/:id/servicePorts",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.create() instead.
            "prototype$__create__servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.destroyAll() instead.
            "prototype$__delete__servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.count() instead.
            "prototype$__count__servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations() instead.
            "prototype$__get__stations": {
              isArray: true,
              url: urlBase + "/rodes/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.create() instead.
            "prototype$__create__stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Rode.stations.destroyAll() instead.
            "prototype$__delete__stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.count() instead.
            "prototype$__count__stations": {
              url: urlBase + "/rodes/:id/stations/count",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels() instead.
            "prototype$__get__tunnels": {
              isArray: true,
              url: urlBase + "/rodes/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.create() instead.
            "prototype$__create__tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.destroyAll() instead.
            "prototype$__delete__tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.count() instead.
            "prototype$__count__tunnels": {
              url: urlBase + "/rodes/:id/tunnels/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#create
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/rodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#createMany
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/rodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#upsert
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/rodes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#exists
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/rodes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#findById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/rodes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#find
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/rodes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#findOne
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/rodes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#updateAll
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/rodes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#deleteById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/rodes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#count
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#prototype$updateAttributes
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/rodes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#createChangeStream
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/rodes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#FuzzyPrecision
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `rodename` – `{string=}` -
             *
             *  - `classification` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/rodes/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#PagingFind
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/rodes/PagingFind",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Rode#fetchRode
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "fetchRode": {
              url: urlBase + "/rodes/fetchRode",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.findById() instead.
            "::findById::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.destroyById() instead.
            "::destroyById::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.updateById() instead.
            "::updateById::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.link() instead.
            "::link::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.unlink() instead.
            "::unlink::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.exists() instead.
            "::exists::Tunnel::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Tunnel.rodes() instead.
            "::get::Tunnel::rodes": {
              isArray: true,
              url: urlBase + "/tunnels/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.create() instead.
            "::create::Tunnel::rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Tunnel.rodes.createMany() instead.
            "::createMany::Tunnel::rodes": {
              isArray: true,
              url: urlBase + "/tunnels/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Tunnel.rodes.destroyAll() instead.
            "::delete::Tunnel::rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.count() instead.
            "::count::Tunnel::rodes": {
              url: urlBase + "/tunnels/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.findById() instead.
            "::findById::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyById() instead.
            "::destroyById::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.updateById() instead.
            "::updateById::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.link() instead.
            "::link::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.unlink() instead.
            "::unlink::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.exists() instead.
            "::exists::LevelCrossing::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use LevelCrossing.rodes() instead.
            "::get::LevelCrossing::rodes": {
              isArray: true,
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.create() instead.
            "::create::LevelCrossing::rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossing.rodes.createMany() instead.
            "::createMany::LevelCrossing::rodes": {
              isArray: true,
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyAll() instead.
            "::delete::LevelCrossing::rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.count() instead.
            "::count::LevelCrossing::rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.findById() instead.
            "::findById::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.destroyById() instead.
            "::destroyById::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.updateById() instead.
            "::updateById::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.link() instead.
            "::link::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.unlink() instead.
            "::unlink::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.exists() instead.
            "::exists::Culvert::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Culvert.rodes() instead.
            "::get::Culvert::rodes": {
              isArray: true,
              url: urlBase + "/Culverts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.create() instead.
            "::create::Culvert::rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Culvert.rodes.createMany() instead.
            "::createMany::Culvert::rodes": {
              isArray: true,
              url: urlBase + "/Culverts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Culvert.rodes.destroyAll() instead.
            "::delete::Culvert::rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.count() instead.
            "::count::Culvert::rodes": {
              url: urlBase + "/Culverts/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.findById() instead.
            "::findById::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.destroyById() instead.
            "::destroyById::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.updateById() instead.
            "::updateById::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.link() instead.
            "::link::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.unlink() instead.
            "::unlink::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.exists() instead.
            "::exists::ServicePort::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ServicePort.rodes() instead.
            "::get::ServicePort::rodes": {
              isArray: true,
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.create() instead.
            "::create::ServicePort::rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use ServicePort.rodes.createMany() instead.
            "::createMany::ServicePort::rodes": {
              isArray: true,
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use ServicePort.rodes.destroyAll() instead.
            "::delete::ServicePort::rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.count() instead.
            "::count::ServicePort::rodes": {
              url: urlBase + "/ServicePorts/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.findById() instead.
            "::findById::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.destroyById() instead.
            "::destroyById::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.updateById() instead.
            "::updateById::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.link() instead.
            "::link::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.unlink() instead.
            "::unlink::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.exists() instead.
            "::exists::BaseStation::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use BaseStation.rodes() instead.
            "::get::BaseStation::rodes": {
              isArray: true,
              url: urlBase + "/BaseStations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.create() instead.
            "::create::BaseStation::rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BaseStation.rodes.createMany() instead.
            "::createMany::BaseStation::rodes": {
              isArray: true,
              url: urlBase + "/BaseStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BaseStation.rodes.destroyAll() instead.
            "::delete::BaseStation::rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.count() instead.
            "::count::BaseStation::rodes": {
              url: urlBase + "/BaseStations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.findById() instead.
            "::findById::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyById() instead.
            "::destroyById::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.updateById() instead.
            "::updateById::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.link() instead.
            "::link::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.unlink() instead.
            "::unlink::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.exists() instead.
            "::exists::KeyPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use KeyPlace.rodes() instead.
            "::get::KeyPlace::rodes": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.create() instead.
            "::create::KeyPlace::rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.rodes.createMany() instead.
            "::createMany::KeyPlace::rodes": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyAll() instead.
            "::delete::KeyPlace::rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.count() instead.
            "::count::KeyPlace::rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.findById() instead.
            "::findById::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyById() instead.
            "::destroyById::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.updateById() instead.
            "::updateById::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.link() instead.
            "::link::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.unlink() instead.
            "::unlink::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.exists() instead.
            "::exists::HiddenDangerPlace::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes() instead.
            "::get::HiddenDangerPlace::rodes": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.create() instead.
            "::create::HiddenDangerPlace::rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.createMany() instead.
            "::createMany::HiddenDangerPlace::rodes": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyAll() instead.
            "::delete::HiddenDangerPlace::rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.count() instead.
            "::count::HiddenDangerPlace::rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.findById() instead.
            "::findById::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyById() instead.
            "::destroyById::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.updateById() instead.
            "::updateById::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.link() instead.
            "::link::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.unlink() instead.
            "::unlink::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.exists() instead.
            "::exists::APropagandaPoint::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use APropagandaPoint.rodes() instead.
            "::get::APropagandaPoint::rodes": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.create() instead.
            "::create::APropagandaPoint::rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.rodes.createMany() instead.
            "::createMany::APropagandaPoint::rodes": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyAll() instead.
            "::delete::APropagandaPoint::rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.count() instead.
            "::count::APropagandaPoint::rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.findById() instead.
            "::findById::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.destroyById() instead.
            "::destroyById::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.updateById() instead.
            "::updateById::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.link() instead.
            "::link::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.unlink() instead.
            "::unlink::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.exists() instead.
            "::exists::Station::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Station.rodes() instead.
            "::get::Station::rodes": {
              isArray: true,
              url: urlBase + "/Stations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.create() instead.
            "::create::Station::rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Station.rodes.createMany() instead.
            "::createMany::Station::rodes": {
              isArray: true,
              url: urlBase + "/Stations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Station.rodes.destroyAll() instead.
            "::delete::Station::rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.count() instead.
            "::count::Station::rodes": {
              url: urlBase + "/Stations/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.findById() instead.
            "::findById::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyById() instead.
            "::destroyById::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.updateById() instead.
            "::updateById::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.link() instead.
            "::link::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.unlink() instead.
            "::unlink::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.exists() instead.
            "::exists::FenceInfo::rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FenceInfo.rodes() instead.
            "::get::FenceInfo::rodes": {
              isArray: true,
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.create() instead.
            "::create::FenceInfo::rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use FenceInfo.rodes.createMany() instead.
            "::createMany::FenceInfo::rodes": {
              isArray: true,
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyAll() instead.
            "::delete::FenceInfo::rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.count() instead.
            "::count::FenceInfo::rodes": {
              url: urlBase + "/FenceInfos/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.rode() instead.
            "::get::RodeContain::rode": {
              url: urlBase + "/RodeContains/:id/rode",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Rode#updateOrCreate
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Rode#update
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Rode#destroyById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Rode#removeById
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Rode#modelName
        * @propertyOf lbServices.Rode
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Rode`.
        */
        R.modelName = "Rode";

    /**
     * @ngdoc object
     * @name lbServices.Rode.aPropagandaPoints
     * @header lbServices.Rode.aPropagandaPoints
     * @object
     * @description
     *
     * The object `Rode.aPropagandaPoints` groups methods
     * manipulating `APropagandaPoint` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#aPropagandaPoints Rode.aPropagandaPoints()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#aPropagandaPoints
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries aPropagandaPoints of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::get::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#count
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Counts aPropagandaPoints of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.aPropagandaPoints.count = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::count::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#create
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Creates a new instance in aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.create = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::create::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#createMany
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Creates a new instance in aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.createMany = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::createMany::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#destroyAll
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Deletes all aPropagandaPoints of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.destroyAll = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::delete::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#destroyById
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Delete a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.destroyById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::destroyById::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#exists
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Check the existence of aPropagandaPoints relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.exists = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::exists::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#findById
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Find a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.findById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::findById::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#link
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Add a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.link = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::link::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#unlink
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Remove the aPropagandaPoints relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPoints.unlink = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::unlink::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.aPropagandaPoints#updateById
             * @methodOf lbServices.Rode.aPropagandaPoints
             *
             * @description
             *
             * Update a related item by id for aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPoints
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints.updateById = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::updateById::Rode::aPropagandaPoints"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.baseStations
     * @header lbServices.Rode.baseStations
     * @object
     * @description
     *
     * The object `Rode.baseStations` groups methods
     * manipulating `BaseStation` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#baseStations Rode.baseStations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#baseStations
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries baseStations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::get::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#count
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Counts baseStations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.baseStations.count = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::count::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#create
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Creates a new instance in baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.create = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::create::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#createMany
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Creates a new instance in baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.createMany = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::createMany::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#destroyAll
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Deletes all baseStations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.destroyAll = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::delete::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#destroyById
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Delete a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.destroyById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::destroyById::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#exists
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Check the existence of baseStations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.exists = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::exists::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#findById
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Find a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.findById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::findById::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#link
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Add a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.link = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::link::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#unlink
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Remove the baseStations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.baseStations.unlink = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::unlink::Rode::baseStations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.baseStations#updateById
             * @methodOf lbServices.Rode.baseStations
             *
             * @description
             *
             * Update a related item by id for baseStations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for baseStations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStations.updateById = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::updateById::Rode::baseStations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.bridges
     * @header lbServices.Rode.bridges
     * @object
     * @description
     *
     * The object `Rode.bridges` groups methods
     * manipulating `Bridge` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#bridges Rode.bridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#bridges
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries bridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#count
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Counts bridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.bridges.count = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::count::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#create
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.create = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::create::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#createMany
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Creates a new instance in bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.createMany = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::createMany::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#destroyAll
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Deletes all bridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyAll = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::delete::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#destroyById
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Delete a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.destroyById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::destroyById::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#exists
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Check the existence of bridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.exists = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::exists::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#findById
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Find a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.findById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::findById::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#link
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Add a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.link = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::link::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#unlink
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Remove the bridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.bridges.unlink = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::unlink::Rode::bridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.bridges#updateById
             * @methodOf lbServices.Rode.bridges
             *
             * @description
             *
             * Update a related item by id for bridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for bridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridges.updateById = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::updateById::Rode::bridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.broadcastWarningPosts
     * @header lbServices.Rode.broadcastWarningPosts
     * @object
     * @description
     *
     * The object `Rode.broadcastWarningPosts` groups methods
     * manipulating `BroadcastWarningPost` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#broadcastWarningPosts Rode.broadcastWarningPosts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#broadcastWarningPosts
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries broadcastWarningPosts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::get::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#count
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Counts broadcastWarningPosts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.broadcastWarningPosts.count = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::count::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#create
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.create = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::create::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#createMany
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Creates a new instance in broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.createMany = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::createMany::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#destroyAll
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Deletes all broadcastWarningPosts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyAll = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::delete::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#destroyById
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Delete a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.destroyById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::destroyById::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#exists
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Check the existence of broadcastWarningPosts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.exists = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::exists::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#findById
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Find a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.findById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::findById::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#link
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Add a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.link = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::link::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#unlink
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Remove the broadcastWarningPosts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.broadcastWarningPosts.unlink = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::unlink::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.broadcastWarningPosts#updateById
             * @methodOf lbServices.Rode.broadcastWarningPosts
             *
             * @description
             *
             * Update a related item by id for broadcastWarningPosts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for broadcastWarningPosts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPosts.updateById = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::updateById::Rode::broadcastWarningPosts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.crossIronBridges
     * @header lbServices.Rode.crossIronBridges
     * @object
     * @description
     *
     * The object `Rode.crossIronBridges` groups methods
     * manipulating `CrossIronBridge` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#crossIronBridges Rode.crossIronBridges()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#crossIronBridges
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries crossIronBridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::get::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#count
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Counts crossIronBridges of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.crossIronBridges.count = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::count::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#create
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Creates a new instance in crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.create = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::create::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#createMany
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Creates a new instance in crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.createMany = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::createMany::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#destroyAll
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Deletes all crossIronBridges of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.destroyAll = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::delete::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#destroyById
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Delete a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.destroyById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::destroyById::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#exists
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Check the existence of crossIronBridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.exists = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::exists::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#findById
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Find a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.findById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::findById::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#link
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Add a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.link = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::link::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#unlink
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Remove the crossIronBridges relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.crossIronBridges.unlink = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::unlink::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.crossIronBridges#updateById
             * @methodOf lbServices.Rode.crossIronBridges
             *
             * @description
             *
             * Update a related item by id for crossIronBridges.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for crossIronBridges
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridges.updateById = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::updateById::Rode::crossIronBridges"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.culverts
     * @header lbServices.Rode.culverts
     * @object
     * @description
     *
     * The object `Rode.culverts` groups methods
     * manipulating `Culvert` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#culverts Rode.culverts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#culverts
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries culverts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#count
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Counts culverts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.culverts.count = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::count::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#create
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.create = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::create::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#createMany
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Creates a new instance in culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.createMany = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::createMany::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#destroyAll
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Deletes all culverts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyAll = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::delete::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#destroyById
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Delete a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.destroyById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::destroyById::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#exists
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Check the existence of culverts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.exists = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::exists::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#findById
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Find a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.findById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::findById::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#link
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Add a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.link = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::link::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#unlink
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Remove the culverts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.culverts.unlink = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::unlink::Rode::culverts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.culverts#updateById
             * @methodOf lbServices.Rode.culverts
             *
             * @description
             *
             * Update a related item by id for culverts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for culverts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culverts.updateById = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::updateById::Rode::culverts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.hiddenDangerPlaces
     * @header lbServices.Rode.hiddenDangerPlaces
     * @object
     * @description
     *
     * The object `Rode.hiddenDangerPlaces` groups methods
     * manipulating `HiddenDangerPlace` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#hiddenDangerPlaces Rode.hiddenDangerPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#hiddenDangerPlaces
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries hiddenDangerPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#count
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Counts hiddenDangerPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.hiddenDangerPlaces.count = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::count::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#create
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.create = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::create::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#createMany
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Creates a new instance in hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.createMany = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::createMany::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#destroyAll
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Deletes all hiddenDangerPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyAll = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::delete::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#destroyById
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Delete a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.destroyById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::destroyById::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#exists
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Check the existence of hiddenDangerPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.exists = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::exists::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#findById
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Find a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.findById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::findById::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#link
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Add a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.link = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::link::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#unlink
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Remove the hiddenDangerPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.hiddenDangerPlaces.unlink = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::unlink::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.hiddenDangerPlaces#updateById
             * @methodOf lbServices.Rode.hiddenDangerPlaces
             *
             * @description
             *
             * Update a related item by id for hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for hiddenDangerPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces.updateById = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::updateById::Rode::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.keyPlaces
     * @header lbServices.Rode.keyPlaces
     * @object
     * @description
     *
     * The object `Rode.keyPlaces` groups methods
     * manipulating `KeyPlace` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#keyPlaces Rode.keyPlaces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#keyPlaces
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries keyPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#count
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Counts keyPlaces of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPlaces.count = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::count::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#create
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.create = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::create::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#createMany
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Creates a new instance in keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.createMany = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::createMany::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#destroyAll
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Deletes all keyPlaces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyAll = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::delete::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#destroyById
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Delete a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.destroyById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::destroyById::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#exists
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Check the existence of keyPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.exists = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::exists::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#findById
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Find a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.findById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::findById::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#link
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Add a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.link = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::link::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#unlink
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Remove the keyPlaces relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaces.unlink = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::unlink::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.keyPlaces#updateById
             * @methodOf lbServices.Rode.keyPlaces
             *
             * @description
             *
             * Update a related item by id for keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces.updateById = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::updateById::Rode::keyPlaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.levelCrossings
     * @header lbServices.Rode.levelCrossings
     * @object
     * @description
     *
     * The object `Rode.levelCrossings` groups methods
     * manipulating `LevelCrossing` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#levelCrossings Rode.levelCrossings()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#levelCrossings
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries levelCrossings of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::get::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#count
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Counts levelCrossings of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.levelCrossings.count = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::count::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#create
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.create = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::create::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#createMany
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Creates a new instance in levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.createMany = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::createMany::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#destroyAll
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Deletes all levelCrossings of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyAll = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::delete::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#destroyById
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Delete a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.destroyById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::destroyById::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#exists
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Check the existence of levelCrossings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.exists = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::exists::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#findById
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Find a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.findById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::findById::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#link
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Add a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.link = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::link::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#unlink
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Remove the levelCrossings relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.levelCrossings.unlink = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::unlink::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.levelCrossings#updateById
             * @methodOf lbServices.Rode.levelCrossings
             *
             * @description
             *
             * Update a related item by id for levelCrossings.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for levelCrossings
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossings.updateById = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::updateById::Rode::levelCrossings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.servicePorts
     * @header lbServices.Rode.servicePorts
     * @object
     * @description
     *
     * The object `Rode.servicePorts` groups methods
     * manipulating `ServicePort` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#servicePorts Rode.servicePorts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#servicePorts
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries servicePorts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::get::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#count
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Counts servicePorts of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.servicePorts.count = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::count::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#create
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Creates a new instance in servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.create = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::create::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#createMany
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Creates a new instance in servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.createMany = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::createMany::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#destroyAll
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Deletes all servicePorts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.destroyAll = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::delete::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#destroyById
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Delete a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.destroyById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::destroyById::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#exists
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Check the existence of servicePorts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.exists = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::exists::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#findById
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Find a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.findById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::findById::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#link
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Add a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.link = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::link::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#unlink
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Remove the servicePorts relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.servicePorts.unlink = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::unlink::Rode::servicePorts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.servicePorts#updateById
             * @methodOf lbServices.Rode.servicePorts
             *
             * @description
             *
             * Update a related item by id for servicePorts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for servicePorts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePorts.updateById = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::updateById::Rode::servicePorts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.stations
     * @header lbServices.Rode.stations
     * @object
     * @description
     *
     * The object `Rode.stations` groups methods
     * manipulating `Station` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#stations Rode.stations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#stations
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries stations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#count
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Counts stations of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.stations.count = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::count::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#create
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.create = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::create::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#createMany
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Creates a new instance in stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.createMany = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::createMany::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#destroyAll
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Deletes all stations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyAll = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::delete::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#destroyById
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Delete a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.destroyById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::destroyById::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#exists
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Check the existence of stations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.exists = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::exists::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#findById
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Find a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.findById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::findById::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#link
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Add a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.link = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::link::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#unlink
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Remove the stations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.stations.unlink = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::unlink::Rode::stations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.stations#updateById
             * @methodOf lbServices.Rode.stations
             *
             * @description
             *
             * Update a related item by id for stations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for stations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.stations.updateById = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::updateById::Rode::stations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Rode.tunnels
     * @header lbServices.Rode.tunnels
     * @object
     * @description
     *
     * The object `Rode.tunnels` groups methods
     * manipulating `Tunnel` instances related to `Rode`.
     *
     * Call {@link lbServices.Rode#tunnels Rode.tunnels()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Rode#tunnels
             * @methodOf lbServices.Rode
             *
             * @description
             *
             * Queries tunnels of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::get::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#count
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Counts tunnels of Rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tunnels.count = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::count::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#create
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.create = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::create::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#createMany
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Creates a new instance in tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.createMany = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::createMany::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#destroyAll
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Deletes all tunnels of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyAll = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::delete::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#destroyById
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Delete a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.destroyById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::destroyById::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#exists
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Check the existence of tunnels relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.exists = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::exists::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#findById
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Find a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.findById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::findById::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#link
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Add a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.link = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::link::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#unlink
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Remove the tunnels relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tunnels.unlink = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::unlink::Rode::tunnels"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Rode.tunnels#updateById
             * @methodOf lbServices.Rode.tunnels
             *
             * @description
             *
             * Update a related item by id for tunnels.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for tunnels
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnels.updateById = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::updateById::Rode::tunnels"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Bridge
 * @header lbServices.Bridge
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Bridge` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Bridge",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Bridges/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Bridge#create
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Bridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#createMany
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Bridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#upsert
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Bridges",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#exists
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Bridges/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#findById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Bridges/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#find
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Bridges",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#findOne
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Bridges/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#updateAll
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Bridges/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#deleteById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Bridges/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#count
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Bridges/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#prototype$updateAttributes
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Bridges/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#createChangeStream
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Bridges/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#FuzzyPrecision
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `bridgename` – `{string=}` -
             *
             *  - `railwayhighwaypublic` – `{string=}` -
             *
             *  - `guardian` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/Bridges/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Bridge#PagingFind
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Bridges/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.findById() instead.
            "::findById::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.destroyById() instead.
            "::destroyById::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.updateById() instead.
            "::updateById::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.link() instead.
            "::link::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.bridges.unlink() instead.
            "::unlink::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.exists() instead.
            "::exists::Rode::bridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/bridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.bridges() instead.
            "::get::Rode::bridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/bridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.bridges.create() instead.
            "::create::Rode::bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.createMany() instead.
            "::createMany::Rode::bridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/bridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.bridges.destroyAll() instead.
            "::delete::Rode::bridges": {
              url: urlBase + "/rodes/:id/bridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.bridges.count() instead.
            "::count::Rode::bridges": {
              url: urlBase + "/rodes/:id/bridges/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.bridge() instead.
            "::get::RodeContain::bridge": {
              url: urlBase + "/RodeContains/:id/bridge",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Bridge#updateOrCreate
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Bridge#update
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Bridge#destroyById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Bridge#removeById
             * @methodOf lbServices.Bridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Bridge#modelName
        * @propertyOf lbServices.Bridge
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Bridge`.
        */
        R.modelName = "Bridge";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Tunnel
 * @header lbServices.Tunnel
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tunnel` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Tunnel",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/tunnels/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Tunnel.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Tunnel.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/tunnels/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Tunnel.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/tunnels/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Tunnel.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Tunnel.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/tunnels/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Tunnel.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/tunnels/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#create
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/tunnels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#createMany
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/tunnels",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#upsert
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/tunnels",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#exists
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/tunnels/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#findById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/tunnels/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#find
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/tunnels",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#findOne
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/tunnels/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#updateAll
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/tunnels/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#deleteById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/tunnels/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#count
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/tunnels/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#prototype$updateAttributes
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/tunnels/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#createChangeStream
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/tunnels/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#FuzzyPrecision
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `tunnelname` – `{string=}` -
             *
             *  - `guardian ` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/tunnels/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#PagingFind
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/tunnels/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.findById() instead.
            "::findById::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.destroyById() instead.
            "::destroyById::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.updateById() instead.
            "::updateById::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.link() instead.
            "::link::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.tunnels.unlink() instead.
            "::unlink::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.exists() instead.
            "::exists::Rode::tunnels": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/tunnels/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.tunnels() instead.
            "::get::Rode::tunnels": {
              isArray: true,
              url: urlBase + "/rodes/:id/tunnels",
              method: "GET",
            },

            // INTERNAL. Use Rode.tunnels.create() instead.
            "::create::Rode::tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.createMany() instead.
            "::createMany::Rode::tunnels": {
              isArray: true,
              url: urlBase + "/rodes/:id/tunnels",
              method: "POST",
            },

            // INTERNAL. Use Rode.tunnels.destroyAll() instead.
            "::delete::Rode::tunnels": {
              url: urlBase + "/rodes/:id/tunnels",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.tunnels.count() instead.
            "::count::Rode::tunnels": {
              url: urlBase + "/rodes/:id/tunnels/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.tunnel() instead.
            "::get::RodeContain::tunnel": {
              url: urlBase + "/RodeContains/:id/tunnel",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Tunnel#updateOrCreate
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#update
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#destroyById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Tunnel#removeById
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Tunnel#modelName
        * @propertyOf lbServices.Tunnel
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Tunnel`.
        */
        R.modelName = "Tunnel";

    /**
     * @ngdoc object
     * @name lbServices.Tunnel.rodes
     * @header lbServices.Tunnel.rodes
     * @object
     * @description
     *
     * The object `Tunnel.rodes` groups methods
     * manipulating `Rode` instances related to `Tunnel`.
     *
     * Call {@link lbServices.Tunnel#rodes Tunnel.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Tunnel#rodes
             * @methodOf lbServices.Tunnel
             *
             * @description
             *
             * Queries rodes of Tunnel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#count
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Counts rodes of Tunnel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#create
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#createMany
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#destroyAll
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#destroyById
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#exists
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#findById
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#link
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#unlink
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Tunnel::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Tunnel.rodes#updateById
             * @methodOf lbServices.Tunnel.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Tunnel::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LevelCrossing
 * @header lbServices.LevelCrossing
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LevelCrossing` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LevelCrossing",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LevelCrossings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LevelCrossing.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use LevelCrossing.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/LevelCrossings/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use LevelCrossing.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use LevelCrossing.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use LevelCrossing.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use LevelCrossing.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/LevelCrossings/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#create
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LevelCrossings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#createMany
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LevelCrossings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#upsert
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LevelCrossings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#exists
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LevelCrossings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#findById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LevelCrossings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#find
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LevelCrossings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#findOne
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LevelCrossings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#updateAll
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LevelCrossings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#deleteById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LevelCrossings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#count
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LevelCrossings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#prototype$updateAttributes
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LevelCrossings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#createChangeStream
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LevelCrossings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#fuzzyQuery
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `levelcrossname ` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `basestations` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/LevelCrossings/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#PagingFind
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/LevelCrossings/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.findById() instead.
            "::findById::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyById() instead.
            "::destroyById::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.updateById() instead.
            "::updateById::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.link() instead.
            "::link::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.levelCrossings.unlink() instead.
            "::unlink::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.exists() instead.
            "::exists::Rode::levelCrossings": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/levelCrossings/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.levelCrossings() instead.
            "::get::Rode::levelCrossings": {
              isArray: true,
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "GET",
            },

            // INTERNAL. Use Rode.levelCrossings.create() instead.
            "::create::Rode::levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.createMany() instead.
            "::createMany::Rode::levelCrossings": {
              isArray: true,
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "POST",
            },

            // INTERNAL. Use Rode.levelCrossings.destroyAll() instead.
            "::delete::Rode::levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.levelCrossings.count() instead.
            "::count::Rode::levelCrossings": {
              url: urlBase + "/rodes/:id/levelCrossings/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.levelCrossing() instead.
            "::get::RodeContain::levelCrossing": {
              url: urlBase + "/RodeContains/:id/levelCrossing",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#updateOrCreate
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#update
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#destroyById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#removeById
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.LevelCrossing#modelName
        * @propertyOf lbServices.LevelCrossing
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LevelCrossing`.
        */
        R.modelName = "LevelCrossing";

    /**
     * @ngdoc object
     * @name lbServices.LevelCrossing.rodes
     * @header lbServices.LevelCrossing.rodes
     * @object
     * @description
     *
     * The object `LevelCrossing.rodes` groups methods
     * manipulating `Rode` instances related to `LevelCrossing`.
     *
     * Call {@link lbServices.LevelCrossing#rodes LevelCrossing.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing#rodes
             * @methodOf lbServices.LevelCrossing
             *
             * @description
             *
             * Queries rodes of LevelCrossing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#count
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Counts rodes of LevelCrossing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#create
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#createMany
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#destroyAll
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#destroyById
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#exists
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#findById
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#link
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#unlink
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LevelCrossing.rodes#updateById
             * @methodOf lbServices.LevelCrossing.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::LevelCrossing::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Culvert
 * @header lbServices.Culvert
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Culvert` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Culvert",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Culverts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Culvert.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Culvert.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Culverts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Culvert.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/Culverts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Culvert.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Culvert.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/Culverts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Culvert.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/Culverts/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#create
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Culverts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#createMany
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Culverts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#upsert
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Culverts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#exists
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Culverts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#findById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Culverts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#find
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Culverts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#findOne
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Culverts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#updateAll
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Culverts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#deleteById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Culverts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#count
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Culverts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#prototype$updateAttributes
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Culverts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#createChangeStream
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Culverts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#fuzzyQuery
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `culvertname` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             *  - `culvertnumber` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `culverts` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/Culverts/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Culvert#PagingFind
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Culverts/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.findById() instead.
            "::findById::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.destroyById() instead.
            "::destroyById::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.updateById() instead.
            "::updateById::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.link() instead.
            "::link::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.culverts.unlink() instead.
            "::unlink::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.exists() instead.
            "::exists::Rode::culverts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/culverts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.culverts() instead.
            "::get::Rode::culverts": {
              isArray: true,
              url: urlBase + "/rodes/:id/culverts",
              method: "GET",
            },

            // INTERNAL. Use Rode.culverts.create() instead.
            "::create::Rode::culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.createMany() instead.
            "::createMany::Rode::culverts": {
              isArray: true,
              url: urlBase + "/rodes/:id/culverts",
              method: "POST",
            },

            // INTERNAL. Use Rode.culverts.destroyAll() instead.
            "::delete::Rode::culverts": {
              url: urlBase + "/rodes/:id/culverts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.culverts.count() instead.
            "::count::Rode::culverts": {
              url: urlBase + "/rodes/:id/culverts/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.culvert() instead.
            "::get::RodeContain::culvert": {
              url: urlBase + "/RodeContains/:id/culvert",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Culvert#updateOrCreate
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Culvert#update
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Culvert#destroyById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Culvert#removeById
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Culvert#modelName
        * @propertyOf lbServices.Culvert
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Culvert`.
        */
        R.modelName = "Culvert";

    /**
     * @ngdoc object
     * @name lbServices.Culvert.rodes
     * @header lbServices.Culvert.rodes
     * @object
     * @description
     *
     * The object `Culvert.rodes` groups methods
     * manipulating `Rode` instances related to `Culvert`.
     *
     * Call {@link lbServices.Culvert#rodes Culvert.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Culvert#rodes
             * @methodOf lbServices.Culvert
             *
             * @description
             *
             * Queries rodes of Culvert.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#count
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Counts rodes of Culvert.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#create
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#createMany
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#destroyAll
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#destroyById
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#exists
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#findById
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#link
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#unlink
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Culvert::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Culvert.rodes#updateById
             * @methodOf lbServices.Culvert.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Culvert::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.CrossIronBridge
 * @header lbServices.CrossIronBridge
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CrossIronBridge` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CrossIronBridge",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/CrossIronBridges/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#create
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/CrossIronBridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#createMany
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/CrossIronBridges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#upsert
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/CrossIronBridges",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#exists
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/CrossIronBridges/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#findById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/CrossIronBridges/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#find
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/CrossIronBridges",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#findOne
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/CrossIronBridges/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#updateAll
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/CrossIronBridges/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#deleteById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/CrossIronBridges/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#count
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/CrossIronBridges/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#prototype$updateAttributes
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/CrossIronBridges/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#createChangeStream
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/CrossIronBridges/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#fuzzyQuery
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ironbridgename` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `crossironbridges` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/CrossIronBridges/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#PagingFind
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/CrossIronBridges/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.findById() instead.
            "::findById::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyById() instead.
            "::destroyById::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.updateById() instead.
            "::updateById::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.link() instead.
            "::link::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.crossIronBridges.unlink() instead.
            "::unlink::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.exists() instead.
            "::exists::Rode::crossIronBridges": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/crossIronBridges/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.crossIronBridges() instead.
            "::get::Rode::crossIronBridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "GET",
            },

            // INTERNAL. Use Rode.crossIronBridges.create() instead.
            "::create::Rode::crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.createMany() instead.
            "::createMany::Rode::crossIronBridges": {
              isArray: true,
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "POST",
            },

            // INTERNAL. Use Rode.crossIronBridges.destroyAll() instead.
            "::delete::Rode::crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.crossIronBridges.count() instead.
            "::count::Rode::crossIronBridges": {
              url: urlBase + "/rodes/:id/crossIronBridges/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.crossIronBridge() instead.
            "::get::RodeContain::crossIronBridge": {
              url: urlBase + "/RodeContains/:id/crossIronBridge",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#updateOrCreate
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#update
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#destroyById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CrossIronBridge#removeById
             * @methodOf lbServices.CrossIronBridge
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CrossIronBridge#modelName
        * @propertyOf lbServices.CrossIronBridge
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CrossIronBridge`.
        */
        R.modelName = "CrossIronBridge";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ServicePort
 * @header lbServices.ServicePort
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ServicePort` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ServicePort",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ServicePorts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ServicePort.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ServicePort.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ServicePorts/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use ServicePort.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use ServicePort.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use ServicePort.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/ServicePorts/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use ServicePort.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/ServicePorts/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#create
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ServicePorts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#createMany
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ServicePorts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#upsert
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ServicePorts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#exists
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ServicePorts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#findById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ServicePorts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#find
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ServicePorts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#findOne
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ServicePorts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#updateAll
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ServicePorts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#deleteById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ServicePorts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#count
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ServicePorts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#prototype$updateAttributes
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ServicePorts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#createChangeStream
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ServicePorts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#fuzzyQuery
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `serviceports` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/ServicePorts/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#PagingFind
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/ServicePorts/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.findById() instead.
            "::findById::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.destroyById() instead.
            "::destroyById::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.updateById() instead.
            "::updateById::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.link() instead.
            "::link::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.servicePorts.unlink() instead.
            "::unlink::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.exists() instead.
            "::exists::Rode::servicePorts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/servicePorts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.servicePorts() instead.
            "::get::Rode::servicePorts": {
              isArray: true,
              url: urlBase + "/rodes/:id/servicePorts",
              method: "GET",
            },

            // INTERNAL. Use Rode.servicePorts.create() instead.
            "::create::Rode::servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.createMany() instead.
            "::createMany::Rode::servicePorts": {
              isArray: true,
              url: urlBase + "/rodes/:id/servicePorts",
              method: "POST",
            },

            // INTERNAL. Use Rode.servicePorts.destroyAll() instead.
            "::delete::Rode::servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.servicePorts.count() instead.
            "::count::Rode::servicePorts": {
              url: urlBase + "/rodes/:id/servicePorts/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.servicePort() instead.
            "::get::RodeContain::servicePort": {
              url: urlBase + "/RodeContains/:id/servicePort",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ServicePort#updateOrCreate
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#update
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#destroyById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ServicePort#removeById
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ServicePort#modelName
        * @propertyOf lbServices.ServicePort
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ServicePort`.
        */
        R.modelName = "ServicePort";

    /**
     * @ngdoc object
     * @name lbServices.ServicePort.rodes
     * @header lbServices.ServicePort.rodes
     * @object
     * @description
     *
     * The object `ServicePort.rodes` groups methods
     * manipulating `Rode` instances related to `ServicePort`.
     *
     * Call {@link lbServices.ServicePort#rodes ServicePort.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ServicePort#rodes
             * @methodOf lbServices.ServicePort
             *
             * @description
             *
             * Queries rodes of ServicePort.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#count
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Counts rodes of ServicePort.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#create
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#createMany
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#destroyAll
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#destroyById
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#exists
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#findById
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#link
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#unlink
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::ServicePort::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ServicePort.rodes#updateById
             * @methodOf lbServices.ServicePort.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::ServicePort::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BaseStation
 * @header lbServices.BaseStation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BaseStation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BaseStation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/BaseStations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use BaseStation.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use BaseStation.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/BaseStations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use BaseStation.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/BaseStations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use BaseStation.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use BaseStation.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/BaseStations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use BaseStation.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/BaseStations/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#create
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BaseStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#createMany
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BaseStations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#upsert
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BaseStations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#exists
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BaseStations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#findById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BaseStations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#find
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BaseStations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#findOne
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BaseStations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#updateAll
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/BaseStations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#deleteById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BaseStations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#count
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BaseStations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#prototype$updateAttributes
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BaseStations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#createChangeStream
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BaseStations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#fuzzyQuery
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `basestations` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/BaseStations/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#PagingFind
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/BaseStations/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.findById() instead.
            "::findById::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.destroyById() instead.
            "::destroyById::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.updateById() instead.
            "::updateById::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.link() instead.
            "::link::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.baseStations.unlink() instead.
            "::unlink::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.exists() instead.
            "::exists::Rode::baseStations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/baseStations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.baseStations() instead.
            "::get::Rode::baseStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/baseStations",
              method: "GET",
            },

            // INTERNAL. Use Rode.baseStations.create() instead.
            "::create::Rode::baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.createMany() instead.
            "::createMany::Rode::baseStations": {
              isArray: true,
              url: urlBase + "/rodes/:id/baseStations",
              method: "POST",
            },

            // INTERNAL. Use Rode.baseStations.destroyAll() instead.
            "::delete::Rode::baseStations": {
              url: urlBase + "/rodes/:id/baseStations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.baseStations.count() instead.
            "::count::Rode::baseStations": {
              url: urlBase + "/rodes/:id/baseStations/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.baseStation() instead.
            "::get::RodeContain::baseStation": {
              url: urlBase + "/RodeContains/:id/baseStation",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BaseStation#updateOrCreate
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#update
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#destroyById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BaseStation#removeById
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BaseStation#modelName
        * @propertyOf lbServices.BaseStation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BaseStation`.
        */
        R.modelName = "BaseStation";

    /**
     * @ngdoc object
     * @name lbServices.BaseStation.rodes
     * @header lbServices.BaseStation.rodes
     * @object
     * @description
     *
     * The object `BaseStation.rodes` groups methods
     * manipulating `Rode` instances related to `BaseStation`.
     *
     * Call {@link lbServices.BaseStation#rodes BaseStation.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.BaseStation#rodes
             * @methodOf lbServices.BaseStation
             *
             * @description
             *
             * Queries rodes of BaseStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#count
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Counts rodes of BaseStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#create
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#createMany
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#destroyAll
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#destroyById
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#exists
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#findById
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#link
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#unlink
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::BaseStation::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.BaseStation.rodes#updateById
             * @methodOf lbServices.BaseStation.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::BaseStation::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KeyPlace
 * @header lbServices.KeyPlace
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KeyPlace` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KeyPlace",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KeyPlaces/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KeyPlace.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.findById() instead.
            "prototype$__findById__keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyById() instead.
            "prototype$__destroyById__keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.updateById() instead.
            "prototype$__updateById__keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/KeyPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs() instead.
            "prototype$__get__keyPlaceImgs": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.create() instead.
            "prototype$__create__keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyAll() instead.
            "prototype$__delete__keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.count() instead.
            "prototype$__count__keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#create
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KeyPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#createMany
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KeyPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#upsert
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KeyPlaces",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#exists
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KeyPlaces/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#findById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KeyPlaces/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#find
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KeyPlaces",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#findOne
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KeyPlaces/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#updateAll
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KeyPlaces/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#deleteById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KeyPlaces/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#count
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KeyPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#prototype$updateAttributes
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KeyPlaces/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#createChangeStream
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KeyPlaces/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#fuzzyQuery
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `keyplaces` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/KeyPlaces/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#PagingFind
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/KeyPlaces/PagingFind",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#upload
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Upload a file or more files
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` – `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/KeyPlaces/upload",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.findById() instead.
            "::findById::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyById() instead.
            "::destroyById::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.updateById() instead.
            "::updateById::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.link() instead.
            "::link::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.keyPlaces.unlink() instead.
            "::unlink::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.exists() instead.
            "::exists::Rode::keyPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/keyPlaces/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.keyPlaces() instead.
            "::get::Rode::keyPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.keyPlaces.create() instead.
            "::create::Rode::keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.createMany() instead.
            "::createMany::Rode::keyPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.keyPlaces.destroyAll() instead.
            "::delete::Rode::keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.keyPlaces.count() instead.
            "::count::Rode::keyPlaces": {
              url: urlBase + "/rodes/:id/keyPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.keyPlace() instead.
            "::get::RodeContain::keyPlace": {
              url: urlBase + "/RodeContains/:id/keyPlace",
              method: "GET",
            },

            // INTERNAL. Use KeyPlaceImg.keyPlaces() instead.
            "::get::KeyPlaceImg::keyPlaces": {
              url: urlBase + "/KeyPlaceImgs/:id/keyPlaces",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#updateOrCreate
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#update
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#destroyById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#removeById
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KeyPlace#modelName
        * @propertyOf lbServices.KeyPlace
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KeyPlace`.
        */
        R.modelName = "KeyPlace";

    /**
     * @ngdoc object
     * @name lbServices.KeyPlace.rodes
     * @header lbServices.KeyPlace.rodes
     * @object
     * @description
     *
     * The object `KeyPlace.rodes` groups methods
     * manipulating `Rode` instances related to `KeyPlace`.
     *
     * Call {@link lbServices.KeyPlace#rodes KeyPlace.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#rodes
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Queries rodes of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#count
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Counts rodes of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#create
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#createMany
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#destroyAll
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#destroyById
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#exists
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#findById
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#link
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#unlink
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.rodes#updateById
             * @methodOf lbServices.KeyPlace.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::KeyPlace::rodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.KeyPlace.keyPlaceImgs
     * @header lbServices.KeyPlace.keyPlaceImgs
     * @object
     * @description
     *
     * The object `KeyPlace.keyPlaceImgs` groups methods
     * manipulating `KeyPlaceImg` instances related to `KeyPlace`.
     *
     * Call {@link lbServices.KeyPlace#keyPlaceImgs KeyPlace.keyPlaceImgs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.KeyPlace#keyPlaceImgs
             * @methodOf lbServices.KeyPlace
             *
             * @description
             *
             * Queries keyPlaceImgs of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::get::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#count
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Counts keyPlaceImgs of KeyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.keyPlaceImgs.count = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::count::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#create
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Creates a new instance in keyPlaceImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.create = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::create::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#createMany
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Creates a new instance in keyPlaceImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.createMany = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::createMany::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#destroyAll
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Deletes all keyPlaceImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaceImgs.destroyAll = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::delete::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#destroyById
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Delete a related item by id for keyPlaceImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaceImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.keyPlaceImgs.destroyById = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::destroyById::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#findById
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Find a related item by id for keyPlaceImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaceImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.findById = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::findById::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.KeyPlace.keyPlaceImgs#updateById
             * @methodOf lbServices.KeyPlace.keyPlaceImgs
             *
             * @description
             *
             * Update a related item by id for keyPlaceImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for keyPlaceImgs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R.keyPlaceImgs.updateById = function() {
          var TargetResource = $injector.get("KeyPlaceImg");
          var action = TargetResource["::updateById::KeyPlace::keyPlaceImgs"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.HiddenDangerPlace
 * @header lbServices.HiddenDangerPlace
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `HiddenDangerPlace` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "HiddenDangerPlace",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/HiddenDangerPlaces/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use HiddenDangerPlace.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use HiddenDangerPlace.images.findById() instead.
            "prototype$__findById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.images.destroyById() instead.
            "prototype$__destroyById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.images.updateById() instead.
            "prototype$__updateById__images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/HiddenDangerPlaces/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.images() instead.
            "prototype$__get__images": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/images",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.images.create() instead.
            "prototype$__create__images": {
              url: urlBase + "/HiddenDangerPlaces/:id/images",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.images.destroyAll() instead.
            "prototype$__delete__images": {
              url: urlBase + "/HiddenDangerPlaces/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.images.count() instead.
            "prototype$__count__images": {
              url: urlBase + "/HiddenDangerPlaces/:id/images/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#create
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/HiddenDangerPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#createMany
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#upsert
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/HiddenDangerPlaces",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#exists
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/HiddenDangerPlaces/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#findById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/HiddenDangerPlaces/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#find
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#findOne
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/HiddenDangerPlaces/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#updateAll
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/HiddenDangerPlaces/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#deleteById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/HiddenDangerPlaces/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#count
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/HiddenDangerPlaces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#prototype$updateAttributes
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/HiddenDangerPlaces/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#createChangeStream
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/HiddenDangerPlaces/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#fuzzyQuery
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `hiddendangerplaces` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/HiddenDangerPlaces/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#PagingFind
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/HiddenDangerPlaces/PagingFind",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#upload
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Upload a file or more files
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` – `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/HiddenDangerPlaces/upload",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.findById() instead.
            "::findById::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyById() instead.
            "::destroyById::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.updateById() instead.
            "::updateById::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.link() instead.
            "::link::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.unlink() instead.
            "::unlink::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.exists() instead.
            "::exists::Rode::hiddenDangerPlaces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces() instead.
            "::get::Rode::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "GET",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.create() instead.
            "::create::Rode::hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.createMany() instead.
            "::createMany::Rode::hiddenDangerPlaces": {
              isArray: true,
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "POST",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.destroyAll() instead.
            "::delete::Rode::hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.hiddenDangerPlaces.count() instead.
            "::count::Rode::hiddenDangerPlaces": {
              url: urlBase + "/rodes/:id/hiddenDangerPlaces/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.hiddenDangerPlace() instead.
            "::get::RodeContain::hiddenDangerPlace": {
              url: urlBase + "/RodeContains/:id/hiddenDangerPlace",
              method: "GET",
            },

            // INTERNAL. Use Image.hiddenDangerPlaces() instead.
            "::get::Image::hiddenDangerPlaces": {
              url: urlBase + "/images/:id/hiddenDangerPlaces",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#updateOrCreate
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#update
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#destroyById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#removeById
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.HiddenDangerPlace#modelName
        * @propertyOf lbServices.HiddenDangerPlace
        * @description
        * The name of the model represented by this $resource,
        * i.e. `HiddenDangerPlace`.
        */
        R.modelName = "HiddenDangerPlace";

    /**
     * @ngdoc object
     * @name lbServices.HiddenDangerPlace.rodes
     * @header lbServices.HiddenDangerPlace.rodes
     * @object
     * @description
     *
     * The object `HiddenDangerPlace.rodes` groups methods
     * manipulating `Rode` instances related to `HiddenDangerPlace`.
     *
     * Call {@link lbServices.HiddenDangerPlace#rodes HiddenDangerPlace.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#rodes
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Queries rodes of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#count
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Counts rodes of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#create
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#createMany
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#destroyAll
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#destroyById
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#exists
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#findById
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#link
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#unlink
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.rodes#updateById
             * @methodOf lbServices.HiddenDangerPlace.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::HiddenDangerPlace::rodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.HiddenDangerPlace.images
     * @header lbServices.HiddenDangerPlace.images
     * @object
     * @description
     *
     * The object `HiddenDangerPlace.images` groups methods
     * manipulating `Image` instances related to `HiddenDangerPlace`.
     *
     * Call {@link lbServices.HiddenDangerPlace#images HiddenDangerPlace.images()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace#images
             * @methodOf lbServices.HiddenDangerPlace
             *
             * @description
             *
             * Queries images of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R.images = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::get::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.images#count
             * @methodOf lbServices.HiddenDangerPlace.images
             *
             * @description
             *
             * Counts images of HiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.images.count = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::count::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.images#create
             * @methodOf lbServices.HiddenDangerPlace.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R.images.create = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::create::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.images#createMany
             * @methodOf lbServices.HiddenDangerPlace.images
             *
             * @description
             *
             * Creates a new instance in images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R.images.createMany = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::createMany::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.images#destroyAll
             * @methodOf lbServices.HiddenDangerPlace.images
             *
             * @description
             *
             * Deletes all images of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::delete::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.images#destroyById
             * @methodOf lbServices.HiddenDangerPlace.images
             *
             * @description
             *
             * Delete a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::destroyById::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.images#findById
             * @methodOf lbServices.HiddenDangerPlace.images
             *
             * @description
             *
             * Find a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R.images.findById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::findById::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.HiddenDangerPlace.images#updateById
             * @methodOf lbServices.HiddenDangerPlace.images
             *
             * @description
             *
             * Update a related item by id for images.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for images
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R.images.updateById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::updateById::HiddenDangerPlace::images"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KeyPersion
 * @header lbServices.KeyPersion
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KeyPersion` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KeyPersion",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KeyPersions/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#create
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KeyPersions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#createMany
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KeyPersions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#upsert
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KeyPersions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#exists
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KeyPersions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#findById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KeyPersions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#find
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KeyPersions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#findOne
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KeyPersions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#updateAll
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KeyPersions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#deleteById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KeyPersions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#count
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KeyPersions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#prototype$updateAttributes
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KeyPersions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#createChangeStream
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KeyPersions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#fuzzyQuery
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `residencenow` – `{string=}` -
             *
             *  - `idnumber` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `keypersions` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/KeyPersions/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#PagingFind
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/KeyPersions/PagingFind",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#updateOrCreate
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#update
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#destroyById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPersion#removeById
             * @methodOf lbServices.KeyPersion
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPersion` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KeyPersion#modelName
        * @propertyOf lbServices.KeyPersion
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KeyPersion`.
        */
        R.modelName = "KeyPersion";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BroadcastWarningPost
 * @header lbServices.BroadcastWarningPost
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BroadcastWarningPost` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BroadcastWarningPost",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/BroadcastWarningPosts/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#create
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BroadcastWarningPosts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#createMany
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BroadcastWarningPosts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#upsert
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/BroadcastWarningPosts",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#exists
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BroadcastWarningPosts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#findById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BroadcastWarningPosts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#find
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BroadcastWarningPosts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#findOne
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BroadcastWarningPosts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#updateAll
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/BroadcastWarningPosts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#deleteById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BroadcastWarningPosts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#count
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BroadcastWarningPosts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#prototype$updateAttributes
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/BroadcastWarningPosts/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#createChangeStream
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BroadcastWarningPosts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#FuzzyPrecision
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/BroadcastWarningPosts/FuzzyPrecision",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.findById() instead.
            "::findById::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyById() instead.
            "::destroyById::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.updateById() instead.
            "::updateById::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.link() instead.
            "::link::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.unlink() instead.
            "::unlink::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.exists() instead.
            "::exists::Rode::broadcastWarningPosts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/broadcastWarningPosts/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts() instead.
            "::get::Rode::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "GET",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.create() instead.
            "::create::Rode::broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.createMany() instead.
            "::createMany::Rode::broadcastWarningPosts": {
              isArray: true,
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "POST",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.destroyAll() instead.
            "::delete::Rode::broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.broadcastWarningPosts.count() instead.
            "::count::Rode::broadcastWarningPosts": {
              url: urlBase + "/rodes/:id/broadcastWarningPosts/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.broadcastWarningPost() instead.
            "::get::RodeContain::broadcastWarningPost": {
              url: urlBase + "/RodeContains/:id/broadcastWarningPost",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#updateOrCreate
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#update
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#destroyById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BroadcastWarningPost#removeById
             * @methodOf lbServices.BroadcastWarningPost
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.BroadcastWarningPost#modelName
        * @propertyOf lbServices.BroadcastWarningPost
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BroadcastWarningPost`.
        */
        R.modelName = "BroadcastWarningPost";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.APropagandaPoint
 * @header lbServices.APropagandaPoint
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `APropagandaPoint` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "APropagandaPoint",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/APropagandaPoints/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use APropagandaPoint.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.findById() instead.
            "prototype$__findById__aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyById() instead.
            "prototype$__destroyById__aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.updateById() instead.
            "prototype$__updateById__aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/APropagandaPoints/:id/rodes/count",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs() instead.
            "prototype$__get__aPropagandaPointImgs": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.create() instead.
            "prototype$__create__aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyAll() instead.
            "prototype$__delete__aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.count() instead.
            "prototype$__count__aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#create
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/APropagandaPoints",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#createMany
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/APropagandaPoints",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#upsert
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/APropagandaPoints",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#exists
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/APropagandaPoints/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#findById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/APropagandaPoints/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#find
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/APropagandaPoints",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#findOne
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/APropagandaPoints/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#updateAll
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/APropagandaPoints/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#deleteById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/APropagandaPoints/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#count
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/APropagandaPoints/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#prototype$updateAttributes
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/APropagandaPoints/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#createChangeStream
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/APropagandaPoints/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#FuzzyPrecision
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/APropagandaPoints/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#PagingFind
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/APropagandaPoints/PagingFind",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#upload
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Upload a file or more files
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` – `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/APropagandaPoints/upload",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.findById() instead.
            "::findById::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyById() instead.
            "::destroyById::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.updateById() instead.
            "::updateById::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.link() instead.
            "::link::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.unlink() instead.
            "::unlink::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.exists() instead.
            "::exists::Rode::aPropagandaPoints": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/aPropagandaPoints/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.aPropagandaPoints() instead.
            "::get::Rode::aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "GET",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.create() instead.
            "::create::Rode::aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.createMany() instead.
            "::createMany::Rode::aPropagandaPoints": {
              isArray: true,
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "POST",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.destroyAll() instead.
            "::delete::Rode::aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.aPropagandaPoints.count() instead.
            "::count::Rode::aPropagandaPoints": {
              url: urlBase + "/rodes/:id/aPropagandaPoints/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.aPropagandaPoint() instead.
            "::get::RodeContain::aPropagandaPoint": {
              url: urlBase + "/RodeContains/:id/aPropagandaPoint",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPointImg.aPropagandaPoints() instead.
            "::get::APropagandaPointImg::aPropagandaPoints": {
              url: urlBase + "/APropagandaPointImgs/:id/aPropagandaPoints",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#updateOrCreate
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#update
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#destroyById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#removeById
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.APropagandaPoint#modelName
        * @propertyOf lbServices.APropagandaPoint
        * @description
        * The name of the model represented by this $resource,
        * i.e. `APropagandaPoint`.
        */
        R.modelName = "APropagandaPoint";

    /**
     * @ngdoc object
     * @name lbServices.APropagandaPoint.rodes
     * @header lbServices.APropagandaPoint.rodes
     * @object
     * @description
     *
     * The object `APropagandaPoint.rodes` groups methods
     * manipulating `Rode` instances related to `APropagandaPoint`.
     *
     * Call {@link lbServices.APropagandaPoint#rodes APropagandaPoint.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#rodes
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Queries rodes of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#count
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Counts rodes of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#create
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#createMany
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#destroyAll
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#destroyById
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#exists
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#findById
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#link
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#unlink
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.rodes#updateById
             * @methodOf lbServices.APropagandaPoint.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::APropagandaPoint::rodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.APropagandaPoint.aPropagandaPointImgs
     * @header lbServices.APropagandaPoint.aPropagandaPointImgs
     * @object
     * @description
     *
     * The object `APropagandaPoint.aPropagandaPointImgs` groups methods
     * manipulating `APropagandaPointImg` instances related to `APropagandaPoint`.
     *
     * Call {@link lbServices.APropagandaPoint#aPropagandaPointImgs APropagandaPoint.aPropagandaPointImgs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint#aPropagandaPointImgs
             * @methodOf lbServices.APropagandaPoint
             *
             * @description
             *
             * Queries aPropagandaPointImgs of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::get::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#count
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Counts aPropagandaPointImgs of APropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.aPropagandaPointImgs.count = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::count::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#create
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Creates a new instance in aPropagandaPointImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.create = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::create::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#createMany
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Creates a new instance in aPropagandaPointImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.createMany = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::createMany::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#destroyAll
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Deletes all aPropagandaPointImgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPointImgs.destroyAll = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::delete::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#destroyById
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Delete a related item by id for aPropagandaPointImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPointImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.aPropagandaPointImgs.destroyById = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::destroyById::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#findById
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Find a related item by id for aPropagandaPointImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPointImgs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.findById = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::findById::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPoint.aPropagandaPointImgs#updateById
             * @methodOf lbServices.APropagandaPoint.aPropagandaPointImgs
             *
             * @description
             *
             * Update a related item by id for aPropagandaPointImgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for aPropagandaPointImgs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R.aPropagandaPointImgs.updateById = function() {
          var TargetResource = $injector.get("APropagandaPointImg");
          var action = TargetResource["::updateById::APropagandaPoint::aPropagandaPointImgs"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.InstitutionalTeam
 * @header lbServices.InstitutionalTeam
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InstitutionalTeam` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "InstitutionalTeam",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/InstitutionalTeams/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#create
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/InstitutionalTeams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#createMany
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/InstitutionalTeams",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#upsert
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/InstitutionalTeams",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#exists
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/InstitutionalTeams/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#findById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/InstitutionalTeams/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#find
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/InstitutionalTeams",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#findOne
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/InstitutionalTeams/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#updateAll
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/InstitutionalTeams/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#deleteById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/InstitutionalTeams/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#count
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/InstitutionalTeams/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#prototype$updateAttributes
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/InstitutionalTeams/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#createChangeStream
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/InstitutionalTeams/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#FuzzyPrecision
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `admimdepartment` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/InstitutionalTeams/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#PagingFind
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/InstitutionalTeams/PagingFind",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#updateOrCreate
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#update
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#destroyById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.InstitutionalTeam#removeById
             * @methodOf lbServices.InstitutionalTeam
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InstitutionalTeam` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.InstitutionalTeam#modelName
        * @propertyOf lbServices.InstitutionalTeam
        * @description
        * The name of the model represented by this $resource,
        * i.e. `InstitutionalTeam`.
        */
        R.modelName = "InstitutionalTeam";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Station
 * @header lbServices.Station
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Station` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Station",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Stations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Station.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Station.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Stations/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Station.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/Stations/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use Station.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use Station.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/Stations/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use Station.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/Stations/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#create
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Stations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#createMany
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Stations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#upsert
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Stations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#exists
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Stations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#findById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Stations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#find
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Stations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#findOne
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Stations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#updateAll
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Stations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#deleteById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Stations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#count
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Stations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#prototype$updateAttributes
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Stations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#createChangeStream
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Stations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#FuzzyPrecision
             * @methodOf lbServices.Station
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `StationName` – `{string=}` -
             *
             *  - `StationRank` – `{string=}` -
             *
             *  - `StationNature` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/Stations/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#PagingFind
             * @methodOf lbServices.Station
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Stations/PagingFind",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#RemoveStationRank
             * @methodOf lbServices.Station
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "RemoveStationRank": {
              url: urlBase + "/Stations/RemoveStationRank",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Station#RemoveStationNature
             * @methodOf lbServices.Station
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "RemoveStationNature": {
              url: urlBase + "/Stations/RemoveStationNature",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.findById() instead.
            "::findById::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.destroyById() instead.
            "::destroyById::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.updateById() instead.
            "::updateById::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.link() instead.
            "::link::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Rode.stations.unlink() instead.
            "::unlink::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.exists() instead.
            "::exists::Rode::stations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/rodes/:id/stations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Rode.stations() instead.
            "::get::Rode::stations": {
              isArray: true,
              url: urlBase + "/rodes/:id/stations",
              method: "GET",
            },

            // INTERNAL. Use Rode.stations.create() instead.
            "::create::Rode::stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Rode.stations.createMany() instead.
            "::createMany::Rode::stations": {
              isArray: true,
              url: urlBase + "/rodes/:id/stations",
              method: "POST",
            },

            // INTERNAL. Use Rode.stations.destroyAll() instead.
            "::delete::Rode::stations": {
              url: urlBase + "/rodes/:id/stations",
              method: "DELETE",
            },

            // INTERNAL. Use Rode.stations.count() instead.
            "::count::Rode::stations": {
              url: urlBase + "/rodes/:id/stations/count",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.station() instead.
            "::get::RodeContain::station": {
              url: urlBase + "/RodeContains/:id/station",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Station#updateOrCreate
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Station#update
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Station#destroyById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Station#removeById
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Station#modelName
        * @propertyOf lbServices.Station
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Station`.
        */
        R.modelName = "Station";

    /**
     * @ngdoc object
     * @name lbServices.Station.rodes
     * @header lbServices.Station.rodes
     * @object
     * @description
     *
     * The object `Station.rodes` groups methods
     * manipulating `Rode` instances related to `Station`.
     *
     * Call {@link lbServices.Station#rodes Station.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Station#rodes
             * @methodOf lbServices.Station
             *
             * @description
             *
             * Queries rodes of Station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#count
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Counts rodes of Station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#create
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#createMany
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#destroyAll
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#destroyById
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#exists
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#findById
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#link
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#unlink
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::Station::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Station.rodes#updateById
             * @methodOf lbServices.Station.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::Station::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EquipmentInfor
 * @header lbServices.EquipmentInfor
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EquipmentInfor` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EquipmentInfor",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EquipmentInfors/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#create
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EquipmentInfors",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#createMany
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EquipmentInfors",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#upsert
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EquipmentInfors",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#exists
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EquipmentInfors/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#findById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EquipmentInfors/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#find
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EquipmentInfors",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#findOne
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EquipmentInfors/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#updateAll
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EquipmentInfors/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#deleteById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EquipmentInfors/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#count
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EquipmentInfors/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#prototype$updateAttributes
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EquipmentInfors/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#createChangeStream
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EquipmentInfors/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#FuzzyPrecision
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `DeviceName` – `{string=}` -
             *
             *  - `ProtectiveFacilities` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/EquipmentInfors/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#PagingFind
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/EquipmentInfors/PagingFind",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#updateOrCreate
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#update
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#destroyById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EquipmentInfor#removeById
             * @methodOf lbServices.EquipmentInfor
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EquipmentInfor` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EquipmentInfor#modelName
        * @propertyOf lbServices.EquipmentInfor
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EquipmentInfor`.
        */
        R.modelName = "EquipmentInfor";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Monitoring
 * @header lbServices.Monitoring
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Monitoring` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Monitoring",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Monitorings/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#create
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Monitorings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#createMany
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Monitorings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#upsert
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Monitorings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#exists
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Monitorings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#findById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Monitorings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#find
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Monitorings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#findOne
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Monitorings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#updateAll
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Monitorings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#deleteById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Monitorings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#count
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Monitorings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#prototype$updateAttributes
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Monitorings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#createChangeStream
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Monitorings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#fuzzyQuery
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `DeviceName` – `{string=}` -
             *
             *  - `Address` – `{string=}` -
             *
             *  - `Number` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `monitorings` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/Monitorings/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#PagingFind
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/Monitorings/PagingFind",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Monitoring#updateOrCreate
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#update
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#destroyById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Monitoring#removeById
             * @methodOf lbServices.Monitoring
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Monitoring` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Monitoring#modelName
        * @propertyOf lbServices.Monitoring
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Monitoring`.
        */
        R.modelName = "Monitoring";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EmergencyAccesss
 * @header lbServices.EmergencyAccesss
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EmergencyAccesss` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EmergencyAccesss",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/EmergencyAccessses/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#create
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EmergencyAccessses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#createMany
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EmergencyAccessses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#upsert
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EmergencyAccessses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#exists
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EmergencyAccessses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#findById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EmergencyAccessses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#find
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EmergencyAccessses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#findOne
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EmergencyAccessses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#updateAll
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EmergencyAccessses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#deleteById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EmergencyAccessses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#count
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EmergencyAccessses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#prototype$updateAttributes
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EmergencyAccessses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#createChangeStream
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EmergencyAccessses/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#fuzzyQuery
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `name` – `{string=}` -
             *
             *  - `address` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `emergencyaccesss` – `{object=}` -
             */
            "fuzzyQuery": {
              url: urlBase + "/EmergencyAccessses/fuzzyQuery",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#PagingFind
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/EmergencyAccessses/PagingFind",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#updateOrCreate
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#update
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#destroyById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EmergencyAccesss#removeById
             * @methodOf lbServices.EmergencyAccesss
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EmergencyAccesss` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EmergencyAccesss#modelName
        * @propertyOf lbServices.EmergencyAccesss
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EmergencyAccesss`.
        */
        R.modelName = "EmergencyAccesss";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FenceInfo
 * @header lbServices.FenceInfo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FenceInfo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FenceInfo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/FenceInfos/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FenceInfo.rodes.findById() instead.
            "prototype$__findById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyById() instead.
            "prototype$__destroyById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.updateById() instead.
            "prototype$__updateById__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.link() instead.
            "prototype$__link__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FenceInfo.rodes.unlink() instead.
            "prototype$__unlink__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.exists() instead.
            "prototype$__exists__rodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FenceInfos/:id/rodes/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use FenceInfo.rodes() instead.
            "prototype$__get__rodes": {
              isArray: true,
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "GET",
            },

            // INTERNAL. Use FenceInfo.rodes.create() instead.
            "prototype$__create__rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "POST",
            },

            // INTERNAL. Use FenceInfo.rodes.destroyAll() instead.
            "prototype$__delete__rodes": {
              url: urlBase + "/FenceInfos/:id/rodes",
              method: "DELETE",
            },

            // INTERNAL. Use FenceInfo.rodes.count() instead.
            "prototype$__count__rodes": {
              url: urlBase + "/FenceInfos/:id/rodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#create
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FenceInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#createMany
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FenceInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#upsert
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FenceInfos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#exists
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FenceInfos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#findById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FenceInfos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#find
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FenceInfos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#findOne
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FenceInfos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#updateAll
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/FenceInfos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#deleteById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FenceInfos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#count
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FenceInfos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#prototype$updateAttributes
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FenceInfos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#createChangeStream
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FenceInfos/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#FuzzyPrecision
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `Name` – `{string=}` -
             *
             *  - `AdministrativeDepartment` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/FenceInfos/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#PagingFind
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/FenceInfos/PagingFind",
              method: "POST",
            },

            // INTERNAL. Use RodeContain.fenceInfos() instead.
            "::get::RodeContain::fenceInfos": {
              url: urlBase + "/RodeContains/:id/fenceInfos",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#updateOrCreate
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#update
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#destroyById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#removeById
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.FenceInfo#modelName
        * @propertyOf lbServices.FenceInfo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FenceInfo`.
        */
        R.modelName = "FenceInfo";

    /**
     * @ngdoc object
     * @name lbServices.FenceInfo.rodes
     * @header lbServices.FenceInfo.rodes
     * @object
     * @description
     *
     * The object `FenceInfo.rodes` groups methods
     * manipulating `Rode` instances related to `FenceInfo`.
     *
     * Call {@link lbServices.FenceInfo#rodes FenceInfo.rodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FenceInfo#rodes
             * @methodOf lbServices.FenceInfo
             *
             * @description
             *
             * Queries rodes of FenceInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#count
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Counts rodes of FenceInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.rodes.count = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::count::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#create
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.create = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::create::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#createMany
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Creates a new instance in rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.createMany = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::createMany::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#destroyAll
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Deletes all rodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyAll = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::delete::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#destroyById
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Delete a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.destroyById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::destroyById::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#exists
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Check the existence of rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.exists = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::exists::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#findById
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Find a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.findById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::findById::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#link
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Add a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.link = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::link::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#unlink
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Remove the rodes relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.rodes.unlink = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::unlink::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FenceInfo.rodes#updateById
             * @methodOf lbServices.FenceInfo.rodes
             *
             * @description
             *
             * Update a related item by id for rodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for rodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rodes.updateById = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::updateById::FenceInfo::rodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SecurityEquipmentInformation
 * @header lbServices.SecurityEquipmentInformation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SecurityEquipmentInformation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SecurityEquipmentInformation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SecurityEquipmentInformations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#create
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SecurityEquipmentInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#createMany
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SecurityEquipmentInformations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#upsert
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SecurityEquipmentInformations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#exists
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SecurityEquipmentInformations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#findById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SecurityEquipmentInformations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#find
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SecurityEquipmentInformations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#findOne
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SecurityEquipmentInformations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#updateAll
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SecurityEquipmentInformations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#deleteById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SecurityEquipmentInformations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#count
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SecurityEquipmentInformations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#prototype$updateAttributes
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SecurityEquipmentInformations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#createChangeStream
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SecurityEquipmentInformations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#FuzzyPrecision
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `Name` – `{string=}` -
             *
             *  - `AdministrativeDepartment` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             */
            "FuzzyPrecision": {
              url: urlBase + "/SecurityEquipmentInformations/FuzzyPrecision",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#PagingFind
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `one` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `rodes` – `{object=}` -
             *
             *  - `pageCount` – `{number=}` -
             */
            "PagingFind": {
              url: urlBase + "/SecurityEquipmentInformations/PagingFind",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#updateOrCreate
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#update
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#destroyById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SecurityEquipmentInformation#removeById
             * @methodOf lbServices.SecurityEquipmentInformation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SecurityEquipmentInformation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SecurityEquipmentInformation#modelName
        * @propertyOf lbServices.SecurityEquipmentInformation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SecurityEquipmentInformation`.
        */
        R.modelName = "SecurityEquipmentInformation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RodeContain
 * @header lbServices.RodeContain
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RodeContain` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RodeContain",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RodeContains/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RodeContain.station() instead.
            "prototype$__get__station": {
              url: urlBase + "/RodeContains/:id/station",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.tunnel() instead.
            "prototype$__get__tunnel": {
              url: urlBase + "/RodeContains/:id/tunnel",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.servicePort() instead.
            "prototype$__get__servicePort": {
              url: urlBase + "/RodeContains/:id/servicePort",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.levelCrossing() instead.
            "prototype$__get__levelCrossing": {
              url: urlBase + "/RodeContains/:id/levelCrossing",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.keyPlace() instead.
            "prototype$__get__keyPlace": {
              url: urlBase + "/RodeContains/:id/keyPlace",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.hiddenDangerPlace() instead.
            "prototype$__get__hiddenDangerPlace": {
              url: urlBase + "/RodeContains/:id/hiddenDangerPlace",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.fenceInfos() instead.
            "prototype$__get__fenceInfos": {
              url: urlBase + "/RodeContains/:id/fenceInfos",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.culvert() instead.
            "prototype$__get__culvert": {
              url: urlBase + "/RodeContains/:id/culvert",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.crossIronBridge() instead.
            "prototype$__get__crossIronBridge": {
              url: urlBase + "/RodeContains/:id/crossIronBridge",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.broadcastWarningPost() instead.
            "prototype$__get__broadcastWarningPost": {
              url: urlBase + "/RodeContains/:id/broadcastWarningPost",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.bridge() instead.
            "prototype$__get__bridge": {
              url: urlBase + "/RodeContains/:id/bridge",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.baseStation() instead.
            "prototype$__get__baseStation": {
              url: urlBase + "/RodeContains/:id/baseStation",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.aPropagandaPoint() instead.
            "prototype$__get__aPropagandaPoint": {
              url: urlBase + "/RodeContains/:id/aPropagandaPoint",
              method: "GET",
            },

            // INTERNAL. Use RodeContain.rode() instead.
            "prototype$__get__rode": {
              url: urlBase + "/RodeContains/:id/rode",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#create
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RodeContains",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#createMany
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RodeContains",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#upsert
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RodeContains",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#exists
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RodeContains/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#findById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RodeContains/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#find
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RodeContains",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#findOne
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RodeContains/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#updateAll
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RodeContains/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#deleteById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RodeContains/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#count
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RodeContains/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#prototype$updateAttributes
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RodeContains/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#createChangeStream
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RodeContains/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RodeContain#updateOrCreate
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#update
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#destroyById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#removeById
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RodeContain` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RodeContain#modelName
        * @propertyOf lbServices.RodeContain
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RodeContain`.
        */
        R.modelName = "RodeContain";


            /**
             * @ngdoc method
             * @name lbServices.RodeContain#station
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation station.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Station` object.)
             * </em>
             */
        R.station = function() {
          var TargetResource = $injector.get("Station");
          var action = TargetResource["::get::RodeContain::station"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#tunnel
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation tunnel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Tunnel` object.)
             * </em>
             */
        R.tunnel = function() {
          var TargetResource = $injector.get("Tunnel");
          var action = TargetResource["::get::RodeContain::tunnel"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#servicePort
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation servicePort.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ServicePort` object.)
             * </em>
             */
        R.servicePort = function() {
          var TargetResource = $injector.get("ServicePort");
          var action = TargetResource["::get::RodeContain::servicePort"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#levelCrossing
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation levelCrossing.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LevelCrossing` object.)
             * </em>
             */
        R.levelCrossing = function() {
          var TargetResource = $injector.get("LevelCrossing");
          var action = TargetResource["::get::RodeContain::levelCrossing"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#keyPlace
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation keyPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlace = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::RodeContain::keyPlace"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#hiddenDangerPlace
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation hiddenDangerPlace.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlace = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::RodeContain::hiddenDangerPlace"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#fenceInfos
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation fenceInfos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FenceInfo` object.)
             * </em>
             */
        R.fenceInfos = function() {
          var TargetResource = $injector.get("FenceInfo");
          var action = TargetResource["::get::RodeContain::fenceInfos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#culvert
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation culvert.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Culvert` object.)
             * </em>
             */
        R.culvert = function() {
          var TargetResource = $injector.get("Culvert");
          var action = TargetResource["::get::RodeContain::culvert"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#crossIronBridge
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation crossIronBridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CrossIronBridge` object.)
             * </em>
             */
        R.crossIronBridge = function() {
          var TargetResource = $injector.get("CrossIronBridge");
          var action = TargetResource["::get::RodeContain::crossIronBridge"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#broadcastWarningPost
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation broadcastWarningPost.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BroadcastWarningPost` object.)
             * </em>
             */
        R.broadcastWarningPost = function() {
          var TargetResource = $injector.get("BroadcastWarningPost");
          var action = TargetResource["::get::RodeContain::broadcastWarningPost"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#bridge
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation bridge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Bridge` object.)
             * </em>
             */
        R.bridge = function() {
          var TargetResource = $injector.get("Bridge");
          var action = TargetResource["::get::RodeContain::bridge"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#baseStation
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation baseStation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BaseStation` object.)
             * </em>
             */
        R.baseStation = function() {
          var TargetResource = $injector.get("BaseStation");
          var action = TargetResource["::get::RodeContain::baseStation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#aPropagandaPoint
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation aPropagandaPoint.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoint = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::get::RodeContain::aPropagandaPoint"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RodeContain#rode
             * @methodOf lbServices.RodeContain
             *
             * @description
             *
             * Fetches belongsTo relation rode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Rode` object.)
             * </em>
             */
        R.rode = function() {
          var TargetResource = $injector.get("Rode");
          var action = TargetResource["::get::RodeContain::rode"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Image
 * @header lbServices.Image
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Image` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Image",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/images/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Image.hiddenDangerPlaces() instead.
            "prototype$__get__hiddenDangerPlaces": {
              url: urlBase + "/images/:id/hiddenDangerPlaces",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#create
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/images",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#createMany
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/images",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#upsert
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/images",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#exists
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/images/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#findById
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/images/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#find
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/images",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#findOne
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/images/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#updateAll
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/images/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#deleteById
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/images/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#count
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/images/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#prototype$updateAttributes
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/images/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Image#createChangeStream
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/images/change-stream",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.images.findById() instead.
            "::findById::HiddenDangerPlace::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/images/:fk",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.images.destroyById() instead.
            "::destroyById::HiddenDangerPlace::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/images/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.images.updateById() instead.
            "::updateById::HiddenDangerPlace::images": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/HiddenDangerPlaces/:id/images/:fk",
              method: "PUT",
            },

            // INTERNAL. Use HiddenDangerPlace.images() instead.
            "::get::HiddenDangerPlace::images": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/images",
              method: "GET",
            },

            // INTERNAL. Use HiddenDangerPlace.images.create() instead.
            "::create::HiddenDangerPlace::images": {
              url: urlBase + "/HiddenDangerPlaces/:id/images",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.images.createMany() instead.
            "::createMany::HiddenDangerPlace::images": {
              isArray: true,
              url: urlBase + "/HiddenDangerPlaces/:id/images",
              method: "POST",
            },

            // INTERNAL. Use HiddenDangerPlace.images.destroyAll() instead.
            "::delete::HiddenDangerPlace::images": {
              url: urlBase + "/HiddenDangerPlaces/:id/images",
              method: "DELETE",
            },

            // INTERNAL. Use HiddenDangerPlace.images.count() instead.
            "::count::HiddenDangerPlace::images": {
              url: urlBase + "/HiddenDangerPlaces/:id/images/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Image#updateOrCreate
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Image#update
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Image#destroyById
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Image#removeById
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Image` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Image#modelName
        * @propertyOf lbServices.Image
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Image`.
        */
        R.modelName = "Image";


            /**
             * @ngdoc method
             * @name lbServices.Image#hiddenDangerPlaces
             * @methodOf lbServices.Image
             *
             * @description
             *
             * Fetches belongsTo relation hiddenDangerPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `HiddenDangerPlace` object.)
             * </em>
             */
        R.hiddenDangerPlaces = function() {
          var TargetResource = $injector.get("HiddenDangerPlace");
          var action = TargetResource["::get::Image::hiddenDangerPlaces"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/Containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/Containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/Containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/Containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/Containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/Containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/Containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/Containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/Containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.KeyPlaceImg
 * @header lbServices.KeyPlaceImg
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `KeyPlaceImg` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "KeyPlaceImg",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/KeyPlaceImgs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use KeyPlaceImg.keyPlaces() instead.
            "prototype$__get__keyPlaces": {
              url: urlBase + "/KeyPlaceImgs/:id/keyPlaces",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#create
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/KeyPlaceImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#createMany
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/KeyPlaceImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#upsert
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/KeyPlaceImgs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#exists
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/KeyPlaceImgs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#findById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/KeyPlaceImgs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#find
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/KeyPlaceImgs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#findOne
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/KeyPlaceImgs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#updateAll
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/KeyPlaceImgs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#deleteById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/KeyPlaceImgs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#count
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/KeyPlaceImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#prototype$updateAttributes
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/KeyPlaceImgs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#createChangeStream
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/KeyPlaceImgs/change-stream",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.findById() instead.
            "::findById::KeyPlace::keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyById() instead.
            "::destroyById::KeyPlace::keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.updateById() instead.
            "::updateById::KeyPlace::keyPlaceImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs() instead.
            "::get::KeyPlace::keyPlaceImgs": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "GET",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.create() instead.
            "::create::KeyPlace::keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.createMany() instead.
            "::createMany::KeyPlace::keyPlaceImgs": {
              isArray: true,
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "POST",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.destroyAll() instead.
            "::delete::KeyPlace::keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs",
              method: "DELETE",
            },

            // INTERNAL. Use KeyPlace.keyPlaceImgs.count() instead.
            "::count::KeyPlace::keyPlaceImgs": {
              url: urlBase + "/KeyPlaces/:id/keyPlaceImgs/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#updateOrCreate
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#update
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#destroyById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#removeById
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlaceImg` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.KeyPlaceImg#modelName
        * @propertyOf lbServices.KeyPlaceImg
        * @description
        * The name of the model represented by this $resource,
        * i.e. `KeyPlaceImg`.
        */
        R.modelName = "KeyPlaceImg";


            /**
             * @ngdoc method
             * @name lbServices.KeyPlaceImg#keyPlaces
             * @methodOf lbServices.KeyPlaceImg
             *
             * @description
             *
             * Fetches belongsTo relation keyPlaces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `KeyPlace` object.)
             * </em>
             */
        R.keyPlaces = function() {
          var TargetResource = $injector.get("KeyPlace");
          var action = TargetResource["::get::KeyPlaceImg::keyPlaces"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.APropagandaPointImg
 * @header lbServices.APropagandaPointImg
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `APropagandaPointImg` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "APropagandaPointImg",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/APropagandaPointImgs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use APropagandaPointImg.aPropagandaPoints() instead.
            "prototype$__get__aPropagandaPoints": {
              url: urlBase + "/APropagandaPointImgs/:id/aPropagandaPoints",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#create
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/APropagandaPointImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#createMany
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/APropagandaPointImgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#upsert
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/APropagandaPointImgs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#exists
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/APropagandaPointImgs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#findById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/APropagandaPointImgs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#find
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/APropagandaPointImgs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#findOne
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/APropagandaPointImgs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#updateAll
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/APropagandaPointImgs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#deleteById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/APropagandaPointImgs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#count
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/APropagandaPointImgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#prototype$updateAttributes
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/APropagandaPointImgs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#createChangeStream
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/APropagandaPointImgs/change-stream",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.findById() instead.
            "::findById::APropagandaPoint::aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyById() instead.
            "::destroyById::APropagandaPoint::aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.updateById() instead.
            "::updateById::APropagandaPoint::aPropagandaPointImgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs() instead.
            "::get::APropagandaPoint::aPropagandaPointImgs": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "GET",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.create() instead.
            "::create::APropagandaPoint::aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.createMany() instead.
            "::createMany::APropagandaPoint::aPropagandaPointImgs": {
              isArray: true,
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "POST",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.destroyAll() instead.
            "::delete::APropagandaPoint::aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs",
              method: "DELETE",
            },

            // INTERNAL. Use APropagandaPoint.aPropagandaPointImgs.count() instead.
            "::count::APropagandaPoint::aPropagandaPointImgs": {
              url: urlBase + "/APropagandaPoints/:id/aPropagandaPointImgs/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#updateOrCreate
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#update
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#destroyById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#removeById
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPointImg` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.APropagandaPointImg#modelName
        * @propertyOf lbServices.APropagandaPointImg
        * @description
        * The name of the model represented by this $resource,
        * i.e. `APropagandaPointImg`.
        */
        R.modelName = "APropagandaPointImg";


            /**
             * @ngdoc method
             * @name lbServices.APropagandaPointImg#aPropagandaPoints
             * @methodOf lbServices.APropagandaPointImg
             *
             * @description
             *
             * Fetches belongsTo relation aPropagandaPoints.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `APropagandaPoint` object.)
             * </em>
             */
        R.aPropagandaPoints = function() {
          var TargetResource = $injector.get("APropagandaPoint");
          var action = TargetResource["::get::APropagandaPointImg::aPropagandaPoints"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
