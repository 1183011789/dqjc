"use strict";
angular.module("ngLocale", [], ["$provide", function(a) { var b = { ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other" };
        a.value("$locale", { DATETIME_FORMATS: { AMPMS: ["上午", "下午"], DAY: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], ERANAMES: ["公元前", "公元"], ERAS: ["公元前", "公元"], FIRSTDAYOFWEEK: 6, MONTH: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], SHORTDAY: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"], SHORTMONTH: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], STANDALONEMONTH: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], WEEKENDRANGE: [5, 6], fullDate: "y年M月d日EEEE", longDate: "y年M月d日", medium: "y年M月d日 ah:mm:ss", mediumDate: "y年M月d日", mediumTime: "ah:mm:ss", short: "y/M/d ah:mm", shortDate: "y/M/d", shortTime: "ah:mm" }, NUMBER_FORMATS: { CURRENCY_SYM: "¥", DECIMAL_SEP: ".", GROUP_SEP: ",", PATTERNS: [{ gSize: 3, lgSize: 3, maxFrac: 3, minFrac: 0, minInt: 1, negPre: "-", negSuf: "", posPre: "", posSuf: "" }, { gSize: 3, lgSize: 3, maxFrac: 2, minFrac: 2, minInt: 1, negPre: "-¤", negSuf: "", posPre: "¤", posSuf: "" }] }, id: "zh-cn", localeID: "zh_CN", pluralCat: function(a, c) { return b.OTHER } }) }]),
    function() { angular.module("loopbackApp", ["angular-loading-bar", "angular.filter", "angularBootstrapNavTree", "angularFileUpload", "btford.markdown", "oitozero.ngSweetAlert", "config", "formly", "formlyBootstrap", "lbServices", "monospaced.elastic", "ngAnimate", "ngCookies", "ngResource", "ngRoute", "ngLocale", "ngSanitize", "ngTouch", "ui.bootstrap", "ui.codemirror", "ui.grid", "ui.router", "toasty", "autofields", "gettext", "angular-underscore/filters", "schemaForm", "ui.select", "permission", "permission.ui", "com.module.core", "com.module.about", "com.module.settings", "com.module.users", "com.module.sandbox"]).run(["$rootScope", "$cookies", "gettextCatalog", "$q", function(a, b, c, d) { a.locales = { en: { lang: "en", country: "US", name: "English" }, zh_CN: { lang: "zh_CN", country: "CN", name: "中文" } }, c.setCurrentLanguage("zh_CN") }]).run(["RoleStore", "User", "RoleMapping", "$q", function(a, b, c, d) { a.defineRole("ADMIN", function(a) { var e = d.defer(); return b.getCurrent(function(a) { c.findOne({ filter: { where: { principalId: a.id }, include: "role" } }, function(a) { "admin" === a.role.name ? e.resolve() : e.reject() }, function(a) { console.log(a), e.reject() }) }, function(a) { console.log(a), e.reject() }), e.promise }) }]).run(["formlyConfig", function(a) {
            function b(a) { return a = a.replace(/[\-_\s]+(.)?/g, function(a, b) { return b ? b.toUpperCase() : "" }), a.replace(/^([A-Z])/, function(a, b) { return b ? b.toLowerCase() : "" }) } var c = {};
            c = {}, angular.forEach(["meridians", "readonly-input", "mousewheel", "arrowkeys"], function(a) { c[b(a)] = { attribute: a } }), angular.forEach(["hour-step", "minute-step", "show-meridian"], function(a) { c[b(a)] = { bound: a } }), a.setType({ name: "timepicker", template: '<div uib-timepicker ng-model="model[options.key]"></div>', wrapper: ["bootstrapLabel", "bootstrapHasError"], defaultOptions: { ngModelAttrs: c, templateOptions: { timepickerOptions: {} } } }), a.setType({ name: "datepicker", template: '<div uib-datepicker ng-model="model[options.key]" ></div>', wrapper: ["bootstrapLabel", "bootstrapHasError"], defaultOptions: { ngModelAttrs: c, templateOptions: { datepickerOptions: {} } } }), a.setType({ name: "matchField", apiCheck: function() { return { data: { fieldToMatch: formlyExampleApiCheck.string } } }, apiCheckOptions: { prefix: "matchField type" }, defaultOptions: function(a) {
                    function b(a, b, c) { var d; return a.some(function(a) { return a[b] === c && (d = a), !!d }), d } return { extras: { validateOnModelChange: !0 }, expressionProperties: { "templateOptions.disabled": function(c, d, e) { var f = b(e.fields, "key", a.data.fieldToMatch); if (!f) throw new Error("Could not find a field for the key " + a.data.fieldToMatch); var g = a.data.modelToMatch || e.model,
                                    h = g[a.data.fieldToMatch],
                                    i = f.formControl && f.formControl.$invalid; return !h || i } }, validators: { fieldMatch: { expression: function(b, c, d) { var e = c || b,
                                        f = a.data.modelToMatch || d.model; return e === f[a.data.fieldToMatch] }, message: a.data.matchFieldMessage || '"Must match"' } } } } }) }]) }(), angular.module("config", []).constant("ENV", { name: "production", apiUrl: "/api/", siteUrl: "" }), "undefined" != typeof module && "undefined" != typeof exports && module.exports === exports && (module.exports = "lbServices"),
    function(a, b, c) {
        function d(a) { var b = a.match(/^(?:https?:)?\/\/([^\/]+)/); return b ? b[1] : null }
        var e = "/api",
            f = "authorization",
            g = d(e) || location.host,
            h = b.module("lbServices", ["ngResource"]);
        h.factory("AccessToken", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/accessTokens/:id", { id: "@id" }, { prototype$__get__user: { url: e + "/accessTokens/:id/user", method: "GET" }, create: { url: e + "/accessTokens", method: "POST" }, createMany: { isArray: !0, url: e + "/accessTokens", method: "POST" }, upsert: { url: e + "/accessTokens", method: "PUT" }, exists: { url: e + "/accessTokens/:id/exists", method: "GET" }, findById: { url: e + "/accessTokens/:id", method: "GET" }, find: { isArray: !0, url: e + "/accessTokens", method: "GET" }, findOne: { url: e + "/accessTokens/findOne", method: "GET" }, updateAll: { url: e + "/accessTokens/update", method: "POST" }, deleteById: { url: e + "/accessTokens/:id", method: "DELETE" }, count: { url: e + "/accessTokens/count", method: "GET" }, prototype$updateAttributes: { url: e + "/accessTokens/:id", method: "PUT" }, createChangeStream: { url: e + "/accessTokens/change-stream", method: "POST" }, "::findById::user::accessTokens": { params: { fk: "@fk" }, url: e + "/users/:id/accessTokens/:fk", method: "GET" }, "::destroyById::user::accessTokens": { params: { fk: "@fk" }, url: e + "/users/:id/accessTokens/:fk", method: "DELETE" }, "::updateById::user::accessTokens": { params: { fk: "@fk" }, url: e + "/users/:id/accessTokens/:fk", method: "PUT" }, "::get::user::accessTokens": { isArray: !0, url: e + "/users/:id/accessTokens", method: "GET" }, "::create::user::accessTokens": { url: e + "/users/:id/accessTokens", method: "POST" }, "::createMany::user::accessTokens": { isArray: !0, url: e + "/users/:id/accessTokens", method: "POST" }, "::delete::user::accessTokens": { url: e + "/users/:id/accessTokens", method: "DELETE" }, "::count::user::accessTokens": { url: e + "/users/:id/accessTokens/count", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "AccessToken", d.user = function() { var a = c.get("User"),
                    b = a["::get::accessToken::user"]; return b.apply(d, arguments) }, d }]), h.factory("RoleMapping", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/RoleMappings/:id", { id: "@id" }, { prototype$__get__role: { url: e + "/RoleMappings/:id/role", method: "GET" }, create: { url: e + "/RoleMappings", method: "POST" }, createMany: { isArray: !0, url: e + "/RoleMappings", method: "POST" }, upsert: { url: e + "/RoleMappings", method: "PUT" }, exists: { url: e + "/RoleMappings/:id/exists", method: "GET" }, findById: { url: e + "/RoleMappings/:id", method: "GET" }, find: { isArray: !0, url: e + "/RoleMappings", method: "GET" }, findOne: { url: e + "/RoleMappings/findOne", method: "GET" }, updateAll: { url: e + "/RoleMappings/update", method: "POST" }, deleteById: { url: e + "/RoleMappings/:id", method: "DELETE" }, count: { url: e + "/RoleMappings/count", method: "GET" }, prototype$updateAttributes: { url: e + "/RoleMappings/:id", method: "PUT" }, createChangeStream: { url: e + "/RoleMappings/change-stream", method: "POST" }, "::findById::Role::principals": { params: { fk: "@fk" }, url: e + "/Roles/:id/principals/:fk", method: "GET" }, "::destroyById::Role::principals": { params: { fk: "@fk" }, url: e + "/Roles/:id/principals/:fk", method: "DELETE" }, "::updateById::Role::principals": { params: { fk: "@fk" }, url: e + "/Roles/:id/principals/:fk", method: "PUT" }, "::get::Role::principals": { isArray: !0, url: e + "/Roles/:id/principals", method: "GET" }, "::create::Role::principals": { url: e + "/Roles/:id/principals", method: "POST" }, "::createMany::Role::principals": { isArray: !0, url: e + "/Roles/:id/principals", method: "POST" }, "::delete::Role::principals": { url: e + "/Roles/:id/principals", method: "DELETE" }, "::count::Role::principals": { url: e + "/Roles/:id/principals/count", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "RoleMapping", d.role = function() { var a = c.get("Role"),
                    b = a["::get::RoleMapping::role"]; return b.apply(d, arguments) }, d }]), h.factory("Role", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/Roles/:id", { id: "@id" }, { prototype$__findById__principals: { params: { fk: "@fk" }, url: e + "/Roles/:id/principals/:fk", method: "GET" }, prototype$__destroyById__principals: { params: { fk: "@fk" }, url: e + "/Roles/:id/principals/:fk", method: "DELETE" }, prototype$__updateById__principals: { params: { fk: "@fk" }, url: e + "/Roles/:id/principals/:fk", method: "PUT" }, prototype$__get__principals: { isArray: !0, url: e + "/Roles/:id/principals", method: "GET" }, prototype$__create__principals: { url: e + "/Roles/:id/principals", method: "POST" }, prototype$__delete__principals: { url: e + "/Roles/:id/principals", method: "DELETE" }, prototype$__count__principals: { url: e + "/Roles/:id/principals/count", method: "GET" }, create: { url: e + "/Roles", method: "POST" }, createMany: { isArray: !0, url: e + "/Roles", method: "POST" }, upsert: { url: e + "/Roles", method: "PUT" }, exists: { url: e + "/Roles/:id/exists", method: "GET" }, findById: { url: e + "/Roles/:id", method: "GET" }, find: { isArray: !0, url: e + "/Roles", method: "GET" }, findOne: { url: e + "/Roles/findOne", method: "GET" }, updateAll: { url: e + "/Roles/update", method: "POST" }, deleteById: { url: e + "/Roles/:id", method: "DELETE" }, count: { url: e + "/Roles/count", method: "GET" }, prototype$updateAttributes: { url: e + "/Roles/:id", method: "PUT" }, createChangeStream: { url: e + "/Roles/change-stream", method: "POST" }, "::get::RoleMapping::role": { url: e + "/RoleMappings/:id/role", method: "GET" }, "::findById::user::roles": { params: { fk: "@fk" }, url: e + "/users/:id/roles/:fk", method: "GET" }, "::destroyById::user::roles": { params: { fk: "@fk" }, url: e + "/users/:id/roles/:fk", method: "DELETE" }, "::updateById::user::roles": { params: { fk: "@fk" }, url: e + "/users/:id/roles/:fk", method: "PUT" }, "::link::user::roles": { params: { fk: "@fk" }, url: e + "/users/:id/roles/rel/:fk", method: "PUT" }, "::unlink::user::roles": { params: { fk: "@fk" }, url: e + "/users/:id/roles/rel/:fk", method: "DELETE" }, "::exists::user::roles": { params: { fk: "@fk" }, url: e + "/users/:id/roles/rel/:fk", method: "HEAD" }, "::get::user::roles": { isArray: !0, url: e + "/users/:id/roles", method: "GET" }, "::create::user::roles": { url: e + "/users/:id/roles", method: "POST" }, "::createMany::user::roles": { isArray: !0, url: e + "/users/:id/roles", method: "POST" }, "::delete::user::roles": { url: e + "/users/:id/roles", method: "DELETE" }, "::count::user::roles": { url: e + "/users/:id/roles/count", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Role", d.principals = function() { var a = c.get("RoleMapping"),
                    b = a["::get::Role::principals"]; return b.apply(d, arguments) }, d.principals.count = function() { var a = c.get("RoleMapping"),
                    b = a["::count::Role::principals"]; return b.apply(d, arguments) }, d.principals.create = function() { var a = c.get("RoleMapping"),
                    b = a["::create::Role::principals"]; return b.apply(d, arguments) }, d.principals.createMany = function() { var a = c.get("RoleMapping"),
                    b = a["::createMany::Role::principals"]; return b.apply(d, arguments) }, d.principals.destroyAll = function() { var a = c.get("RoleMapping"),
                    b = a["::delete::Role::principals"]; return b.apply(d, arguments) }, d.principals.destroyById = function() { var a = c.get("RoleMapping"),
                    b = a["::destroyById::Role::principals"]; return b.apply(d, arguments) }, d.principals.findById = function() { var a = c.get("RoleMapping"),
                    b = a["::findById::Role::principals"]; return b.apply(d, arguments) }, d.principals.updateById = function() { var a = c.get("RoleMapping"),
                    b = a["::updateById::Role::principals"]; return b.apply(d, arguments) }, d }]), h.factory("UserCredential", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/userCredentials/:id", { id: "@id" }, { prototype$__get__user: { url: e + "/userCredentials/:id/user", method: "GET" }, create: { url: e + "/userCredentials", method: "POST" }, createMany: { isArray: !0, url: e + "/userCredentials", method: "POST" }, upsert: { url: e + "/userCredentials", method: "PUT" }, exists: { url: e + "/userCredentials/:id/exists", method: "GET" }, findById: { url: e + "/userCredentials/:id", method: "GET" }, find: { isArray: !0, url: e + "/userCredentials", method: "GET" }, findOne: { url: e + "/userCredentials/findOne", method: "GET" }, updateAll: { url: e + "/userCredentials/update", method: "POST" }, deleteById: { url: e + "/userCredentials/:id", method: "DELETE" }, count: { url: e + "/userCredentials/count", method: "GET" }, prototype$updateAttributes: { url: e + "/userCredentials/:id", method: "PUT" }, createChangeStream: { url: e + "/userCredentials/change-stream", method: "POST" }, "::findById::user::credentials": { params: { fk: "@fk" }, url: e + "/users/:id/credentials/:fk", method: "GET" }, "::destroyById::user::credentials": { params: { fk: "@fk" }, url: e + "/users/:id/credentials/:fk", method: "DELETE" }, "::updateById::user::credentials": { params: { fk: "@fk" }, url: e + "/users/:id/credentials/:fk", method: "PUT" }, "::get::user::credentials": { isArray: !0, url: e + "/users/:id/credentials", method: "GET" }, "::create::user::credentials": { url: e + "/users/:id/credentials", method: "POST" }, "::createMany::user::credentials": { isArray: !0, url: e + "/users/:id/credentials", method: "POST" }, "::delete::user::credentials": { url: e + "/users/:id/credentials", method: "DELETE" }, "::count::user::credentials": { url: e + "/users/:id/credentials/count", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "UserCredential", d.user = function() { var a = c.get("User"),
                    b = a["::get::userCredential::user"]; return b.apply(d, arguments) }, d }]), h.factory("UserIdentity", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/userIdentities/:id", { id: "@id" }, { prototype$__get__user: { url: e + "/userIdentities/:id/user", method: "GET" }, create: { url: e + "/userIdentities", method: "POST" }, createMany: { isArray: !0, url: e + "/userIdentities", method: "POST" }, upsert: { url: e + "/userIdentities", method: "PUT" }, exists: { url: e + "/userIdentities/:id/exists", method: "GET" }, findById: { url: e + "/userIdentities/:id", method: "GET" }, find: { isArray: !0, url: e + "/userIdentities", method: "GET" }, findOne: { url: e + "/userIdentities/findOne", method: "GET" }, updateAll: { url: e + "/userIdentities/update", method: "POST" }, deleteById: { url: e + "/userIdentities/:id", method: "DELETE" }, count: { url: e + "/userIdentities/count", method: "GET" }, prototype$updateAttributes: { url: e + "/userIdentities/:id", method: "PUT" }, createChangeStream: { url: e + "/userIdentities/change-stream", method: "POST" }, "::findById::user::identities": { params: { fk: "@fk" }, url: e + "/users/:id/identities/:fk", method: "GET" }, "::destroyById::user::identities": { params: { fk: "@fk" }, url: e + "/users/:id/identities/:fk", method: "DELETE" }, "::updateById::user::identities": { params: { fk: "@fk" }, url: e + "/users/:id/identities/:fk", method: "PUT" }, "::get::user::identities": { isArray: !0, url: e + "/users/:id/identities", method: "GET" }, "::create::user::identities": { url: e + "/users/:id/identities", method: "POST" }, "::createMany::user::identities": { isArray: !0, url: e + "/users/:id/identities", method: "POST" }, "::delete::user::identities": { url: e + "/users/:id/identities", method: "DELETE" }, "::count::user::identities": { url: e + "/users/:id/identities/count", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "UserIdentity", d.user = function() { var a = c.get("User"),
                    b = a["::get::userIdentity::user"]; return b.apply(d, arguments) }, d }]), h.factory("Setting", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/settings/:id", { id: "@id" }, { create: { url: e + "/settings", method: "POST" }, createMany: { isArray: !0, url: e + "/settings", method: "POST" }, upsert: { url: e + "/settings", method: "PUT" }, exists: { url: e + "/settings/:id/exists", method: "GET" }, findById: { url: e + "/settings/:id", method: "GET" }, find: { isArray: !0, url: e + "/settings", method: "GET" }, findOne: { url: e + "/settings/findOne", method: "GET" }, updateAll: { url: e + "/settings/update", method: "POST" }, deleteById: { url: e + "/settings/:id", method: "DELETE" }, count: { url: e + "/settings/count", method: "GET" }, prototype$updateAttributes: { url: e + "/settings/:id", method: "PUT" }, createChangeStream: { url: e + "/settings/change-stream", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Setting", d }]), h.factory("AuthProvider", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/AuthProviders/:id", { id: "@id" }, { create: { url: e + "/AuthProviders", method: "POST" }, createMany: { isArray: !0, url: e + "/AuthProviders", method: "POST" }, upsert: { url: e + "/AuthProviders", method: "PUT" }, exists: { url: e + "/AuthProviders/:id/exists", method: "GET" }, findById: { url: e + "/AuthProviders/:id", method: "GET" }, find: { isArray: !0, url: e + "/AuthProviders", method: "GET" }, findOne: { url: e + "/AuthProviders/findOne", method: "GET" }, updateAll: { url: e + "/AuthProviders/update", method: "POST" }, deleteById: { url: e + "/AuthProviders/:id", method: "DELETE" }, count: { url: e + "/AuthProviders/count", method: "GET" }, prototype$updateAttributes: { url: e + "/AuthProviders/:id", method: "PUT" }, createChangeStream: { url: e + "/AuthProviders/change-stream", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "AuthProvider", d }]), h.factory("User", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/users/:id", { id: "@id" }, { prototype$__findById__accessTokens: { params: { fk: "@fk" }, url: e + "/users/:id/accessTokens/:fk", method: "GET" }, prototype$__destroyById__accessTokens: { params: { fk: "@fk" }, url: e + "/users/:id/accessTokens/:fk", method: "DELETE" }, prototype$__updateById__accessTokens: { params: { fk: "@fk" }, url: e + "/users/:id/accessTokens/:fk", method: "PUT" }, prototype$__findById__identities: { params: { fk: "@fk" }, url: e + "/users/:id/identities/:fk", method: "GET" }, prototype$__destroyById__identities: { params: { fk: "@fk" }, url: e + "/users/:id/identities/:fk", method: "DELETE" }, prototype$__updateById__identities: { params: { fk: "@fk" }, url: e + "/users/:id/identities/:fk", method: "PUT" }, prototype$__findById__credentials: { params: { fk: "@fk" }, url: e + "/users/:id/credentials/:fk", method: "GET" }, prototype$__destroyById__credentials: { params: { fk: "@fk" }, url: e + "/users/:id/credentials/:fk", method: "DELETE" }, prototype$__updateById__credentials: { params: { fk: "@fk" }, url: e + "/users/:id/credentials/:fk", method: "PUT" }, prototype$__findById__roles: { params: { fk: "@fk" }, url: e + "/users/:id/roles/:fk", method: "GET" }, prototype$__destroyById__roles: { params: { fk: "@fk" }, url: e + "/users/:id/roles/:fk", method: "DELETE" }, prototype$__updateById__roles: { params: { fk: "@fk" }, url: e + "/users/:id/roles/:fk", method: "PUT" }, prototype$__link__roles: { params: { fk: "@fk" }, url: e + "/users/:id/roles/rel/:fk", method: "PUT" }, prototype$__unlink__roles: { params: { fk: "@fk" }, url: e + "/users/:id/roles/rel/:fk", method: "DELETE" }, prototype$__exists__roles: { params: { fk: "@fk" }, url: e + "/users/:id/roles/rel/:fk", method: "HEAD" }, prototype$__get__accessTokens: { isArray: !0, url: e + "/users/:id/accessTokens", method: "GET" }, prototype$__create__accessTokens: { url: e + "/users/:id/accessTokens", method: "POST" }, prototype$__delete__accessTokens: { url: e + "/users/:id/accessTokens", method: "DELETE" }, prototype$__count__accessTokens: { url: e + "/users/:id/accessTokens/count", method: "GET" }, prototype$__get__identities: { isArray: !0, url: e + "/users/:id/identities", method: "GET" }, prototype$__create__identities: { url: e + "/users/:id/identities", method: "POST" }, prototype$__delete__identities: { url: e + "/users/:id/identities", method: "DELETE" }, prototype$__count__identities: { url: e + "/users/:id/identities/count", method: "GET" }, prototype$__get__credentials: { isArray: !0, url: e + "/users/:id/credentials", method: "GET" }, prototype$__create__credentials: { url: e + "/users/:id/credentials", method: "POST" }, prototype$__delete__credentials: { url: e + "/users/:id/credentials", method: "DELETE" }, prototype$__count__credentials: { url: e + "/users/:id/credentials/count", method: "GET" }, prototype$__get__roles: { isArray: !0, url: e + "/users/:id/roles", method: "GET" }, prototype$__create__roles: { url: e + "/users/:id/roles", method: "POST" }, prototype$__delete__roles: { url: e + "/users/:id/roles", method: "DELETE" }, prototype$__count__roles: { url: e + "/users/:id/roles/count", method: "GET" }, create: { url: e + "/users", method: "POST" }, createMany: { isArray: !0, url: e + "/users", method: "POST" }, upsert: { url: e + "/users", method: "PUT" }, exists: { url: e + "/users/:id/exists", method: "GET" }, findById: { url: e + "/users/:id", method: "GET" }, find: { isArray: !0, url: e + "/users", method: "GET" }, findOne: { url: e + "/users/findOne", method: "GET" }, updateAll: { url: e + "/users/update", method: "POST" }, deleteById: { url: e + "/users/:id", method: "DELETE" }, count: { url: e + "/users/count", method: "GET" }, prototype$updateAttributes: { url: e + "/users/:id", method: "PUT" }, createChangeStream: { url: e + "/users/change-stream", method: "POST" }, login: { params: { include: "user" }, interceptor: { response: function(a) { var c = a.data; return b.setUser(c.id, c.userId, c.user), b.rememberMe = a.config.params.rememberMe !== !1, b.save(), a.resource } }, url: e + "/users/login", method: "POST" }, logout: { interceptor: { response: function(a) { return b.clearUser(), b.clearStorage(), a.resource }, responseError: function(a) { return b.clearUser(), b.clearStorage(), a.resource } }, url: e + "/users/logout", method: "POST" }, confirm: { url: e + "/users/confirm", method: "GET" }, resetPassword: { url: e + "/users/reset", method: "POST" }, "::get::accessToken::user": { url: e + "/accessTokens/:id/user", method: "GET" }, "::get::userCredential::user": { url: e + "/userCredentials/:id/user", method: "GET" }, "::get::userIdentity::user": { url: e + "/userIdentities/:id/user", method: "GET" }, getCurrent: { url: e + "/users/:id", method: "GET", params: { id: function() { var a = b.currentUserId; return null == a && (a = "__anonymous__"), a } }, interceptor: { response: function(a) { return b.currentUserData = a.data, a.resource } }, __isGetCurrentUser__: !0 } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.getCachedCurrent = function() { var a = b.currentUserData; return a ? new d(a) : null }, d.isAuthenticated = function() { return null != this.getCurrentId() }, d.getCurrentId = function() { return b.currentUserId }, d.modelName = "User", d.accessTokens = function() { var a = c.get("AccessToken"),
                    b = a["::get::user::accessTokens"]; return b.apply(d, arguments) }, d.accessTokens.count = function() { var a = c.get("AccessToken"),
                    b = a["::count::user::accessTokens"]; return b.apply(d, arguments) }, d.accessTokens.create = function() { var a = c.get("AccessToken"),
                    b = a["::create::user::accessTokens"]; return b.apply(d, arguments) }, d.accessTokens.createMany = function() { var a = c.get("AccessToken"),
                    b = a["::createMany::user::accessTokens"]; return b.apply(d, arguments) }, d.accessTokens.destroyAll = function() { var a = c.get("AccessToken"),
                    b = a["::delete::user::accessTokens"]; return b.apply(d, arguments) }, d.accessTokens.destroyById = function() { var a = c.get("AccessToken"),
                    b = a["::destroyById::user::accessTokens"]; return b.apply(d, arguments) }, d.accessTokens.findById = function() { var a = c.get("AccessToken"),
                    b = a["::findById::user::accessTokens"]; return b.apply(d, arguments) }, d.accessTokens.updateById = function() { var a = c.get("AccessToken"),
                    b = a["::updateById::user::accessTokens"]; return b.apply(d, arguments) }, d.identities = function() { var a = c.get("UserIdentity"),
                    b = a["::get::user::identities"]; return b.apply(d, arguments) }, d.identities.count = function() { var a = c.get("UserIdentity"),
                    b = a["::count::user::identities"]; return b.apply(d, arguments) }, d.identities.create = function() { var a = c.get("UserIdentity"),
                    b = a["::create::user::identities"]; return b.apply(d, arguments) }, d.identities.createMany = function() { var a = c.get("UserIdentity"),
                    b = a["::createMany::user::identities"]; return b.apply(d, arguments) }, d.identities.destroyAll = function() { var a = c.get("UserIdentity"),
                    b = a["::delete::user::identities"]; return b.apply(d, arguments) }, d.identities.destroyById = function() { var a = c.get("UserIdentity"),
                    b = a["::destroyById::user::identities"]; return b.apply(d, arguments) }, d.identities.findById = function() { var a = c.get("UserIdentity"),
                    b = a["::findById::user::identities"]; return b.apply(d, arguments) }, d.identities.updateById = function() { var a = c.get("UserIdentity"),
                    b = a["::updateById::user::identities"]; return b.apply(d, arguments) }, d.credentials = function() { var a = c.get("UserCredential"),
                    b = a["::get::user::credentials"]; return b.apply(d, arguments) }, d.credentials.count = function() { var a = c.get("UserCredential"),
                    b = a["::count::user::credentials"]; return b.apply(d, arguments) }, d.credentials.create = function() { var a = c.get("UserCredential"),
                    b = a["::create::user::credentials"]; return b.apply(d, arguments) }, d.credentials.createMany = function() { var a = c.get("UserCredential"),
                    b = a["::createMany::user::credentials"]; return b.apply(d, arguments) }, d.credentials.destroyAll = function() { var a = c.get("UserCredential"),
                    b = a["::delete::user::credentials"]; return b.apply(d, arguments) }, d.credentials.destroyById = function() { var a = c.get("UserCredential"),
                    b = a["::destroyById::user::credentials"]; return b.apply(d, arguments) }, d.credentials.findById = function() { var a = c.get("UserCredential"),
                    b = a["::findById::user::credentials"]; return b.apply(d, arguments) }, d.credentials.updateById = function() { var a = c.get("UserCredential"),
                    b = a["::updateById::user::credentials"]; return b.apply(d, arguments) }, d.roles = function() { var a = c.get("Role"),
                    b = a["::get::user::roles"]; return b.apply(d, arguments) }, d.roles.count = function() { var a = c.get("Role"),
                    b = a["::count::user::roles"]; return b.apply(d, arguments) }, d.roles.create = function() { var a = c.get("Role"),
                    b = a["::create::user::roles"]; return b.apply(d, arguments) }, d.roles.createMany = function() { var a = c.get("Role"),
                    b = a["::createMany::user::roles"]; return b.apply(d, arguments) }, d.roles.destroyAll = function() { var a = c.get("Role"),
                    b = a["::delete::user::roles"]; return b.apply(d, arguments) }, d.roles.destroyById = function() { var a = c.get("Role"),
                    b = a["::destroyById::user::roles"]; return b.apply(d, arguments) }, d.roles.exists = function() { var a = c.get("Role"),
                    b = a["::exists::user::roles"]; return b.apply(d, arguments) }, d.roles.findById = function() { var a = c.get("Role"),
                    b = a["::findById::user::roles"]; return b.apply(d, arguments) }, d.roles.link = function() { var a = c.get("Role"),
                    b = a["::link::user::roles"]; return b.apply(d, arguments) }, d.roles.unlink = function() { var a = c.get("Role"),
                    b = a["::unlink::user::roles"]; return b.apply(d, arguments) }, d.roles.updateById = function() { var a = c.get("Role"),
                    b = a["::updateById::user::roles"]; return b.apply(d, arguments) }, d }]), h.factory("Meta", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/Meta/:id", { id: "@id" }, { getModels: { isArray: !0, url: e + "/Meta", method: "GET" }, getModelById: { url: e + "/Meta/:name", method: "GET" } }); return d.modelName = "Meta", d }]), h.factory("Rode", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) {
            var d = a(e + "/rodes/:id", { id: "@id" }, {
                prototype$__findById__aPropagandaPoints: { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/:fk", method: "GET" },
                prototype$__destroyById__aPropagandaPoints: { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/:fk", method: "DELETE" },
                prototype$__updateById__aPropagandaPoints: { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/:fk", method: "PUT" },
                prototype$__link__aPropagandaPoints: { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/rel/:fk", method: "PUT" },
                prototype$__unlink__aPropagandaPoints: { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/rel/:fk", method: "DELETE" },
                prototype$__exists__aPropagandaPoints: { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/rel/:fk", method: "HEAD" },
                prototype$__findById__baseStations: { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/:fk", method: "GET" },
                prototype$__destroyById__baseStations: { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/:fk", method: "DELETE" },
                prototype$__updateById__baseStations: { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/:fk", method: "PUT" },
                prototype$__link__baseStations: { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/rel/:fk", method: "PUT" },
                prototype$__unlink__baseStations: { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/rel/:fk", method: "DELETE" },
                prototype$__exists__baseStations: { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/rel/:fk", method: "HEAD" },
                prototype$__findById__bridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/:fk", method: "GET" },
                prototype$__destroyById__bridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/:fk", method: "DELETE" },
                prototype$__updateById__bridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/:fk", method: "PUT" },
                prototype$__link__bridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/rel/:fk", method: "PUT" },
                prototype$__unlink__bridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/rel/:fk", method: "DELETE" },
                prototype$__exists__bridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/rel/:fk", method: "HEAD" },
                prototype$__findById__broadcastWarningPosts: { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/:fk", method: "GET" },
                prototype$__destroyById__broadcastWarningPosts: { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/:fk", method: "DELETE" },
                prototype$__updateById__broadcastWarningPosts: { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/:fk", method: "PUT" },
                prototype$__link__broadcastWarningPosts: { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/rel/:fk", method: "PUT" },
                prototype$__unlink__broadcastWarningPosts: { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/rel/:fk", method: "DELETE" },
                prototype$__exists__broadcastWarningPosts: { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/rel/:fk", method: "HEAD" },
                prototype$__findById__crossIronBridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/:fk", method: "GET" },
                prototype$__destroyById__crossIronBridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/:fk", method: "DELETE" },
                prototype$__updateById__crossIronBridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/:fk", method: "PUT" },
                prototype$__link__crossIronBridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/rel/:fk", method: "PUT" },
                prototype$__unlink__crossIronBridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/rel/:fk", method: "DELETE" },
                prototype$__exists__crossIronBridges: { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/rel/:fk", method: "HEAD" },
                prototype$__findById__culverts: { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/:fk", method: "GET" },
                prototype$__destroyById__culverts: { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/:fk", method: "DELETE" },
                prototype$__updateById__culverts: { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/:fk", method: "PUT" },
                prototype$__link__culverts: { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/rel/:fk", method: "PUT" },
                prototype$__unlink__culverts: { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/rel/:fk", method: "DELETE" },
                prototype$__exists__culverts: { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/rel/:fk", method: "HEAD" },
                prototype$__findById__hiddenDangerPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/:fk", method: "GET" },
                prototype$__destroyById__hiddenDangerPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/:fk", method: "DELETE" },
                prototype$__updateById__hiddenDangerPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/:fk", method: "PUT" },
                prototype$__link__hiddenDangerPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/rel/:fk", method: "PUT" },
                prototype$__unlink__hiddenDangerPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/rel/:fk", method: "DELETE" },
                prototype$__exists__hiddenDangerPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/rel/:fk", method: "HEAD" },
                prototype$__findById__fenceInfos: { params: { fk: "@fk" }, url: e + "/rodes/:id/fenceInfos/:fk", method: "GET" },
                prototype$__destroyById__fenceInfos: { params: { fk: "@fk" }, url: e + "/rodes/:id/fenceInfos/:fk", method: "DELETE" },
                prototype$__updateById__fenceInfos: { params: { fk: "@fk" }, url: e + "/rodes/:id/fenceInfos/:fk", method: "PUT" },
                prototype$__link__fenceInfos: { params: { fk: "@fk" }, url: e + "/rodes/:id/fenceInfos/rel/:fk", method: "PUT" },
                prototype$__unlink__fenceInfos: { params: { fk: "@fk" }, url: e + "/rodes/:id/fenceInfos/rel/:fk", method: "DELETE" },
                prototype$__exists__fenceInfos: { params: { fk: "@fk" }, url: e + "/rodes/:id/fenceInfos/rel/:fk", method: "HEAD" },
                prototype$__findById__keyPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/:fk", method: "GET" },
                prototype$__destroyById__keyPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/:fk", method: "DELETE" },
                prototype$__updateById__keyPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/:fk", method: "PUT" },
                prototype$__link__keyPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/rel/:fk", method: "PUT" },
                prototype$__unlink__keyPlaces: { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/rel/:fk", method: "DELETE" },
                prototype$__exists__keyPlaces: {
                    params: { fk: "@fk" },
                    url: e + "/rodes/:id/keyPlaces/rel/:fk",
                    method: "HEAD"
                },
                prototype$__findById__levelCrossings: { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/:fk", method: "GET" },
                prototype$__destroyById__levelCrossings: { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/:fk", method: "DELETE" },
                prototype$__updateById__levelCrossings: { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/:fk", method: "PUT" },
                prototype$__link__levelCrossings: { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/rel/:fk", method: "PUT" },
                prototype$__unlink__levelCrossings: { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/rel/:fk", method: "DELETE" },
                prototype$__exists__levelCrossings: { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/rel/:fk", method: "HEAD" },
                prototype$__findById__servicePorts: { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/:fk", method: "GET" },
                prototype$__destroyById__servicePorts: { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/:fk", method: "DELETE" },
                prototype$__updateById__servicePorts: { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/:fk", method: "PUT" },
                prototype$__link__servicePorts: { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/rel/:fk", method: "PUT" },
                prototype$__unlink__servicePorts: { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/rel/:fk", method: "DELETE" },
                prototype$__exists__servicePorts: { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/rel/:fk", method: "HEAD" },
                prototype$__findById__stations: { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/:fk", method: "GET" },
                prototype$__destroyById__stations: { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/:fk", method: "DELETE" },
                prototype$__updateById__stations: { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/:fk", method: "PUT" },
                prototype$__link__stations: { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/rel/:fk", method: "PUT" },
                prototype$__unlink__stations: { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/rel/:fk", method: "DELETE" },
                prototype$__exists__stations: { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/rel/:fk", method: "HEAD" },
                prototype$__findById__tunnels: { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/:fk", method: "GET" },
                prototype$__destroyById__tunnels: { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/:fk", method: "DELETE" },
                prototype$__updateById__tunnels: { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/:fk", method: "PUT" },
                prototype$__link__tunnels: { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/rel/:fk", method: "PUT" },
                prototype$__unlink__tunnels: { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/rel/:fk", method: "DELETE" },
                prototype$__exists__tunnels: { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/rel/:fk", method: "HEAD" },
                prototype$__get__aPropagandaPoints: { isArray: !0, url: e + "/rodes/:id/aPropagandaPoints", method: "GET" },
                prototype$__create__aPropagandaPoints: { url: e + "/rodes/:id/aPropagandaPoints", method: "POST" },
                prototype$__delete__aPropagandaPoints: { url: e + "/rodes/:id/aPropagandaPoints", method: "DELETE" },
                prototype$__count__aPropagandaPoints: { url: e + "/rodes/:id/aPropagandaPoints/count", method: "GET" },
                prototype$__get__baseStations: { isArray: !0, url: e + "/rodes/:id/baseStations", method: "GET" },
                prototype$__create__baseStations: { url: e + "/rodes/:id/baseStations", method: "POST" },
                prototype$__delete__baseStations: { url: e + "/rodes/:id/baseStations", method: "DELETE" },
                prototype$__count__baseStations: { url: e + "/rodes/:id/baseStations/count", method: "GET" },
                prototype$__get__bridges: { isArray: !0, url: e + "/rodes/:id/bridges", method: "GET" },
                prototype$__create__bridges: { url: e + "/rodes/:id/bridges", method: "POST" },
                prototype$__delete__bridges: { url: e + "/rodes/:id/bridges", method: "DELETE" },
                prototype$__count__bridges: { url: e + "/rodes/:id/bridges/count", method: "GET" },
                prototype$__get__broadcastWarningPosts: { isArray: !0, url: e + "/rodes/:id/broadcastWarningPosts", method: "GET" },
                prototype$__create__broadcastWarningPosts: { url: e + "/rodes/:id/broadcastWarningPosts", method: "POST" },
                prototype$__delete__broadcastWarningPosts: { url: e + "/rodes/:id/broadcastWarningPosts", method: "DELETE" },
                prototype$__count__broadcastWarningPosts: { url: e + "/rodes/:id/broadcastWarningPosts/count", method: "GET" },
                prototype$__get__crossIronBridges: { isArray: !0, url: e + "/rodes/:id/crossIronBridges", method: "GET" },
                prototype$__create__crossIronBridges: { url: e + "/rodes/:id/crossIronBridges", method: "POST" },
                prototype$__delete__crossIronBridges: { url: e + "/rodes/:id/crossIronBridges", method: "DELETE" },
                prototype$__count__crossIronBridges: { url: e + "/rodes/:id/crossIronBridges/count", method: "GET" },
                prototype$__get__culverts: { isArray: !0, url: e + "/rodes/:id/culverts", method: "GET" },
                prototype$__create__culverts: { url: e + "/rodes/:id/culverts", method: "POST" },
                prototype$__delete__culverts: { url: e + "/rodes/:id/culverts", method: "DELETE" },
                prototype$__count__culverts: { url: e + "/rodes/:id/culverts/count", method: "GET" },
                prototype$__get__hiddenDangerPlaces: { isArray: !0, url: e + "/rodes/:id/hiddenDangerPlaces", method: "GET" },
                prototype$__create__hiddenDangerPlaces: { url: e + "/rodes/:id/hiddenDangerPlaces", method: "POST" },
                prototype$__delete__hiddenDangerPlaces: { url: e + "/rodes/:id/hiddenDangerPlaces", method: "DELETE" },
                prototype$__count__hiddenDangerPlaces: { url: e + "/rodes/:id/hiddenDangerPlaces/count", method: "GET" },
                prototype$__get__fenceInfos: { isArray: !0, url: e + "/rodes/:id/fenceInfos", method: "GET" },
                prototype$__create__fenceInfos: { url: e + "/rodes/:id/fenceInfos", method: "POST" },
                prototype$__delete__fenceInfos: { url: e + "/rodes/:id/fenceInfos", method: "DELETE" },
                prototype$__count__fenceInfos: { url: e + "/rodes/:id/fenceInfos/count", method: "GET" },
                prototype$__get__keyPlaces: { isArray: !0, url: e + "/rodes/:id/keyPlaces", method: "GET" },
                prototype$__create__keyPlaces: { url: e + "/rodes/:id/keyPlaces", method: "POST" },
                prototype$__delete__keyPlaces: { url: e + "/rodes/:id/keyPlaces", method: "DELETE" },
                prototype$__count__keyPlaces: { url: e + "/rodes/:id/keyPlaces/count", method: "GET" },
                prototype$__get__levelCrossings: { isArray: !0, url: e + "/rodes/:id/levelCrossings", method: "GET" },
                prototype$__create__levelCrossings: { url: e + "/rodes/:id/levelCrossings", method: "POST" },
                prototype$__delete__levelCrossings: { url: e + "/rodes/:id/levelCrossings", method: "DELETE" },
                prototype$__count__levelCrossings: { url: e + "/rodes/:id/levelCrossings/count", method: "GET" },
                prototype$__get__servicePorts: { isArray: !0, url: e + "/rodes/:id/servicePorts", method: "GET" },
                prototype$__create__servicePorts: { url: e + "/rodes/:id/servicePorts", method: "POST" },
                prototype$__delete__servicePorts: { url: e + "/rodes/:id/servicePorts", method: "DELETE" },
                prototype$__count__servicePorts: { url: e + "/rodes/:id/servicePorts/count", method: "GET" },
                prototype$__get__stations: { isArray: !0, url: e + "/rodes/:id/stations", method: "GET" },
                prototype$__create__stations: { url: e + "/rodes/:id/stations", method: "POST" },
                prototype$__delete__stations: { url: e + "/rodes/:id/stations", method: "DELETE" },
                prototype$__count__stations: { url: e + "/rodes/:id/stations/count", method: "GET" },
                prototype$__get__tunnels: { isArray: !0, url: e + "/rodes/:id/tunnels", method: "GET" },
                prototype$__create__tunnels: { url: e + "/rodes/:id/tunnels", method: "POST" },
                prototype$__delete__tunnels: { url: e + "/rodes/:id/tunnels", method: "DELETE" },
                prototype$__count__tunnels: { url: e + "/rodes/:id/tunnels/count", method: "GET" },
                create: { url: e + "/rodes", method: "POST" },
                createMany: { isArray: !0, url: e + "/rodes", method: "POST" },
                upsert: { url: e + "/rodes", method: "PUT" },
                exists: { url: e + "/rodes/:id/exists", method: "GET" },
                findById: { url: e + "/rodes/:id", method: "GET" },
                find: { isArray: !0, url: e + "/rodes", method: "GET" },
                findOne: { url: e + "/rodes/findOne", method: "GET" },
                updateAll: { url: e + "/rodes/update", method: "POST" },
                deleteById: { url: e + "/rodes/:id", method: "DELETE" },
                count: { url: e + "/rodes/count", method: "GET" },
                prototype$updateAttributes: { url: e + "/rodes/:id", method: "PUT" },
                createChangeStream: { url: e + "/rodes/change-stream", method: "POST" },
                greet: { url: e + "/rodes/greet", method: "POST" },
                PagingFind: { url: e + "/rodes/PagingFind", method: "POST" },
                "::findById::Tunnel::rodes": { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/:fk", method: "GET" },
                "::destroyById::Tunnel::rodes": { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/:fk", method: "DELETE" },
                "::updateById::Tunnel::rodes": { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/:fk", method: "PUT" },
                "::link::Tunnel::rodes": { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::Tunnel::rodes": { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::Tunnel::rodes": { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::Tunnel::rodes": { isArray: !0, url: e + "/tunnels/:id/rodes", method: "GET" },
                "::create::Tunnel::rodes": { url: e + "/tunnels/:id/rodes", method: "POST" },
                "::createMany::Tunnel::rodes": { isArray: !0, url: e + "/tunnels/:id/rodes", method: "POST" },
                "::delete::Tunnel::rodes": { url: e + "/tunnels/:id/rodes", method: "DELETE" },
                "::count::Tunnel::rodes": { url: e + "/tunnels/:id/rodes/count", method: "GET" },
                "::findById::LevelCrossing::rodes": { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/:fk", method: "GET" },
                "::destroyById::LevelCrossing::rodes": { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/:fk", method: "DELETE" },
                "::updateById::LevelCrossing::rodes": { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/:fk", method: "PUT" },
                "::link::LevelCrossing::rodes": { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::LevelCrossing::rodes": { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::LevelCrossing::rodes": { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::LevelCrossing::rodes": { isArray: !0, url: e + "/LevelCrossings/:id/rodes", method: "GET" },
                "::create::LevelCrossing::rodes": { url: e + "/LevelCrossings/:id/rodes", method: "POST" },
                "::createMany::LevelCrossing::rodes": { isArray: !0, url: e + "/LevelCrossings/:id/rodes", method: "POST" },
                "::delete::LevelCrossing::rodes": { url: e + "/LevelCrossings/:id/rodes", method: "DELETE" },
                "::count::LevelCrossing::rodes": { url: e + "/LevelCrossings/:id/rodes/count", method: "GET" },
                "::findById::Culvert::rodes": { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/:fk", method: "GET" },
                "::destroyById::Culvert::rodes": { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/:fk", method: "DELETE" },
                "::updateById::Culvert::rodes": { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/:fk", method: "PUT" },
                "::link::Culvert::rodes": { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::Culvert::rodes": { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::Culvert::rodes": { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::Culvert::rodes": { isArray: !0, url: e + "/Culverts/:id/rodes", method: "GET" },
                "::create::Culvert::rodes": { url: e + "/Culverts/:id/rodes", method: "POST" },
                "::createMany::Culvert::rodes": { isArray: !0, url: e + "/Culverts/:id/rodes", method: "POST" },
                "::delete::Culvert::rodes": { url: e + "/Culverts/:id/rodes", method: "DELETE" },
                "::count::Culvert::rodes": { url: e + "/Culverts/:id/rodes/count", method: "GET" },
                "::findById::ServicePort::rodes": { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/:fk", method: "GET" },
                "::destroyById::ServicePort::rodes": { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/:fk", method: "DELETE" },
                "::updateById::ServicePort::rodes": { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/:fk", method: "PUT" },
                "::link::ServicePort::rodes": { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::ServicePort::rodes": { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::ServicePort::rodes": { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::ServicePort::rodes": { isArray: !0, url: e + "/ServicePorts/:id/rodes", method: "GET" },
                "::create::ServicePort::rodes": { url: e + "/ServicePorts/:id/rodes", method: "POST" },
                "::createMany::ServicePort::rodes": { isArray: !0, url: e + "/ServicePorts/:id/rodes", method: "POST" },
                "::delete::ServicePort::rodes": { url: e + "/ServicePorts/:id/rodes", method: "DELETE" },
                "::count::ServicePort::rodes": { url: e + "/ServicePorts/:id/rodes/count", method: "GET" },
                "::findById::BaseStation::rodes": { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/:fk", method: "GET" },
                "::destroyById::BaseStation::rodes": { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/:fk", method: "DELETE" },
                "::updateById::BaseStation::rodes": { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/:fk", method: "PUT" },
                "::link::BaseStation::rodes": { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::BaseStation::rodes": { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::BaseStation::rodes": { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::BaseStation::rodes": { isArray: !0, url: e + "/BaseStations/:id/rodes", method: "GET" },
                "::create::BaseStation::rodes": { url: e + "/BaseStations/:id/rodes", method: "POST" },
                "::createMany::BaseStation::rodes": { isArray: !0, url: e + "/BaseStations/:id/rodes", method: "POST" },
                "::delete::BaseStation::rodes": { url: e + "/BaseStations/:id/rodes", method: "DELETE" },
                "::count::BaseStation::rodes": { url: e + "/BaseStations/:id/rodes/count", method: "GET" },
                "::findById::KeyPlace::rodes": { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/:fk", method: "GET" },
                "::destroyById::KeyPlace::rodes": { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/:fk", method: "DELETE" },
                "::updateById::KeyPlace::rodes": { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/:fk", method: "PUT" },
                "::link::KeyPlace::rodes": { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::KeyPlace::rodes": { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::KeyPlace::rodes": { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::KeyPlace::rodes": { isArray: !0, url: e + "/KeyPlaces/:id/rodes", method: "GET" },
                "::create::KeyPlace::rodes": { url: e + "/KeyPlaces/:id/rodes", method: "POST" },
                "::createMany::KeyPlace::rodes": { isArray: !0, url: e + "/KeyPlaces/:id/rodes", method: "POST" },
                "::delete::KeyPlace::rodes": { url: e + "/KeyPlaces/:id/rodes", method: "DELETE" },
                "::count::KeyPlace::rodes": { url: e + "/KeyPlaces/:id/rodes/count", method: "GET" },
                "::findById::HiddenDangerPlace::rodes": { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/:fk", method: "GET" },
                "::destroyById::HiddenDangerPlace::rodes": { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/:fk", method: "DELETE" },
                "::updateById::HiddenDangerPlace::rodes": { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/:fk", method: "PUT" },
                "::link::HiddenDangerPlace::rodes": { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::HiddenDangerPlace::rodes": { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::HiddenDangerPlace::rodes": { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::HiddenDangerPlace::rodes": { isArray: !0, url: e + "/HiddenDangerPlaces/:id/rodes", method: "GET" },
                "::create::HiddenDangerPlace::rodes": { url: e + "/HiddenDangerPlaces/:id/rodes", method: "POST" },
                "::createMany::HiddenDangerPlace::rodes": { isArray: !0, url: e + "/HiddenDangerPlaces/:id/rodes", method: "POST" },
                "::delete::HiddenDangerPlace::rodes": { url: e + "/HiddenDangerPlaces/:id/rodes", method: "DELETE" },
                "::count::HiddenDangerPlace::rodes": { url: e + "/HiddenDangerPlaces/:id/rodes/count", method: "GET" },
                "::findById::APropagandaPoint::rodes": { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/:fk", method: "GET" },
                "::destroyById::APropagandaPoint::rodes": { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/:fk", method: "DELETE" },
                "::updateById::APropagandaPoint::rodes": { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/:fk", method: "PUT" },
                "::link::APropagandaPoint::rodes": { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::APropagandaPoint::rodes": { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::APropagandaPoint::rodes": { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::APropagandaPoint::rodes": { isArray: !0, url: e + "/APropagandaPoints/:id/rodes", method: "GET" },
                "::create::APropagandaPoint::rodes": { url: e + "/APropagandaPoints/:id/rodes", method: "POST" },
                "::createMany::APropagandaPoint::rodes": { isArray: !0, url: e + "/APropagandaPoints/:id/rodes", method: "POST" },
                "::delete::APropagandaPoint::rodes": { url: e + "/APropagandaPoints/:id/rodes", method: "DELETE" },
                "::count::APropagandaPoint::rodes": { url: e + "/APropagandaPoints/:id/rodes/count", method: "GET" },
                "::findById::Station::rodes": { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/:fk", method: "GET" },
                "::destroyById::Station::rodes": { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/:fk", method: "DELETE" },
                "::updateById::Station::rodes": { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/:fk", method: "PUT" },
                "::link::Station::rodes": { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::Station::rodes": { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::Station::rodes": { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::Station::rodes": { isArray: !0, url: e + "/Stations/:id/rodes", method: "GET" },
                "::create::Station::rodes": { url: e + "/Stations/:id/rodes", method: "POST" },
                "::createMany::Station::rodes": { isArray: !0, url: e + "/Stations/:id/rodes", method: "POST" },
                "::delete::Station::rodes": { url: e + "/Stations/:id/rodes", method: "DELETE" },
                "::count::Station::rodes": { url: e + "/Stations/:id/rodes/count", method: "GET" },
                "::findById::FenceInfo::rodes": { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/:fk", method: "GET" },
                "::destroyById::FenceInfo::rodes": { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/:fk", method: "DELETE" },
                "::updateById::FenceInfo::rodes": { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/:fk", method: "PUT" },
                "::link::FenceInfo::rodes": { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/rel/:fk", method: "PUT" },
                "::unlink::FenceInfo::rodes": { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/rel/:fk", method: "DELETE" },
                "::exists::FenceInfo::rodes": { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/rel/:fk", method: "HEAD" },
                "::get::FenceInfo::rodes": { isArray: !0, url: e + "/FenceInfos/:id/rodes", method: "GET" },
                "::create::FenceInfo::rodes": { url: e + "/FenceInfos/:id/rodes", method: "POST" },
                "::createMany::FenceInfo::rodes": { isArray: !0, url: e + "/FenceInfos/:id/rodes", method: "POST" },
                "::delete::FenceInfo::rodes": { url: e + "/FenceInfos/:id/rodes", method: "DELETE" },
                "::count::FenceInfo::rodes": { url: e + "/FenceInfos/:id/rodes/count", method: "GET" },
                "::get::RodeContain::rode": { url: e + "/RodeContains/:id/rode", method: "GET" }
            });
            return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Rode", d.aPropagandaPoints = function() { var a = c.get("APropagandaPoint"),
                    b = a["::get::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.count = function() { var a = c.get("APropagandaPoint"),
                    b = a["::count::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.create = function() { var a = c.get("APropagandaPoint"),
                    b = a["::create::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.createMany = function() { var a = c.get("APropagandaPoint"),
                    b = a["::createMany::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.destroyAll = function() { var a = c.get("APropagandaPoint"),
                    b = a["::delete::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.destroyById = function() { var a = c.get("APropagandaPoint"),
                    b = a["::destroyById::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.exists = function() { var a = c.get("APropagandaPoint"),
                    b = a["::exists::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.findById = function() { var a = c.get("APropagandaPoint"),
                    b = a["::findById::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.link = function() { var a = c.get("APropagandaPoint"),
                    b = a["::link::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.unlink = function() { var a = c.get("APropagandaPoint"),
                    b = a["::unlink::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.aPropagandaPoints.updateById = function() { var a = c.get("APropagandaPoint"),
                    b = a["::updateById::Rode::aPropagandaPoints"]; return b.apply(d, arguments) }, d.baseStations = function() { var a = c.get("BaseStation"),
                    b = a["::get::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.count = function() { var a = c.get("BaseStation"),
                    b = a["::count::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.create = function() { var a = c.get("BaseStation"),
                    b = a["::create::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.createMany = function() { var a = c.get("BaseStation"),
                    b = a["::createMany::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.destroyAll = function() { var a = c.get("BaseStation"),
                    b = a["::delete::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.destroyById = function() { var a = c.get("BaseStation"),
                    b = a["::destroyById::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.exists = function() { var a = c.get("BaseStation"),
                    b = a["::exists::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.findById = function() { var a = c.get("BaseStation"),
                    b = a["::findById::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.link = function() { var a = c.get("BaseStation"),
                    b = a["::link::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.unlink = function() { var a = c.get("BaseStation"),
                    b = a["::unlink::Rode::baseStations"]; return b.apply(d, arguments) }, d.baseStations.updateById = function() { var a = c.get("BaseStation"),
                    b = a["::updateById::Rode::baseStations"]; return b.apply(d, arguments) }, d.bridges = function() { var a = c.get("Bridge"),
                    b = a["::get::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.count = function() { var a = c.get("Bridge"),
                    b = a["::count::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.create = function() { var a = c.get("Bridge"),
                    b = a["::create::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.createMany = function() { var a = c.get("Bridge"),
                    b = a["::createMany::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.destroyAll = function() { var a = c.get("Bridge"),
                    b = a["::delete::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.destroyById = function() { var a = c.get("Bridge"),
                    b = a["::destroyById::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.exists = function() { var a = c.get("Bridge"),
                    b = a["::exists::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.findById = function() { var a = c.get("Bridge"),
                    b = a["::findById::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.link = function() { var a = c.get("Bridge"),
                    b = a["::link::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.unlink = function() { var a = c.get("Bridge"),
                    b = a["::unlink::Rode::bridges"]; return b.apply(d, arguments) }, d.bridges.updateById = function() { var a = c.get("Bridge"),
                    b = a["::updateById::Rode::bridges"]; return b.apply(d, arguments) }, d.broadcastWarningPosts = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::get::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.count = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::count::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.create = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::create::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.createMany = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::createMany::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.destroyAll = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::delete::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.destroyById = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::destroyById::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.exists = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::exists::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.findById = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::findById::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.link = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::link::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.unlink = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::unlink::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.broadcastWarningPosts.updateById = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::updateById::Rode::broadcastWarningPosts"]; return b.apply(d, arguments) }, d.crossIronBridges = function() { var a = c.get("CrossIronBridge"),
                    b = a["::get::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.count = function() { var a = c.get("CrossIronBridge"),
                    b = a["::count::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.create = function() { var a = c.get("CrossIronBridge"),
                    b = a["::create::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.createMany = function() { var a = c.get("CrossIronBridge"),
                    b = a["::createMany::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.destroyAll = function() { var a = c.get("CrossIronBridge"),
                    b = a["::delete::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.destroyById = function() { var a = c.get("CrossIronBridge"),
                    b = a["::destroyById::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.exists = function() { var a = c.get("CrossIronBridge"),
                    b = a["::exists::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.findById = function() { var a = c.get("CrossIronBridge"),
                    b = a["::findById::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.link = function() { var a = c.get("CrossIronBridge"),
                    b = a["::link::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.unlink = function() { var a = c.get("CrossIronBridge"),
                    b = a["::unlink::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.crossIronBridges.updateById = function() { var a = c.get("CrossIronBridge"),
                    b = a["::updateById::Rode::crossIronBridges"]; return b.apply(d, arguments) }, d.culverts = function() { var a = c.get("Culvert"),
                    b = a["::get::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.count = function() { var a = c.get("Culvert"),
                    b = a["::count::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.create = function() { var a = c.get("Culvert"),
                    b = a["::create::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.createMany = function() { var a = c.get("Culvert"),
                    b = a["::createMany::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.destroyAll = function() { var a = c.get("Culvert"),
                    b = a["::delete::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.destroyById = function() { var a = c.get("Culvert"),
                    b = a["::destroyById::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.exists = function() { var a = c.get("Culvert"),
                    b = a["::exists::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.findById = function() { var a = c.get("Culvert"),
                    b = a["::findById::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.link = function() { var a = c.get("Culvert"),
                    b = a["::link::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.unlink = function() { var a = c.get("Culvert"),
                    b = a["::unlink::Rode::culverts"]; return b.apply(d, arguments) }, d.culverts.updateById = function() { var a = c.get("Culvert"),
                    b = a["::updateById::Rode::culverts"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::get::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.count = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::count::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.create = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::create::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.createMany = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::createMany::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.destroyAll = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::delete::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.destroyById = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::destroyById::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.exists = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::exists::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.findById = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::findById::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.link = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::link::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.unlink = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::unlink::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.hiddenDangerPlaces.updateById = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::updateById::Rode::hiddenDangerPlaces"]; return b.apply(d, arguments) }, d.keyPlaces = function() { var a = c.get("KeyPlace"),
                    b = a["::get::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.count = function() { var a = c.get("KeyPlace"),
                    b = a["::count::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.create = function() { var a = c.get("KeyPlace"),
                    b = a["::create::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.createMany = function() { var a = c.get("KeyPlace"),
                    b = a["::createMany::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.destroyAll = function() { var a = c.get("KeyPlace"),
                    b = a["::delete::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.destroyById = function() { var a = c.get("KeyPlace"),
                    b = a["::destroyById::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.exists = function() { var a = c.get("KeyPlace"),
                    b = a["::exists::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.findById = function() { var a = c.get("KeyPlace"),
                    b = a["::findById::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.link = function() { var a = c.get("KeyPlace"),
                    b = a["::link::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.unlink = function() { var a = c.get("KeyPlace"),
                    b = a["::unlink::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.keyPlaces.updateById = function() { var a = c.get("KeyPlace"),
                    b = a["::updateById::Rode::keyPlaces"]; return b.apply(d, arguments) }, d.levelCrossings = function() { var a = c.get("LevelCrossing"),
                    b = a["::get::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.count = function() { var a = c.get("LevelCrossing"),
                    b = a["::count::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.create = function() { var a = c.get("LevelCrossing"),
                    b = a["::create::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.createMany = function() { var a = c.get("LevelCrossing"),
                    b = a["::createMany::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.destroyAll = function() { var a = c.get("LevelCrossing"),
                    b = a["::delete::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.destroyById = function() { var a = c.get("LevelCrossing"),
                    b = a["::destroyById::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.exists = function() { var a = c.get("LevelCrossing"),
                    b = a["::exists::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.findById = function() { var a = c.get("LevelCrossing"),
                    b = a["::findById::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.link = function() { var a = c.get("LevelCrossing"),
                    b = a["::link::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.unlink = function() { var a = c.get("LevelCrossing"),
                    b = a["::unlink::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.levelCrossings.updateById = function() { var a = c.get("LevelCrossing"),
                    b = a["::updateById::Rode::levelCrossings"]; return b.apply(d, arguments) }, d.servicePorts = function() { var a = c.get("ServicePort"),
                    b = a["::get::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.count = function() { var a = c.get("ServicePort"),
                    b = a["::count::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.create = function() { var a = c.get("ServicePort"),
                    b = a["::create::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.createMany = function() { var a = c.get("ServicePort"),
                    b = a["::createMany::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.destroyAll = function() { var a = c.get("ServicePort"),
                    b = a["::delete::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.destroyById = function() { var a = c.get("ServicePort"),
                    b = a["::destroyById::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.exists = function() {
                var a = c.get("ServicePort"),
                    b = a["::exists::Rode::servicePorts"];
                return b.apply(d, arguments)
            }, d.servicePorts.findById = function() { var a = c.get("ServicePort"),
                    b = a["::findById::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.link = function() { var a = c.get("ServicePort"),
                    b = a["::link::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.unlink = function() { var a = c.get("ServicePort"),
                    b = a["::unlink::Rode::servicePorts"]; return b.apply(d, arguments) }, d.servicePorts.updateById = function() { var a = c.get("ServicePort"),
                    b = a["::updateById::Rode::servicePorts"]; return b.apply(d, arguments) }, d.stations = function() { var a = c.get("Station"),
                    b = a["::get::Rode::stations"]; return b.apply(d, arguments) }, d.stations.count = function() { var a = c.get("Station"),
                    b = a["::count::Rode::stations"]; return b.apply(d, arguments) }, d.stations.create = function() { var a = c.get("Station"),
                    b = a["::create::Rode::stations"]; return b.apply(d, arguments) }, d.stations.createMany = function() { var a = c.get("Station"),
                    b = a["::createMany::Rode::stations"]; return b.apply(d, arguments) }, d.stations.destroyAll = function() { var a = c.get("Station"),
                    b = a["::delete::Rode::stations"]; return b.apply(d, arguments) }, d.stations.destroyById = function() { var a = c.get("Station"),
                    b = a["::destroyById::Rode::stations"]; return b.apply(d, arguments) }, d.stations.exists = function() { var a = c.get("Station"),
                    b = a["::exists::Rode::stations"]; return b.apply(d, arguments) }, d.stations.findById = function() { var a = c.get("Station"),
                    b = a["::findById::Rode::stations"]; return b.apply(d, arguments) }, d.stations.link = function() { var a = c.get("Station"),
                    b = a["::link::Rode::stations"]; return b.apply(d, arguments) }, d.stations.unlink = function() { var a = c.get("Station"),
                    b = a["::unlink::Rode::stations"]; return b.apply(d, arguments) }, d.stations.updateById = function() { var a = c.get("Station"),
                    b = a["::updateById::Rode::stations"]; return b.apply(d, arguments) }, d.tunnels = function() { var a = c.get("Tunnel"),
                    b = a["::get::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.count = function() { var a = c.get("Tunnel"),
                    b = a["::count::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.create = function() { var a = c.get("Tunnel"),
                    b = a["::create::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.createMany = function() { var a = c.get("Tunnel"),
                    b = a["::createMany::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.destroyAll = function() { var a = c.get("Tunnel"),
                    b = a["::delete::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.destroyById = function() { var a = c.get("Tunnel"),
                    b = a["::destroyById::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.exists = function() { var a = c.get("Tunnel"),
                    b = a["::exists::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.findById = function() { var a = c.get("Tunnel"),
                    b = a["::findById::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.link = function() { var a = c.get("Tunnel"),
                    b = a["::link::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.unlink = function() { var a = c.get("Tunnel"),
                    b = a["::unlink::Rode::tunnels"]; return b.apply(d, arguments) }, d.tunnels.updateById = function() { var a = c.get("Tunnel"),
                    b = a["::updateById::Rode::tunnels"]; return b.apply(d, arguments) }, d
        }]), h.factory("Bridge", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/Bridges/:id", { id: "@id" }, { create: { url: e + "/Bridges", method: "POST" }, createMany: { isArray: !0, url: e + "/Bridges", method: "POST" }, upsert: { url: e + "/Bridges", method: "PUT" }, exists: { url: e + "/Bridges/:id/exists", method: "GET" }, findById: { url: e + "/Bridges/:id", method: "GET" }, find: { isArray: !0, url: e + "/Bridges", method: "GET" }, findOne: { url: e + "/Bridges/findOne", method: "GET" }, updateAll: { url: e + "/Bridges/update", method: "POST" }, deleteById: { url: e + "/Bridges/:id", method: "DELETE" }, count: { url: e + "/Bridges/count", method: "GET" }, prototype$updateAttributes: { url: e + "/Bridges/:id", method: "PUT" }, createChangeStream: { url: e + "/Bridges/change-stream", method: "POST" }, "::findById::Rode::bridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/:fk", method: "GET" }, "::destroyById::Rode::bridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/:fk", method: "DELETE" }, "::updateById::Rode::bridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/:fk", method: "PUT" }, "::link::Rode::bridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/rel/:fk", method: "PUT" }, "::unlink::Rode::bridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/rel/:fk", method: "DELETE" }, "::exists::Rode::bridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/bridges/rel/:fk", method: "HEAD" }, "::get::Rode::bridges": { isArray: !0, url: e + "/rodes/:id/bridges", method: "GET" }, "::create::Rode::bridges": { url: e + "/rodes/:id/bridges", method: "POST" }, "::createMany::Rode::bridges": { isArray: !0, url: e + "/rodes/:id/bridges", method: "POST" }, "::delete::Rode::bridges": { url: e + "/rodes/:id/bridges", method: "DELETE" }, "::count::Rode::bridges": { url: e + "/rodes/:id/bridges/count", method: "GET" }, "::get::RodeContain::bridge": { url: e + "/RodeContains/:id/bridge", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Bridge", d }]), h.factory("Tunnel", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/tunnels/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/tunnels/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/tunnels/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/tunnels/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/tunnels/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/tunnels/:id/rodes/count", method: "GET" }, create: { url: e + "/tunnels", method: "POST" }, createMany: { isArray: !0, url: e + "/tunnels", method: "POST" }, upsert: { url: e + "/tunnels", method: "PUT" }, exists: { url: e + "/tunnels/:id/exists", method: "GET" }, findById: { url: e + "/tunnels/:id", method: "GET" }, find: { isArray: !0, url: e + "/tunnels", method: "GET" }, findOne: { url: e + "/tunnels/findOne", method: "GET" }, updateAll: { url: e + "/tunnels/update", method: "POST" }, deleteById: { url: e + "/tunnels/:id", method: "DELETE" }, count: { url: e + "/tunnels/count", method: "GET" }, prototype$updateAttributes: { url: e + "/tunnels/:id", method: "PUT" }, createChangeStream: { url: e + "/tunnels/change-stream", method: "POST" }, "::findById::Rode::tunnels": { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/:fk", method: "GET" }, "::destroyById::Rode::tunnels": { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/:fk", method: "DELETE" }, "::updateById::Rode::tunnels": { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/:fk", method: "PUT" }, "::link::Rode::tunnels": { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/rel/:fk", method: "PUT" }, "::unlink::Rode::tunnels": { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/rel/:fk", method: "DELETE" }, "::exists::Rode::tunnels": { params: { fk: "@fk" }, url: e + "/rodes/:id/tunnels/rel/:fk", method: "HEAD" }, "::get::Rode::tunnels": { isArray: !0, url: e + "/rodes/:id/tunnels", method: "GET" }, "::create::Rode::tunnels": { url: e + "/rodes/:id/tunnels", method: "POST" }, "::createMany::Rode::tunnels": { isArray: !0, url: e + "/rodes/:id/tunnels", method: "POST" }, "::delete::Rode::tunnels": { url: e + "/rodes/:id/tunnels", method: "DELETE" }, "::count::Rode::tunnels": { url: e + "/rodes/:id/tunnels/count", method: "GET" }, "::get::RodeContain::tunnel": { url: e + "/RodeContains/:id/tunnel", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Tunnel", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::Tunnel::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::Tunnel::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("LevelCrossing", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/LevelCrossings/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/LevelCrossings/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/LevelCrossings/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/LevelCrossings/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/LevelCrossings/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/LevelCrossings/:id/rodes/count", method: "GET" }, create: { url: e + "/LevelCrossings", method: "POST" }, createMany: { isArray: !0, url: e + "/LevelCrossings", method: "POST" }, upsert: { url: e + "/LevelCrossings", method: "PUT" }, exists: { url: e + "/LevelCrossings/:id/exists", method: "GET" }, findById: { url: e + "/LevelCrossings/:id", method: "GET" }, find: { isArray: !0, url: e + "/LevelCrossings", method: "GET" }, findOne: { url: e + "/LevelCrossings/findOne", method: "GET" }, updateAll: { url: e + "/LevelCrossings/update", method: "POST" }, deleteById: { url: e + "/LevelCrossings/:id", method: "DELETE" }, count: { url: e + "/LevelCrossings/count", method: "GET" }, prototype$updateAttributes: { url: e + "/LevelCrossings/:id", method: "PUT" }, createChangeStream: { url: e + "/LevelCrossings/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/LevelCrossings/fuzzyQuery", method: "POST" }, "::findById::Rode::levelCrossings": { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/:fk", method: "GET" }, "::destroyById::Rode::levelCrossings": { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/:fk", method: "DELETE" }, "::updateById::Rode::levelCrossings": { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/:fk", method: "PUT" }, "::link::Rode::levelCrossings": { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/rel/:fk", method: "PUT" }, "::unlink::Rode::levelCrossings": { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/rel/:fk", method: "DELETE" }, "::exists::Rode::levelCrossings": { params: { fk: "@fk" }, url: e + "/rodes/:id/levelCrossings/rel/:fk", method: "HEAD" }, "::get::Rode::levelCrossings": { isArray: !0, url: e + "/rodes/:id/levelCrossings", method: "GET" }, "::create::Rode::levelCrossings": { url: e + "/rodes/:id/levelCrossings", method: "POST" }, "::createMany::Rode::levelCrossings": { isArray: !0, url: e + "/rodes/:id/levelCrossings", method: "POST" }, "::delete::Rode::levelCrossings": { url: e + "/rodes/:id/levelCrossings", method: "DELETE" }, "::count::Rode::levelCrossings": { url: e + "/rodes/:id/levelCrossings/count", method: "GET" }, "::get::RodeContain::levelCrossing": { url: e + "/RodeContains/:id/levelCrossing", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "LevelCrossing", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::LevelCrossing::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("Culvert", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/Culverts/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/Culverts/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/Culverts/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/Culverts/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/Culverts/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/Culverts/:id/rodes/count", method: "GET" }, create: { url: e + "/Culverts", method: "POST" }, createMany: { isArray: !0, url: e + "/Culverts", method: "POST" }, upsert: { url: e + "/Culverts", method: "PUT" }, exists: { url: e + "/Culverts/:id/exists", method: "GET" }, findById: { url: e + "/Culverts/:id", method: "GET" }, find: { isArray: !0, url: e + "/Culverts", method: "GET" }, findOne: { url: e + "/Culverts/findOne", method: "GET" }, updateAll: { url: e + "/Culverts/update", method: "POST" }, deleteById: { url: e + "/Culverts/:id", method: "DELETE" }, count: { url: e + "/Culverts/count", method: "GET" }, prototype$updateAttributes: { url: e + "/Culverts/:id", method: "PUT" }, createChangeStream: { url: e + "/Culverts/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/Culverts/fuzzyQuery", method: "POST" }, "::findById::Rode::culverts": { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/:fk", method: "GET" }, "::destroyById::Rode::culverts": { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/:fk", method: "DELETE" }, "::updateById::Rode::culverts": { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/:fk", method: "PUT" }, "::link::Rode::culverts": { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/rel/:fk", method: "PUT" }, "::unlink::Rode::culverts": { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/rel/:fk", method: "DELETE" }, "::exists::Rode::culverts": { params: { fk: "@fk" }, url: e + "/rodes/:id/culverts/rel/:fk", method: "HEAD" }, "::get::Rode::culverts": { isArray: !0, url: e + "/rodes/:id/culverts", method: "GET" }, "::create::Rode::culverts": { url: e + "/rodes/:id/culverts", method: "POST" }, "::createMany::Rode::culverts": { isArray: !0, url: e + "/rodes/:id/culverts", method: "POST" }, "::delete::Rode::culverts": { url: e + "/rodes/:id/culverts", method: "DELETE" }, "::count::Rode::culverts": { url: e + "/rodes/:id/culverts/count", method: "GET" }, "::get::RodeContain::culvert": { url: e + "/RodeContains/:id/culvert", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Culvert", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::Culvert::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::Culvert::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("CrossIronBridge", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/CrossIronBridges/:id", { id: "@id" }, { create: { url: e + "/CrossIronBridges", method: "POST" }, createMany: { isArray: !0, url: e + "/CrossIronBridges", method: "POST" }, upsert: { url: e + "/CrossIronBridges", method: "PUT" }, exists: { url: e + "/CrossIronBridges/:id/exists", method: "GET" }, findById: { url: e + "/CrossIronBridges/:id", method: "GET" }, find: { isArray: !0, url: e + "/CrossIronBridges", method: "GET" }, findOne: { url: e + "/CrossIronBridges/findOne", method: "GET" }, updateAll: { url: e + "/CrossIronBridges/update", method: "POST" }, deleteById: { url: e + "/CrossIronBridges/:id", method: "DELETE" }, count: { url: e + "/CrossIronBridges/count", method: "GET" }, prototype$updateAttributes: { url: e + "/CrossIronBridges/:id", method: "PUT" }, createChangeStream: { url: e + "/CrossIronBridges/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/CrossIronBridges/fuzzyQuery", method: "POST" }, "::findById::Rode::crossIronBridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/:fk", method: "GET" }, "::destroyById::Rode::crossIronBridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/:fk", method: "DELETE" }, "::updateById::Rode::crossIronBridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/:fk", method: "PUT" }, "::link::Rode::crossIronBridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/rel/:fk", method: "PUT" }, "::unlink::Rode::crossIronBridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/rel/:fk", method: "DELETE" }, "::exists::Rode::crossIronBridges": { params: { fk: "@fk" }, url: e + "/rodes/:id/crossIronBridges/rel/:fk", method: "HEAD" }, "::get::Rode::crossIronBridges": { isArray: !0, url: e + "/rodes/:id/crossIronBridges", method: "GET" }, "::create::Rode::crossIronBridges": { url: e + "/rodes/:id/crossIronBridges", method: "POST" }, "::createMany::Rode::crossIronBridges": { isArray: !0, url: e + "/rodes/:id/crossIronBridges", method: "POST" }, "::delete::Rode::crossIronBridges": { url: e + "/rodes/:id/crossIronBridges", method: "DELETE" }, "::count::Rode::crossIronBridges": { url: e + "/rodes/:id/crossIronBridges/count", method: "GET" }, "::get::RodeContain::crossIronBridge": { url: e + "/RodeContains/:id/crossIronBridge", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "CrossIronBridge", d }]), h.factory("ServicePort", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/ServicePorts/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/ServicePorts/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/ServicePorts/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/ServicePorts/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/ServicePorts/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/ServicePorts/:id/rodes/count", method: "GET" }, create: { url: e + "/ServicePorts", method: "POST" }, createMany: { isArray: !0, url: e + "/ServicePorts", method: "POST" }, upsert: { url: e + "/ServicePorts", method: "PUT" }, exists: { url: e + "/ServicePorts/:id/exists", method: "GET" }, findById: { url: e + "/ServicePorts/:id", method: "GET" }, find: { isArray: !0, url: e + "/ServicePorts", method: "GET" }, findOne: { url: e + "/ServicePorts/findOne", method: "GET" }, updateAll: { url: e + "/ServicePorts/update", method: "POST" }, deleteById: { url: e + "/ServicePorts/:id", method: "DELETE" }, count: { url: e + "/ServicePorts/count", method: "GET" }, prototype$updateAttributes: { url: e + "/ServicePorts/:id", method: "PUT" }, createChangeStream: { url: e + "/ServicePorts/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/ServicePorts/fuzzyQuery", method: "POST" }, "::findById::Rode::servicePorts": { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/:fk", method: "GET" }, "::destroyById::Rode::servicePorts": { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/:fk", method: "DELETE" }, "::updateById::Rode::servicePorts": { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/:fk", method: "PUT" }, "::link::Rode::servicePorts": { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/rel/:fk", method: "PUT" }, "::unlink::Rode::servicePorts": { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/rel/:fk", method: "DELETE" }, "::exists::Rode::servicePorts": { params: { fk: "@fk" }, url: e + "/rodes/:id/servicePorts/rel/:fk", method: "HEAD" }, "::get::Rode::servicePorts": { isArray: !0, url: e + "/rodes/:id/servicePorts", method: "GET" }, "::create::Rode::servicePorts": { url: e + "/rodes/:id/servicePorts", method: "POST" }, "::createMany::Rode::servicePorts": { isArray: !0, url: e + "/rodes/:id/servicePorts", method: "POST" }, "::delete::Rode::servicePorts": { url: e + "/rodes/:id/servicePorts", method: "DELETE" }, "::count::Rode::servicePorts": { url: e + "/rodes/:id/servicePorts/count", method: "GET" }, "::get::RodeContain::servicePort": { url: e + "/RodeContains/:id/servicePort", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "ServicePort", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::ServicePort::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::ServicePort::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("BaseStation", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/BaseStations/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/BaseStations/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/BaseStations/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/BaseStations/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/BaseStations/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/BaseStations/:id/rodes/count", method: "GET" }, create: { url: e + "/BaseStations", method: "POST" }, createMany: { isArray: !0, url: e + "/BaseStations", method: "POST" }, upsert: { url: e + "/BaseStations", method: "PUT" }, exists: { url: e + "/BaseStations/:id/exists", method: "GET" }, findById: { url: e + "/BaseStations/:id", method: "GET" }, find: { isArray: !0, url: e + "/BaseStations", method: "GET" }, findOne: { url: e + "/BaseStations/findOne", method: "GET" }, updateAll: { url: e + "/BaseStations/update", method: "POST" }, deleteById: { url: e + "/BaseStations/:id", method: "DELETE" }, count: { url: e + "/BaseStations/count", method: "GET" }, prototype$updateAttributes: { url: e + "/BaseStations/:id", method: "PUT" }, createChangeStream: { url: e + "/BaseStations/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/BaseStations/fuzzyQuery", method: "POST" }, "::findById::Rode::baseStations": { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/:fk", method: "GET" }, "::destroyById::Rode::baseStations": { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/:fk", method: "DELETE" }, "::updateById::Rode::baseStations": { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/:fk", method: "PUT" }, "::link::Rode::baseStations": { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/rel/:fk", method: "PUT" }, "::unlink::Rode::baseStations": { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/rel/:fk", method: "DELETE" }, "::exists::Rode::baseStations": { params: { fk: "@fk" }, url: e + "/rodes/:id/baseStations/rel/:fk", method: "HEAD" }, "::get::Rode::baseStations": { isArray: !0, url: e + "/rodes/:id/baseStations", method: "GET" }, "::create::Rode::baseStations": { url: e + "/rodes/:id/baseStations", method: "POST" }, "::createMany::Rode::baseStations": { isArray: !0, url: e + "/rodes/:id/baseStations", method: "POST" }, "::delete::Rode::baseStations": { url: e + "/rodes/:id/baseStations", method: "DELETE" }, "::count::Rode::baseStations": { url: e + "/rodes/:id/baseStations/count", method: "GET" }, "::get::RodeContain::baseStation": { url: e + "/RodeContains/:id/baseStation", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "BaseStation", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::BaseStation::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::BaseStation::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("KeyPlace", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) {
            var d = a(e + "/KeyPlaces/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/KeyPlaces/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/KeyPlaces/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/KeyPlaces/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/KeyPlaces/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/KeyPlaces/:id/rodes/count", method: "GET" }, create: { url: e + "/KeyPlaces", method: "POST" }, createMany: { isArray: !0, url: e + "/KeyPlaces", method: "POST" }, upsert: { url: e + "/KeyPlaces", method: "PUT" }, exists: { url: e + "/KeyPlaces/:id/exists", method: "GET" }, findById: { url: e + "/KeyPlaces/:id", method: "GET" }, find: { isArray: !0, url: e + "/KeyPlaces", method: "GET" }, findOne: { url: e + "/KeyPlaces/findOne", method: "GET" }, updateAll: { url: e + "/KeyPlaces/update", method: "POST" }, deleteById: { url: e + "/KeyPlaces/:id", method: "DELETE" }, count: { url: e + "/KeyPlaces/count", method: "GET" }, prototype$updateAttributes: { url: e + "/KeyPlaces/:id", method: "PUT" }, createChangeStream: { url: e + "/KeyPlaces/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/KeyPlaces/fuzzyQuery", method: "POST" }, "::findById::Rode::keyPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/:fk", method: "GET" }, "::destroyById::Rode::keyPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/:fk", method: "DELETE" }, "::updateById::Rode::keyPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/:fk", method: "PUT" }, "::link::Rode::keyPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/rel/:fk", method: "PUT" }, "::unlink::Rode::keyPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/rel/:fk", method: "DELETE" }, "::exists::Rode::keyPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/keyPlaces/rel/:fk", method: "HEAD" }, "::get::Rode::keyPlaces": { isArray: !0, url: e + "/rodes/:id/keyPlaces", method: "GET" }, "::create::Rode::keyPlaces": { url: e + "/rodes/:id/keyPlaces", method: "POST" }, "::createMany::Rode::keyPlaces": { isArray: !0, url: e + "/rodes/:id/keyPlaces", method: "POST" }, "::delete::Rode::keyPlaces": { url: e + "/rodes/:id/keyPlaces", method: "DELETE" }, "::count::Rode::keyPlaces": { url: e + "/rodes/:id/keyPlaces/count", method: "GET" }, "::get::RodeContain::keyPlace": { url: e + "/RodeContains/:id/keyPlace", method: "GET" } });
            return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "KeyPlace", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::KeyPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() {
                var a = c.get("Rode"),
                    b = a["::unlink::KeyPlace::rodes"];
                return b.apply(d, arguments);
            }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::KeyPlace::rodes"]; return b.apply(d, arguments) }, d
        }]), h.factory("HiddenDangerPlace", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/HiddenDangerPlaces/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/HiddenDangerPlaces/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/HiddenDangerPlaces/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/HiddenDangerPlaces/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/HiddenDangerPlaces/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/HiddenDangerPlaces/:id/rodes/count", method: "GET" }, create: { url: e + "/HiddenDangerPlaces", method: "POST" }, createMany: { isArray: !0, url: e + "/HiddenDangerPlaces", method: "POST" }, upsert: { url: e + "/HiddenDangerPlaces", method: "PUT" }, exists: { url: e + "/HiddenDangerPlaces/:id/exists", method: "GET" }, findById: { url: e + "/HiddenDangerPlaces/:id", method: "GET" }, find: { isArray: !0, url: e + "/HiddenDangerPlaces", method: "GET" }, findOne: { url: e + "/HiddenDangerPlaces/findOne", method: "GET" }, updateAll: { url: e + "/HiddenDangerPlaces/update", method: "POST" }, deleteById: { url: e + "/HiddenDangerPlaces/:id", method: "DELETE" }, count: { url: e + "/HiddenDangerPlaces/count", method: "GET" }, prototype$updateAttributes: { url: e + "/HiddenDangerPlaces/:id", method: "PUT" }, createChangeStream: { url: e + "/HiddenDangerPlaces/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/HiddenDangerPlaces/fuzzyQuery", method: "POST" }, "::findById::Rode::hiddenDangerPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/:fk", method: "GET" }, "::destroyById::Rode::hiddenDangerPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/:fk", method: "DELETE" }, "::updateById::Rode::hiddenDangerPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/:fk", method: "PUT" }, "::link::Rode::hiddenDangerPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/rel/:fk", method: "PUT" }, "::unlink::Rode::hiddenDangerPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/rel/:fk", method: "DELETE" }, "::exists::Rode::hiddenDangerPlaces": { params: { fk: "@fk" }, url: e + "/rodes/:id/hiddenDangerPlaces/rel/:fk", method: "HEAD" }, "::get::Rode::hiddenDangerPlaces": { isArray: !0, url: e + "/rodes/:id/hiddenDangerPlaces", method: "GET" }, "::create::Rode::hiddenDangerPlaces": { url: e + "/rodes/:id/hiddenDangerPlaces", method: "POST" }, "::createMany::Rode::hiddenDangerPlaces": { isArray: !0, url: e + "/rodes/:id/hiddenDangerPlaces", method: "POST" }, "::delete::Rode::hiddenDangerPlaces": { url: e + "/rodes/:id/hiddenDangerPlaces", method: "DELETE" }, "::count::Rode::hiddenDangerPlaces": { url: e + "/rodes/:id/hiddenDangerPlaces/count", method: "GET" }, "::get::RodeContain::hiddenDangerPlace": { url: e + "/RodeContains/:id/hiddenDangerPlace", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "HiddenDangerPlace", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::HiddenDangerPlace::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("KeyPersion", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/KeyPersions/:id", { id: "@id" }, { create: { url: e + "/KeyPersions", method: "POST" }, createMany: { isArray: !0, url: e + "/KeyPersions", method: "POST" }, upsert: { url: e + "/KeyPersions", method: "PUT" }, exists: { url: e + "/KeyPersions/:id/exists", method: "GET" }, findById: { url: e + "/KeyPersions/:id", method: "GET" }, find: { isArray: !0, url: e + "/KeyPersions", method: "GET" }, findOne: { url: e + "/KeyPersions/findOne", method: "GET" }, updateAll: { url: e + "/KeyPersions/update", method: "POST" }, deleteById: { url: e + "/KeyPersions/:id", method: "DELETE" }, count: { url: e + "/KeyPersions/count", method: "GET" }, prototype$updateAttributes: { url: e + "/KeyPersions/:id", method: "PUT" }, createChangeStream: { url: e + "/KeyPersions/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/KeyPersions/fuzzyQuery", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "KeyPersion", d }]), h.factory("BroadcastWarningPost", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/BroadcastWarningPosts/:id", { id: "@id" }, { create: { url: e + "/BroadcastWarningPosts", method: "POST" }, createMany: { isArray: !0, url: e + "/BroadcastWarningPosts", method: "POST" }, upsert: { url: e + "/BroadcastWarningPosts", method: "PUT" }, exists: { url: e + "/BroadcastWarningPosts/:id/exists", method: "GET" }, findById: { url: e + "/BroadcastWarningPosts/:id", method: "GET" }, find: { isArray: !0, url: e + "/BroadcastWarningPosts", method: "GET" }, findOne: { url: e + "/BroadcastWarningPosts/findOne", method: "GET" }, updateAll: { url: e + "/BroadcastWarningPosts/update", method: "POST" }, deleteById: { url: e + "/BroadcastWarningPosts/:id", method: "DELETE" }, count: { url: e + "/BroadcastWarningPosts/count", method: "GET" }, prototype$updateAttributes: { url: e + "/BroadcastWarningPosts/:id", method: "PUT" }, createChangeStream: { url: e + "/BroadcastWarningPosts/change-stream", method: "POST" }, "::findById::Rode::broadcastWarningPosts": { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/:fk", method: "GET" }, "::destroyById::Rode::broadcastWarningPosts": { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/:fk", method: "DELETE" }, "::updateById::Rode::broadcastWarningPosts": { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/:fk", method: "PUT" }, "::link::Rode::broadcastWarningPosts": { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/rel/:fk", method: "PUT" }, "::unlink::Rode::broadcastWarningPosts": { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/rel/:fk", method: "DELETE" }, "::exists::Rode::broadcastWarningPosts": { params: { fk: "@fk" }, url: e + "/rodes/:id/broadcastWarningPosts/rel/:fk", method: "HEAD" }, "::get::Rode::broadcastWarningPosts": { isArray: !0, url: e + "/rodes/:id/broadcastWarningPosts", method: "GET" }, "::create::Rode::broadcastWarningPosts": { url: e + "/rodes/:id/broadcastWarningPosts", method: "POST" }, "::createMany::Rode::broadcastWarningPosts": { isArray: !0, url: e + "/rodes/:id/broadcastWarningPosts", method: "POST" }, "::delete::Rode::broadcastWarningPosts": { url: e + "/rodes/:id/broadcastWarningPosts", method: "DELETE" }, "::count::Rode::broadcastWarningPosts": { url: e + "/rodes/:id/broadcastWarningPosts/count", method: "GET" }, "::get::RodeContain::broadcastWarningPost": { url: e + "/RodeContains/:id/broadcastWarningPost", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "BroadcastWarningPost", d }]), h.factory("APropagandaPoint", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/APropagandaPoints/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/APropagandaPoints/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/APropagandaPoints/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/APropagandaPoints/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/APropagandaPoints/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/APropagandaPoints/:id/rodes/count", method: "GET" }, create: { url: e + "/APropagandaPoints", method: "POST" }, createMany: { isArray: !0, url: e + "/APropagandaPoints", method: "POST" }, upsert: { url: e + "/APropagandaPoints", method: "PUT" }, exists: { url: e + "/APropagandaPoints/:id/exists", method: "GET" }, findById: { url: e + "/APropagandaPoints/:id", method: "GET" }, find: { isArray: !0, url: e + "/APropagandaPoints", method: "GET" }, findOne: { url: e + "/APropagandaPoints/findOne", method: "GET" }, updateAll: { url: e + "/APropagandaPoints/update", method: "POST" }, deleteById: { url: e + "/APropagandaPoints/:id", method: "DELETE" }, count: { url: e + "/APropagandaPoints/count", method: "GET" }, prototype$updateAttributes: { url: e + "/APropagandaPoints/:id", method: "PUT" }, createChangeStream: { url: e + "/APropagandaPoints/change-stream", method: "POST" }, "::findById::Rode::aPropagandaPoints": { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/:fk", method: "GET" }, "::destroyById::Rode::aPropagandaPoints": { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/:fk", method: "DELETE" }, "::updateById::Rode::aPropagandaPoints": { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/:fk", method: "PUT" }, "::link::Rode::aPropagandaPoints": { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/rel/:fk", method: "PUT" }, "::unlink::Rode::aPropagandaPoints": { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/rel/:fk", method: "DELETE" }, "::exists::Rode::aPropagandaPoints": { params: { fk: "@fk" }, url: e + "/rodes/:id/aPropagandaPoints/rel/:fk", method: "HEAD" }, "::get::Rode::aPropagandaPoints": { isArray: !0, url: e + "/rodes/:id/aPropagandaPoints", method: "GET" }, "::create::Rode::aPropagandaPoints": { url: e + "/rodes/:id/aPropagandaPoints", method: "POST" }, "::createMany::Rode::aPropagandaPoints": { isArray: !0, url: e + "/rodes/:id/aPropagandaPoints", method: "POST" }, "::delete::Rode::aPropagandaPoints": { url: e + "/rodes/:id/aPropagandaPoints", method: "DELETE" }, "::count::Rode::aPropagandaPoints": { url: e + "/rodes/:id/aPropagandaPoints/count", method: "GET" }, "::get::RodeContain::aPropagandaPoint": { url: e + "/RodeContains/:id/aPropagandaPoint", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "APropagandaPoint", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::APropagandaPoint::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("InstitutionalTeam", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/InstitutionalTeams/:id", { id: "@id" }, { create: { url: e + "/InstitutionalTeams", method: "POST" }, createMany: { isArray: !0, url: e + "/InstitutionalTeams", method: "POST" }, upsert: { url: e + "/InstitutionalTeams", method: "PUT" }, exists: { url: e + "/InstitutionalTeams/:id/exists", method: "GET" }, findById: { url: e + "/InstitutionalTeams/:id", method: "GET" }, find: { isArray: !0, url: e + "/InstitutionalTeams", method: "GET" }, findOne: { url: e + "/InstitutionalTeams/findOne", method: "GET" }, updateAll: { url: e + "/InstitutionalTeams/update", method: "POST" }, deleteById: { url: e + "/InstitutionalTeams/:id", method: "DELETE" }, count: { url: e + "/InstitutionalTeams/count", method: "GET" }, prototype$updateAttributes: { url: e + "/InstitutionalTeams/:id", method: "PUT" }, createChangeStream: { url: e + "/InstitutionalTeams/change-stream", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "InstitutionalTeam", d }]), h.factory("Station", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/Stations/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/Stations/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/Stations/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/Stations/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/Stations/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/Stations/:id/rodes/count", method: "GET" }, create: { url: e + "/Stations", method: "POST" }, createMany: { isArray: !0, url: e + "/Stations", method: "POST" }, upsert: { url: e + "/Stations", method: "PUT" }, exists: { url: e + "/Stations/:id/exists", method: "GET" }, findById: { url: e + "/Stations/:id", method: "GET" }, find: { isArray: !0, url: e + "/Stations", method: "GET" }, findOne: { url: e + "/Stations/findOne", method: "GET" }, updateAll: { url: e + "/Stations/update", method: "POST" }, deleteById: { url: e + "/Stations/:id", method: "DELETE" }, count: { url: e + "/Stations/count", method: "GET" }, prototype$updateAttributes: { url: e + "/Stations/:id", method: "PUT" }, createChangeStream: { url: e + "/Stations/change-stream", method: "POST" }, "::findById::Rode::stations": { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/:fk", method: "GET" }, "::destroyById::Rode::stations": { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/:fk", method: "DELETE" }, "::updateById::Rode::stations": { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/:fk", method: "PUT" }, "::link::Rode::stations": { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/rel/:fk", method: "PUT" }, "::unlink::Rode::stations": { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/rel/:fk", method: "DELETE" }, "::exists::Rode::stations": { params: { fk: "@fk" }, url: e + "/rodes/:id/stations/rel/:fk", method: "HEAD" }, "::get::Rode::stations": { isArray: !0, url: e + "/rodes/:id/stations", method: "GET" }, "::create::Rode::stations": { url: e + "/rodes/:id/stations", method: "POST" }, "::createMany::Rode::stations": { isArray: !0, url: e + "/rodes/:id/stations", method: "POST" }, "::delete::Rode::stations": { url: e + "/rodes/:id/stations", method: "DELETE" }, "::count::Rode::stations": { url: e + "/rodes/:id/stations/count", method: "GET" }, "::get::RodeContain::station": { url: e + "/RodeContains/:id/station", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Station", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::Station::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::Station::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("EquipmentInfor", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/EquipmentInfors/:id", { id: "@id" }, { create: { url: e + "/EquipmentInfors", method: "POST" }, createMany: { isArray: !0, url: e + "/EquipmentInfors", method: "POST" }, upsert: { url: e + "/EquipmentInfors", method: "PUT" }, exists: { url: e + "/EquipmentInfors/:id/exists", method: "GET" }, findById: { url: e + "/EquipmentInfors/:id", method: "GET" }, find: { isArray: !0, url: e + "/EquipmentInfors", method: "GET" }, findOne: { url: e + "/EquipmentInfors/findOne", method: "GET" }, updateAll: { url: e + "/EquipmentInfors/update", method: "POST" }, deleteById: { url: e + "/EquipmentInfors/:id", method: "DELETE" }, count: { url: e + "/EquipmentInfors/count", method: "GET" }, prototype$updateAttributes: { url: e + "/EquipmentInfors/:id", method: "PUT" }, createChangeStream: { url: e + "/EquipmentInfors/change-stream", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "EquipmentInfor", d }]), h.factory("Monitoring", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/Monitorings/:id", { id: "@id" }, { create: { url: e + "/Monitorings", method: "POST" }, createMany: { isArray: !0, url: e + "/Monitorings", method: "POST" }, upsert: { url: e + "/Monitorings", method: "PUT" }, exists: { url: e + "/Monitorings/:id/exists", method: "GET" }, findById: { url: e + "/Monitorings/:id", method: "GET" }, find: { isArray: !0, url: e + "/Monitorings", method: "GET" }, findOne: { url: e + "/Monitorings/findOne", method: "GET" }, updateAll: { url: e + "/Monitorings/update", method: "POST" }, deleteById: { url: e + "/Monitorings/:id", method: "DELETE" }, count: { url: e + "/Monitorings/count", method: "GET" }, prototype$updateAttributes: { url: e + "/Monitorings/:id", method: "PUT" }, createChangeStream: { url: e + "/Monitorings/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/Monitorings/fuzzyQuery", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "Monitoring", d }]), h.factory("EmergencyAccesss", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/EmergencyAccessses/:id", { id: "@id" }, { create: { url: e + "/EmergencyAccessses", method: "POST" }, createMany: { isArray: !0, url: e + "/EmergencyAccessses", method: "POST" }, upsert: { url: e + "/EmergencyAccessses", method: "PUT" }, exists: { url: e + "/EmergencyAccessses/:id/exists", method: "GET" }, findById: { url: e + "/EmergencyAccessses/:id", method: "GET" }, find: { isArray: !0, url: e + "/EmergencyAccessses", method: "GET" }, findOne: { url: e + "/EmergencyAccessses/findOne", method: "GET" }, updateAll: { url: e + "/EmergencyAccessses/update", method: "POST" }, deleteById: { url: e + "/EmergencyAccessses/:id", method: "DELETE" }, count: { url: e + "/EmergencyAccessses/count", method: "GET" }, prototype$updateAttributes: { url: e + "/EmergencyAccessses/:id", method: "PUT" }, createChangeStream: { url: e + "/EmergencyAccessses/change-stream", method: "POST" }, fuzzyQuery: { url: e + "/EmergencyAccessses/fuzzyQuery", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "EmergencyAccesss", d }]), h.factory("FenceInfo", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/FenceInfos/:id", { id: "@id" }, { prototype$__findById__rodes: { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/:fk", method: "GET" }, prototype$__destroyById__rodes: { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/:fk", method: "DELETE" }, prototype$__updateById__rodes: { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/:fk", method: "PUT" }, prototype$__link__rodes: { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/rel/:fk", method: "PUT" }, prototype$__unlink__rodes: { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/rel/:fk", method: "DELETE" }, prototype$__exists__rodes: { params: { fk: "@fk" }, url: e + "/FenceInfos/:id/rodes/rel/:fk", method: "HEAD" }, prototype$__get__rodes: { isArray: !0, url: e + "/FenceInfos/:id/rodes", method: "GET" }, prototype$__create__rodes: { url: e + "/FenceInfos/:id/rodes", method: "POST" }, prototype$__delete__rodes: { url: e + "/FenceInfos/:id/rodes", method: "DELETE" }, prototype$__count__rodes: { url: e + "/FenceInfos/:id/rodes/count", method: "GET" }, create: { url: e + "/FenceInfos", method: "POST" }, createMany: { isArray: !0, url: e + "/FenceInfos", method: "POST" }, upsert: { url: e + "/FenceInfos", method: "PUT" }, exists: { url: e + "/FenceInfos/:id/exists", method: "GET" }, findById: { url: e + "/FenceInfos/:id", method: "GET" }, find: { isArray: !0, url: e + "/FenceInfos", method: "GET" }, findOne: { url: e + "/FenceInfos/findOne", method: "GET" }, updateAll: { url: e + "/FenceInfos/update", method: "POST" }, deleteById: { url: e + "/FenceInfos/:id", method: "DELETE" }, count: { url: e + "/FenceInfos/count", method: "GET" }, prototype$updateAttributes: { url: e + "/FenceInfos/:id", method: "PUT" }, createChangeStream: { url: e + "/FenceInfos/change-stream", method: "POST" }, "::get::RodeContain::fenceInfos": { url: e + "/RodeContains/:id/fenceInfos", method: "GET" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "FenceInfo", d.rodes = function() { var a = c.get("Rode"),
                    b = a["::get::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.count = function() { var a = c.get("Rode"),
                    b = a["::count::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.create = function() { var a = c.get("Rode"),
                    b = a["::create::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.createMany = function() { var a = c.get("Rode"),
                    b = a["::createMany::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyAll = function() { var a = c.get("Rode"),
                    b = a["::delete::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.destroyById = function() { var a = c.get("Rode"),
                    b = a["::destroyById::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.exists = function() { var a = c.get("Rode"),
                    b = a["::exists::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.findById = function() { var a = c.get("Rode"),
                    b = a["::findById::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.link = function() { var a = c.get("Rode"),
                    b = a["::link::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.unlink = function() { var a = c.get("Rode"),
                    b = a["::unlink::FenceInfo::rodes"]; return b.apply(d, arguments) }, d.rodes.updateById = function() { var a = c.get("Rode"),
                    b = a["::updateById::FenceInfo::rodes"]; return b.apply(d, arguments) }, d }]), h.factory("SecurityEquipmentInformation", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/SecurityEquipmentInformations/:id", { id: "@id" }, { create: { url: e + "/SecurityEquipmentInformations", method: "POST" }, createMany: { isArray: !0, url: e + "/SecurityEquipmentInformations", method: "POST" }, upsert: { url: e + "/SecurityEquipmentInformations", method: "PUT" }, exists: { url: e + "/SecurityEquipmentInformations/:id/exists", method: "GET" }, findById: { url: e + "/SecurityEquipmentInformations/:id", method: "GET" }, find: { isArray: !0, url: e + "/SecurityEquipmentInformations", method: "GET" }, findOne: { url: e + "/SecurityEquipmentInformations/findOne", method: "GET" }, updateAll: { url: e + "/SecurityEquipmentInformations/update", method: "POST" }, deleteById: { url: e + "/SecurityEquipmentInformations/:id", method: "DELETE" }, count: { url: e + "/SecurityEquipmentInformations/count", method: "GET" }, prototype$updateAttributes: { url: e + "/SecurityEquipmentInformations/:id", method: "PUT" }, createChangeStream: { url: e + "/SecurityEquipmentInformations/change-stream", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "SecurityEquipmentInformation", d }]), h.factory("RodeContain", ["LoopBackResource", "LoopBackAuth", "$injector", function(a, b, c) { var d = a(e + "/RodeContains/:id", { id: "@id" }, { prototype$__get__station: { url: e + "/RodeContains/:id/station", method: "GET" }, prototype$__get__tunnel: { url: e + "/RodeContains/:id/tunnel", method: "GET" }, prototype$__get__servicePort: { url: e + "/RodeContains/:id/servicePort", method: "GET" }, prototype$__get__levelCrossing: { url: e + "/RodeContains/:id/levelCrossing", method: "GET" }, prototype$__get__keyPlace: { url: e + "/RodeContains/:id/keyPlace", method: "GET" }, prototype$__get__hiddenDangerPlace: { url: e + "/RodeContains/:id/hiddenDangerPlace", method: "GET" }, prototype$__get__fenceInfos: { url: e + "/RodeContains/:id/fenceInfos", method: "GET" }, prototype$__get__culvert: { url: e + "/RodeContains/:id/culvert", method: "GET" }, prototype$__get__crossIronBridge: { url: e + "/RodeContains/:id/crossIronBridge", method: "GET" }, prototype$__get__broadcastWarningPost: { url: e + "/RodeContains/:id/broadcastWarningPost", method: "GET" }, prototype$__get__bridge: { url: e + "/RodeContains/:id/bridge", method: "GET" }, prototype$__get__baseStation: { url: e + "/RodeContains/:id/baseStation", method: "GET" }, prototype$__get__aPropagandaPoint: { url: e + "/RodeContains/:id/aPropagandaPoint", method: "GET" }, prototype$__get__rode: { url: e + "/RodeContains/:id/rode", method: "GET" }, create: { url: e + "/RodeContains", method: "POST" }, createMany: { isArray: !0, url: e + "/RodeContains", method: "POST" }, upsert: { url: e + "/RodeContains", method: "PUT" }, exists: { url: e + "/RodeContains/:id/exists", method: "GET" }, findById: { url: e + "/RodeContains/:id", method: "GET" }, find: { isArray: !0, url: e + "/RodeContains", method: "GET" }, findOne: { url: e + "/RodeContains/findOne", method: "GET" }, updateAll: { url: e + "/RodeContains/update", method: "POST" }, deleteById: { url: e + "/RodeContains/:id", method: "DELETE" }, count: { url: e + "/RodeContains/count", method: "GET" }, prototype$updateAttributes: { url: e + "/RodeContains/:id", method: "PUT" }, createChangeStream: { url: e + "/RodeContains/change-stream", method: "POST" } }); return d.updateOrCreate = d.upsert, d.update = d.updateAll, d.destroyById = d.deleteById, d.removeById = d.deleteById, d.modelName = "RodeContain", d.station = function() { var a = c.get("Station"),
                    b = a["::get::RodeContain::station"]; return b.apply(d, arguments) }, d.tunnel = function() { var a = c.get("Tunnel"),
                    b = a["::get::RodeContain::tunnel"]; return b.apply(d, arguments) }, d.servicePort = function() { var a = c.get("ServicePort"),
                    b = a["::get::RodeContain::servicePort"]; return b.apply(d, arguments) }, d.levelCrossing = function() { var a = c.get("LevelCrossing"),
                    b = a["::get::RodeContain::levelCrossing"]; return b.apply(d, arguments) }, d.keyPlace = function() { var a = c.get("KeyPlace"),
                    b = a["::get::RodeContain::keyPlace"]; return b.apply(d, arguments) }, d.hiddenDangerPlace = function() { var a = c.get("HiddenDangerPlace"),
                    b = a["::get::RodeContain::hiddenDangerPlace"]; return b.apply(d, arguments) }, d.fenceInfos = function() { var a = c.get("FenceInfo"),
                    b = a["::get::RodeContain::fenceInfos"]; return b.apply(d, arguments) }, d.culvert = function() { var a = c.get("Culvert"),
                    b = a["::get::RodeContain::culvert"]; return b.apply(d, arguments) }, d.crossIronBridge = function() { var a = c.get("CrossIronBridge"),
                    b = a["::get::RodeContain::crossIronBridge"]; return b.apply(d, arguments) }, d.broadcastWarningPost = function() { var a = c.get("BroadcastWarningPost"),
                    b = a["::get::RodeContain::broadcastWarningPost"]; return b.apply(d, arguments) }, d.bridge = function() { var a = c.get("Bridge"),
                    b = a["::get::RodeContain::bridge"]; return b.apply(d, arguments) }, d.baseStation = function() { var a = c.get("BaseStation"),
                    b = a["::get::RodeContain::baseStation"]; return b.apply(d, arguments) }, d.aPropagandaPoint = function() { var a = c.get("APropagandaPoint"),
                    b = a["::get::RodeContain::aPropagandaPoint"]; return b.apply(d, arguments) }, d.rode = function() { var a = c.get("Rode"),
                    b = a["::get::RodeContain::rode"]; return b.apply(d, arguments) }, d }]), h.factory("LoopBackAuth", function() {
            function a() { var a = this;
                d.forEach(function(b) { a[b] = c(b) }), this.currentUserData = null }

            function b(a, b, c) { try { var d = e + b;
                    null == c && (c = ""), a[d] = c } catch (a) { console.log("Cannot access local/session storage:", a) } }

            function c(a) { var b = e + a; return localStorage[b] || sessionStorage[b] || null } var d = ["accessTokenId", "currentUserId", "rememberMe"],
                e = "$LoopBack$"; return a.prototype.save = function() { var a = this,
                    c = this.rememberMe ? localStorage : sessionStorage;
                d.forEach(function(d) { b(c, d, a[d]) }) }, a.prototype.setUser = function(a, b, c) { this.accessTokenId = a, this.currentUserId = b, this.currentUserData = c }, a.prototype.clearUser = function() { this.accessTokenId = null, this.currentUserId = null, this.currentUserData = null }, a.prototype.clearStorage = function() { d.forEach(function(a) { b(sessionStorage, a, null), b(localStorage, a, null) }) }, new a }).config(["$httpProvider", function(a) { a.interceptors.push("LoopBackAuthRequestInterceptor") }]).factory("LoopBackAuthRequestInterceptor", ["$q", "LoopBackAuth", function(a, b) { return { request: function(e) { var h = d(e.url); if (h && h !== g) return e; if (b.accessTokenId) e.headers[f] = b.accessTokenId;
                    else if (e.__isGetCurrentUser__) { var i = { body: { error: { status: 401 } }, status: 401, config: e, headers: function() { return c } }; return a.reject(i) } return e || a.when(e) } } }]).provider("LoopBackResource", function() { this.setAuthHeader = function(a) { f = a }, this.getAuthHeader = function() { return f }, this.setUrlBase = function(a) { e = a, g = d(e) || location.host }, this.getUrlBase = function() { return e }, this.$get = ["$resource", function(a) { var b = function(b, c, d) { var e = a(b, c, d); return e.prototype.$save = function(a, b) { var c = e.upsert.call(this, {}, this, a, b); return c.$promise || c }, e }; return b.getUrlBase = function() { return e }, b.getAuthHeader = function() { return f }, b }] })
    }(window, window.angular), angular.module("loopbackApp").run(["gettextCatalog", function(a) {
        a.setStrings("zh_CN", {
            '<i class="fa fa-arrow-left"></i> Pages': '<i class="fa fa-arrow-left"></i> 网页',
            '<i class="fa fa-arrow-left"></i> Users': '<i class="fa fa-arrow-left"></i> 用户',
            '<i class="fa fa-save"></i>  Save': '<i class="fa fa-save"></i>  保存',
            '<i class="fa fa-save"></i> Save': '<i class="fa fa-save"></i> 保存',
            About: "关于",
            Actions: "行为",
            Add: "添加",
            "Add Category": "添加分类",
            "Add Product": "添加产品",
            "Add a new category": "添加一个新分类",
            "Add a new event": "添加一个新事件",
            "Add a new note": "添加一个新笔记",
            "Add a new post": "添加一个新邮件",
            "Add a new product": "添加一个新产品",
            "Add a new setting": "添加一个新设置",
            "Add product to category": "向分类里添加产品",
            "All about this application!": "关于本程序",
            "Are you sure?": "你确定吗？",
            Body: "主体",
            Browse: "浏览",
            Cancel: "取消",
            "Cancel all": "取消所有",
            Categories: "分类",
            Category: "分类",
            "Category deleted": "分类已删除",
            "Category saved": "分类已保存",
            "Change it here!": "在这儿修改！",
            'Click <a href="" ui-sref="^.add">here</a>\n      to add a post!': '点击<a href="" ui-sref="^.add">这里</a>来添加一个邮件！',
            'Click <a href="" ui-sref="^.add">here</a> to add a event!': '点击<a href="" ui-sref="^.add">这里</a>来添加一个事件！',
            'Click <a href="" ui-sref="^.add">here</a> to add a note!': '点击<a href="" ui-sref="^.add">这里</a>来添加一个笔记！',
            'Click <a href="" ui-sref="^.add">here</a> to add a page!': '点击<a href="" ui-sref="^.add">这里</a>来添加一个页面！',
            'Click <a href="" ui-sref="^.add">here</a> to add a setting!': '点击<a href="" ui-sref="^.add">这里</a>来添加一个设置！',
            'Click <a href="" ui-sref="^.add({ categoryId: category.id })">here</a> to add a product!': '点击<a href="" ui-sref="^.add({ categoryId: category.id })">这里</a>来添加一个产品！',
            'Click <a href="" ui-sref="^.upload" translate="">here</a> to upload some!': '点击<a href="" ui-sref="^.upload" translate="">这里</a>来上传！',
            "Confirm Password": "确认密码",
            Content: "内容",
            "Could not add category!": "添加分类失败！",
            "Could not add event!": "添加事件失败！",
            "Could not add note!": "添加笔记失败！",
            "Could not add page!": "添加页面失败！",
            "Could not add post!": "添加邮件失败！",
            "Could not add setting!": "添加设置失败！",
            "Could not add user!": "添加用户失败！",
            "Create pages with rich content!": "通过富文本内容来创建页面！",
            "Current user": "当前用户",
            Dashboard: "仪表盘",
            "Delete category": "删除仪表盘",
            "Deleting this cannot be undone": "删除后不能撤销哦",
            Description: "描述",
            "Don't worry we won't spam your inbox": "放心，我们不会给您发送垃圾邮件的",
            "E-mail": "邮件",
            "Edit category": "编辑分类",
            "Edit event": "编辑事件",
            "Edit note": "编辑笔记",
            "Edit post": "编辑邮件",
            "Edit product": "编辑产品",
            "Edit setting": "编辑设置",
            Email: "邮件",
            "Email address needs to be valid": "您必须验证您的邮箱",
            End: "结束",
            "End Time": "结束时间",
            "Enjoy the new you!": "看好你哦！",
            "Error deleting category": "删除分类失败",
            "Error deleting event": "删除事件失败",
            "Error deleting item:": "删除项目失败：",
            "Error deleting note": "删除笔记失败",
            "Error deleting page": "删除页面失败",
            "Error deleting product": "删除产品失败",
            "Error deleting setting": "删除设置失败",
            "Error deleting user": "删除用户失败",
            "Error registering!": "注册失败！",
            "Error saving note": "保存笔记失败",
            "Error saving profile": "保存属性失败",
            "Error saving user:": "保存用户失败：",
            "Error signin in after registration!": "注册后登录失败！",
            "Event deleted": "事件已删除",
            "Event not added": "事件添加失败",
            "Event saved": "事件已保存",
            Events: "事件",
            "File deleted": "文件已删除",
            Files: "文件",
            "First Name": "名字",
            "First name": "名字",
            "Hello,": "你好，",
            Home: "首页",
            "Item deleted": "项目已删除",
            Key: "密钥",
            "Last Name": "姓氏",
            "Last name": "姓氏",
            "Logged in": "登录",
            "Logged out": "退出",
            "Manage your events here!": "在这里管理您的事件！",
            "Manage your files here!": "在这里管理您的文件!",
            "Manage your notes here!": "在这里管理您的笔记！",
            "Manage your posts here!": "在这里管理您的邮件！",
            "Manage your products here!": "在这里管理您的产品！",
            "Manage your settings here!": "在这里管理您的设置！",
            "Manage your users here!": "在这里管理您的用户！",
            "More info": "更多信息",
            Name: "名字",
            "Needs to have at least 4 characters": "至少需呀4个字符",
            "New page": "新页面",
            "Nice email address!": "邮箱地址合法！",
            "Note deleted": "笔记已删除",
            "Note saved": "笔记已保存",
            Notes: "笔记",
            Oops: "我去",
            "Or register": "或者去注册",
            "Or sign in": "或者去登录",
            "Page deleted": "页面已删除",
            "Page saved": "页面已保存",
            Pages: "页面",
            Password: "密码",
            "Post saved": "邮件已保存",
            Posts: "邮件",
            Price: "价格",
            Product: "产品",
            "Product deleted": "产品已删除",
            "Product saved": "产品已保存",
            Products: "产品",
            Profile: "属性",
            "Profile saved": "属性已保存",
            Progress: "进程",
            Raw: "原始",
            Register: "注册",
            Registered: "已注册",
            "Remove all": "删除所有",
            Roles: "角色",
            Save: "保存",
            "Setting deleted": "设置已删除",
            "Setting saved": "设置已保存",
            Settings: "设置",
            "Sign In": "登录",
            "Sign in": "登录",
            "Sign out": "登出",
            Size: "大小",
            "Start Date": "开始日期",
            "Start Time": "开始时间",
            Status: "状态",
            "Stay signed in": "保持登录状态",
            Submit: "提交",
            Theme: "主题",
            "There are no events": "事件不存在",
            "There are no files": "文件不存在",
            "There are no notes": "笔记不存在",
            "There are no pages": "页面不存在",
            "There are no products in this category!": "在这个分类下没有产品！",
            "There are no settings": "设置不存在",
            "This note could no be saved:": "这个笔记不能被保存：",
            "This user is save!": "用户已保存！",
            Title: "标题",
            "Toggle navigation": "触发导航",
            "Update profile": "更新属性",
            Upload: "上传",
            "Upload all": "上传全部",
            "Upload files": "上传文件",
            "Upload queue": "上传队列",
            "User deleted": "用户已删除",
            "User saved": "用户已保存",
            Username: "用户名",
            Users: "用户",
            Value: "值",
            Variables: "变量",
            "Welcome!": "欢迎！",
            "You are logged in!": "登录成功！",
            "You are logged out!": "登出成功！",
            "You are registered!": "注册成功！",
            "You can just drag them in this window!": "你可以把它们拖动到这个窗口里！",
            "You need an email address": "你需要一个邮箱地址",
            "Your Gravatar": "你的头像",
            "Your category is deleted!": "分类已删除！",
            "Your category is not deleted:": "分类删除失败：",
            "Your category is safe with us!": "你的分类很安全！",
            "Your event is deleted!": "事件已删除！",
            "Your event is not deleted:": "事件删除失败：",
            "Your event is safe with us!": "你的事件很安全！",
            "Your file is deleted!": "文件已删除！",
            "Your item has been deleted!": "项目已删除！",
            "Your note is deleted!": "笔记已删除！",
            "Your note is not deleted!": "笔记删除失败！",
            "Your note is safe with us!": "你的笔记很安全！",
            "Your page is deleted!": "页面已删除！",
            "Your page is not deleted:": "页面删除失败：",
            "Your page is safe with us!": "你的页面很安全！",
            "Your passwords need to match": "密码不匹配",
            "Your post is safe with us!": "你的邮件很安全！",
            "Your product is deleted!": "产品已删除！",
            "Your product is not deleted:": "产品删除失败：",
            "Your product is safe with us!": "你的产品很安全！",
            "Your profile": "你的信息",
            "Your profile is not saved:": "信息保存失败：",
            "Your setting is deleted!": "设置已删除！",
            "Your setting is not deleted:": "设置删除失败：",
            "Your setting is safe with us!": "你的设置很安全：",
            "Your user is deleted!": "用户已删除！",
            "Your user is not deleted:": "用户删除失败：",
            "dd/MM/yyyy": "dd/MM/yyyy",
            here: "这里",
            image: "图片",
            "in queue": "在排队"
        })
    }]),
    function() { angular.module("com.module.about", []) }(),
    function() { angular.module("com.module.about").run(["$rootScope", "gettextCatalog", function(a, b) { a.addDashboardBox(b.getString("About"), "bg-maroon", "ion-information", 0, "app.about.index") }]) }(),
    function() { angular.module("com.module.about").controller("AboutCtrl", ["$scope", function(a) { a.angular = angular }]) }(),
    function() { angular.module("com.module.about").config(["$stateProvider", function(a) { a.state("app.about", { abstract: !0, url: "/about", templateUrl: "modules/about/views/main.html" }).state("app.about.index", { url: "", templateUrl: "modules/about/views/about.html", controller: "AboutCtrl" }) }]) }(),
    function() { angular.module("com.module.core", ["gettext"]) }(),
    function() { angular.module("com.module.core").config(["cfpLoadingBarProvider", function(a) { a.includeSpinner = !1 }]).run(["$rootScope", "Setting", "gettextCatalog", function(a, b, c) { a.menu = [], a.addMenu = function(b, c, d, e) { a.menu.push({ name: b, sref: c, icon: d, permissionAccess: e || !1 }) }, a.addMenu(c.getString("Dashboard"), "app.home", "fa-dashboard"), a.dashboardBox = [], a.addDashboardBox = function(b, c, d, e, f) { a.dashboardBox.push({ name: b, color: c, icon: d, quantity: e, href: f }) }, a.setSetting = function(c, d) { b.find({ filter: { where: { key: c } } }, function(e) { e.length ? (e[0].value = d, e[0].$save()) : b.create({ key: c, value: d }, function(a) { console.log(a) }), a.loadSettings() }) }, a.settings = {}, a.loadSettings = function() { b.find(function(b) { a.settings.data = b, angular.forEach(b, function(b) { a.settings[b.key] = b.value }), a.addDashboardBox(c.getString("About"), "bg-teal", "ion-information", "v" + a.settings.appVersion, "app.about.index", 0) }) }, a.loadSettings() }]) }(),
    function() { angular.module("com.module.core").config(["$stateProvider", "$urlRouterProvider", function(a, b) { a.state("router", { url: "/router", template: '<div class="lockscreen" style="height: 100%"></div>', controller: "RouteCtrl" }).state("error", { url: "/error", template: '<div class="text-center alert alert-danger" style="margin: 100px">An error occurred.</div>' }).state("app", { abstract: !0, url: "/app", templateUrl: "modules/core/views/app.html", controller: "MainCtrl" }).state("app.home", { url: "", templateUrl: "modules/core/views/home.html", controller: "HomeCtrl" }), b.otherwise("/router") }]) }(),
    function() { angular.module("com.module.core").controller("HomeCtrl", ["$scope", "$rootScope", function(a, b) { a.count = {}, a.boxes = b.dashboardBox }]) }(),
    function() { angular.module("com.module.core").controller("LayoutCtrl", ["$scope", "$rootScope", "$cookies", "CoreService", "gettextCatalog", function(a, b, c, d, e) { a.locale = { isopen: !1 }, a.locales = b.locales, a.selectLocale = b.locale, a.setLocale = function(d) { a.locale = a.locales[d], a.selectLocale = a.locale, b.locale = a.locale, c.lang = a.locale.lang, a.locale.isopen = !a.locale.isopen, e.setCurrentLanguage(a.locale.lang) }, a.apiUrl = d.env.apiUrl, a.appThemes = [{ name: "Black", class: "skin-black" }, { name: "Blue", class: "skin-blue" }], a.appLayouts = [{ name: "Fixed", class: "fixed" }, { name: "Scrolling", class: "not-fixed" }], a.toggleSidebar = function() { var a = angular.element;
                a(window).width() <= 992 ? (a(".row-offcanvas").toggleClass("active"), a(".left-side").removeClass("collapse-left"), a(".right-side").removeClass("strech"), a(".row-offcanvas").toggleClass("relative")) : (a(".left-side").toggleClass("collapse-left"), a(".right-side").toggleClass("strech")) } }]) }(),
    function() { angular.module("com.module.core").controller("MainCtrl", ["$scope", "$rootScope", "$state", "AppAuth", "CoreService", "User", "gettextCatalog", function(a, b, c, d, e, f, g) { d.ensureHasCurrentUser(function() { a.currentUser = f.getCurrent() }), a.menuoptions = b.menu, a.logout = function() { d.logout(function() { e.toastSuccess(g.getString("Logged out"), g.getString("You are logged out!")), c.go("login") }) } }]) }(),
    function() { angular.module("com.module.core").controller("RouteCtrl", ["ApiService", "AppAuth", "$location", "User", function(a, b, c, d) { a.checkConnection().then(function() { console.log("ApiService.checkConnection success"), b.currentUser ? c.path("/app") : b.currentUser = d.getCurrent(function() { c.path("/app") }, function() { c.path("/login") }) }).catch(function(a) { console.log("ApiService.checkConnection err: " + a), c.path("/error") }) }]) }(),
    function() { angular.module("com.module.core").directive("adminBox", function() { return { template: "<div></div>", restrict: "E", link: function(a, b) { b.text("this is the adminBox directive") } } }) }(),
    function() { angular.module("com.module.core").directive("adminForm", function() { return { template: "<div></div>", restrict: "E", link: function(a, b) { b.text("this is the adminForm directive") } } }) }(),
    function() { angular.module("com.module.core").directive("adminHeader", function() { return { templateUrl: "modules/core/views/elements/admin-header.html", transclude: !0, scope: { title: "@", subTitle: "@" }, restrict: "A" } }) }(),
    function() { angular.module("com.module.core").directive("dateButton", function() { var a = function(a) { a.options.open = !1, a.switchOpen = function(b) { return b.preventDefault(), b.stopPropagation(), a.options.open = !0, !0 } }; return { restrict: "A", scope: !1, compile: function(b) { var c = angular.element("<span></span>"),
                        d = angular.element("<button></button>"),
                        e = angular.element("<i></i>"); return c.addClass("input-group-btn"), d.attr("type", "button"), d.addClass("btn btn-default"), d.attr("ng-click", "switchOpen($event)"), e.addClass("glyphicon glyphicon-calendar"), d.append(e), c.append(d), b.after(c), a } } }) }(),
    function() { angular.module("com.module.core").directive("home", function() { return { template: "<div></div>", restrict: "E", link: function(a, b, c) { b.text("this is the home directive " + c) } } }) }(),
    function() { angular.module("com.module.core").directive("navbar", function() { return { templateUrl: "modules/core/views/elements/navbar.html", restrict: "E" } }) }(),
    function() { angular.module("com.module.core").directive("smallBox", function() { return { restrict: "E", templateUrl: "modules/core/views/elements/small-box.html", scope: { name: "@", color: "@", icon: "@", quantity: "@", href: "@" } } }) }(),
    function() { angular.module("com.module.core").factory("FormHelper", ["$state", "CoreService", "gettextCatalog", function(a, b, c) { return function(d) { console.log("This is the model", d), this.model = d, this.delete = function(d) { b.confirm(c.getString("Are you sure?"), c.getString("Deleting this cannot be undone"), function() { this.model.deleteById(d, function() { b.toastSuccess(c.getString("Item deleted"), c.getString("Your item has been deleted!")), a.reload() }, function(a) { b.toastError(c.getString("Oops"), c.getString("Error deleting item: ") + a) }) }, function() { return !1 }) }, this.cancel = function(b) { a.go(b) } } }]) }(),
    function() { angular.module("com.module.core").service("ApiService", ["$q", "$http", "ENV", function(a, b, c) { this.checkConnection = function() { return a(function(a, d) { b.get(c.apiUrl + "/settings").success(a).error(d) }) } }]) }(),
    function() { angular.module("com.module.core").service("CoreService", ["ENV", "SweetAlert", "toasty", function(a, b, c) { this.env = a, this.alert = function(a, c) { b.swal(a, c) }, this.alertSuccess = function(a, c) { b.swal(a, c, "success") }, this.alertError = function(a, c) { b.swal(a, c, "error") }, this.alertWarning = function(a, c) { b.swal(a, c, "warning") }, this.alertInfo = function(a, c) { b.swal(a, c, "info") }, this.confirm = function(a, b, c, d) { var e = { title: a, text: b, type: "warning", showCancelButton: !0, confirmButtonColor: "#DD6B55" };
                this._swal(e, c, d) }, this._swal = function(a, c, d) { b.swal(a, function(a) { a ? c() : d() }) }, this.toastSuccess = function(a, b) { c.pop.success({ title: a, msg: b, sound: !1 }) }, this.toastError = function(a, b) { c.pop.error({ title: a, msg: b, sound: !1 }) }, this.toastWarning = function(a, b) { c.pop.warning({ title: a, msg: b, sound: !1 }) }, this.toastInfo = function(a, b) { c.pop.info({ title: a, msg: b, sound: !1 }) } }]) }(),
    function() { angular.module("com.module.core").service("MetaService", ["$injector", "CoreService", "Meta", "gettextCatalog", function(a, b, c, d) {
            function e(a, b) { return { key: a, type: f(b), templateOptions: { label: a, required: void 0 !== b.required && b.required, description: void 0 !== b.description && b.description } } }

            function f(a) { var b = "input"; return void 0 !== a.meta && void 0 !== a.meta.formType && (b = a.meta.formType), b }
            this.find = function() { return c.getModels().$promise }, this.findById = function(a) { return c.getModelById({ name: a }).$promise }, this.getModelInstance = function(b) { return a.get(b) }, this.getModelItems = function(a) { var b = this.getModelInstance(a); return "function" == typeof b.find && b.find().$promise }, this.getModelItem = function(a, b) { var c = this.getModelInstance(a); return "function" == typeof c.find && c.findOne({ filter: { where: { id: b } } }).$promise }, this.getModelFields = function(a) { var b = []; return angular.forEach(a.properties, function(a, c) { "id" !== c && b.push(e(c, a)) }), b }, this.upsert = function(a, c) { var e = this.getModelInstance(a); return e.upsert(c).$promise.then(function() { b.toastSuccess(d.getString("Item saved"), d.getString("Your item is safe with us!")) }).catch(function(a) { b.toastError(d.getString("Error saving item "), d.getString("This item could no be saved: " + a)) }) }, this.delete = function(a, c, e, f) { var g = this.getModelInstance(a);
                b.confirm(d.getString("Are you sure?"), d.getString("Deleting this cannot be undone"), function() { g.deleteById({ id: c }).$promise.then(function() { b.toastSuccess(d.getString("Item deleted"), d.getString("Your item is deleted!")), e() }).catch(function(a) { b.toastError(d.getString("Error deleting item"), d.getString("Your item is not deleted! ") + a), f() }) }, function() { f() }) } }]) }(),
    function() { angular.module("com.module.sandbox", []) }(),
    function() { angular.module("com.module.sandbox").run(["$rootScope", function(a) { a.addMenu("沙盒", "app.sandbox.index", "fa-inbox") }]) }(),
    function() { angular.module("com.module.sandbox").config(["$stateProvider", function(a) { a.state("app.sandbox", { abstract: !0, url: "/sandbox", templateUrl: "modules/sandbox/views/main.html", controller: "SandboxCtrl" }).state("app.sandbox.index", { url: "", controller: ["$state", function(a) { a.go("app.sandbox.autofields") }] }).state("app.sandbox.schemaform", { url: "/schemaform", templateUrl: "modules/sandbox/views/schemaform.html", controller: "SandboxSchemaformCtrl", controllerAs: "ctrl" }).state("app.sandbox.forms", { url: "/forms", templateUrl: "modules/sandbox/views/forms.html", controller: "SandboxFormsCtrl" }).state("app.sandbox.icons", { url: "/icons", templateUrl: "modules/sandbox/views/icons.html", controller: "SandboxIconsCtrl" }).state("app.sandbox.faker", { url: "/faker", templateUrl: "modules/sandbox/views/faker.html", controller: "SandboxFakerCtrl" }).state("app.sandbox.coreservice", { url: "/coreservice", templateUrl: "modules/sandbox/views/coreservice.html", controller: "SandboxCoreServiceCtrl" }).state("app.sandbox.bootstrap", { url: "/bootstrap", templateUrl: "modules/sandbox/views/bootstrap.html" }).state("app.sandbox.trees", { url: "/trees", templateUrl: "modules/sandbox/views/trees.html", controller: "SandboxTreesCtrl" }).state("app.sandbox.users", { url: "/users", template: "<pre>{{users | json}}</pre>", controller: ["$scope", "User", function(a, b) { a.users = b.find({}, function(a, b) { console.log(b) }) }] }).state("app.sandbox.dashboard", { url: "/dashboard", templateUrl: "modules/sandbox/views/dashboard.html", controller: "DashboardCtrl" }).state("app.sandbox.grid", { url: "/grid", templateUrl: "modules/sandbox/views/grid.html", controller: "SandboxGridCtrl" }).state("app.sandbox.autofields", { url: "/autofields", templateUrl: "modules/sandbox/views/autofields.html", controller: "AutoFieldsCtrl" }) }]) }(),
    function() { angular.module("com.module.sandbox").controller("AutoFieldsCtrl", ["$scope", "$state", "$log", function(a, b, c) { a.user = { username: "", email: "test@test.com", gender: null, genderCheck: null, bio: "", website: "", number: 1, birthdate: new Date, password: "", confirmPassword: "", rememberMe: !1 }, a.schema = [{ property: "username", type: "text", attr: { ngMinlength: 4, required: !0 }, msgs: { minlength: "Needs to have at least 4 characters" } }, { property: "email", type: "email", help: "Don't worry we won't spam your inbox", attr: { required: !0, ngMinlength: 4 }, msgs: { required: "You need an email address", email: "Email address needs to be valid", valid: "Nice email address!" } }, { property: "website", type: "url", msgs: { url: "You need a valid url" } }, { property: "number", label: "Number between 1-10", type: "number", attr: { min: 1, max: 10 }, msgs: { min: "You need a number no less than 1", max: "You need a number no greater than 10" }, validate: !1 }, { property: "birthdate", type: "date", attr: { required: !0 } }, { property: "gender", type: "select", list: "key as value for (key,value) in genders", attr: { required: !0 } }, { property: "genderCheck", label: "Are you really?", type: "select", list: "key as value for (key,value) in genderCheck", attr: { required: !0, ngShow: "$data.gender != null" } }, { property: "bio", type: "textarea", rows: 5, placeholder: "A bit about yourself...", attr: { required: !0 } }, { type: "multiple", fields: [{ property: "password", type: "password", attr: { required: !0, ngMinlength: 6 } }, { property: "confirmPassword", label: "Confirm Password", type: "password", attr: { confirmPassword: "user.password", required: !0, ngMinlength: 6 }, msgs: { match: "Your passwords need to match" } }], columns: 6 }, { property: "rememberMe", label: "Stay signed in", type: "checkbox" }], a.options = { validation: { enabled: !0, showMessages: !1 }, layout: { type: "basic", labelSize: 3, inputSize: 9 } }, a.genders = { 0: "Male", 1: "Female" }, a.genderCheck = { 0: "No", 1: "Yes" }, a.toggleValidation = function() { a.options.validation.enabled = !a.options.validation.enabled }, a.togglePopovers = function() { a.options.validation.showMessages = !a.options.validation.showMessages }, a.toggleHorizontal = function() { a.options.layout.type = "horizontal" === a.options.layout.type ? "basic" : "horizontal" }, a.addField = function() { a.schema.push({ property: "new" + (new Date).getTime(), label: "New Field" }) }, a.join = function() { a.joinForm.$valid && (c.info(a.user), console.log("You've joined!\n\nSee console for additional info.")) } }]).directive("confirmPassword", [function() { return { restrict: "A", require: "ngModel", link: function(a, b, c, d) { var e = function(b) { var e = a.$eval(c.confirmPassword); return d.$setValidity("match", d.$isEmpty(b) || b === e), b };
                    d.$parsers.push(e), a.$watch(c.confirmPassword, function() { e(d.$viewValue) }) } } }]) }(),
    function() { angular.module("com.module.sandbox").controller("SandboxBootstrapAlertCtrl", ["$scope", function(a) { a.alerts = [{ type: "danger", msg: "Oh snap! Change a few things up and try submitting again." }, { type: "success", msg: "Well done! You successfully read this important alert message." }], a.addAlert = function() { a.alerts.push({ msg: "Another alert!" }) }, a.closeAlert = function(b) { a.alerts.splice(b, 1) } }]) }(),
    function() { angular.module("com.module.sandbox").controller("SandboxBootstrapTabsCtrl", ["$scope", "CoreService", function(a, b) { a.tabs = [{ title: "Dynamic Title 1", content: "Dynamic content 1" }, { title: "Dynamic Title 2", content: "Dynamic content 2", disabled: !0 }], a.alertMe = function() { b.alert("You've selected the alert tab!") } }]) }(),
    function() { angular.module("com.module.sandbox").controller("SandboxCoreServiceCtrl", ["$scope", "$timeout", "CoreService", function(a, b, c) { a.basicAlert = function() { c.alert("This is the most basic alert!") }, a.basicAlertBody = function() { c.alert("This is the most basic alert!", "I am the alert text!") }, a.basicAlertSuccess = function() { c.alertSuccess("This is a success alert!", "I am the success text!") }, a.basicAlertError = function() { c.alertError("This is a error alert!", "I am the error text!") }, a.basicAlertWarning = function() { c.alertWarning("This is a warning alert!", "I am the warning text!") }, a.basicAlertInfo = function() { c.alertInfo("This is a info alert!", "I am the info text!") }, a.basicConfirm = function() { c.confirm("This is an agreement", "So do you agree?", function() { c.alert("You agree!") }, function() { c.alert("You don't agree!") }) }, a.toasty = { title: "Notify me!", text: "This is the body!" }, a.toastSuccess = function() { c.toastSuccess(a.toasty.title, a.toasty.text) }, a.toastError = function() { c.toastError(a.toasty.title, a.toasty.text) }, a.toastWarning = function() { c.toastWarning(a.toasty.title, a.toasty.text) }, a.toastInfo = function() { c.toastInfo(a.toasty.title, a.toasty.text) }, a.toastAll = function() { c.toastSuccess(a.toasty.title, a.toasty.text), c.toastError(a.toasty.title, a.toasty.text), c.toastWarning(a.toasty.title, a.toasty.text), c.toastInfo(a.toasty.title, a.toasty.text) } }]) }(),
    function() { angular.module("com.module.sandbox").controller("SandboxCtrl", ["$scope", function(a) { a.items = [{ name: "CoreService", sref: ".coreservice" }, { name: "Autofields", sref: ".autofields" }, { name: "Bootstrap", sref: ".bootstrap" }, { name: "Dashboard", sref: ".dashboard" }, { name: "Schemaform", sref: ".schemaform" }, { name: "Forms", sref: ".forms" }, { name: "Faker", sref: ".faker" }, { name: "Icons", sref: ".icons" }, { name: "Grid", sref: ".grid" }, { name: "Trees", sref: ".trees" }] }]) }(),
    function() { angular.module("com.module.sandbox").controller("DashboardCtrl", ["$scope", function(a) { a.boxes = [], a.addComponent = function(b, c, d, e, f) { a.boxes.push({ name: b, color: c, icon: d, quantity: e, href: f }) }, a.addComponent("Sandbox", "bg-blue", "ion-document-text", "1", "app.components.autofields") }]) }(),
    function() { angular.module("com.module.sandbox").controller("DatepickerDemoCtrl", ["$scope", function(a) { a.today = function() { a.dt = new Date }, a.today(), a.clear = function() { a.dt = null }, a.disabled = function(a, b) { return "day" === b && (0 === a.getDay() || 6 === a.getDay()) }, a.toggleMin = function() { a.minDate = a.minDate ? null : new Date }, a.toggleMin(), a.open = function(b) { b.preventDefault(), b.stopPropagation(), a.opened = !0 }, a.dateOptions = { formatYear: "yy", startingDay: 1 }, a.formats = ["dd-MMMM-yyyy", "yyyy/MM/dd", "dd.MM.yyyy", "shortDate"], a.format = a.formats[0] }]) }(),
    function() { angular.module("com.module.sandbox").service("FakeService", ["$window", function(a) { this.faker = a.faker }]).controller("SandboxFakerCtrl", ["$scope", "$window", "CoreService", "FakeService", "User", function(a, b, c, d, e) { a.faker = [], a.records = 10, console.log(d), a.fakeUsers = function() { a.faker = []; for (var b = 0; b < a.records; b++) { var f = { email: d.faker.internet.email(), username: d.faker.internet.userName(), name: d.faker.name.findName(), password: d.faker.internet.password() };
                    a.faker.push(f), e.create(f) }
                c.toastSuccess("Created " + a.records + " users") } }]) }(),
    function() { angular.module("com.module.sandbox").controller("SandboxFormsCtrl", ["$scope", "CoreService", function(a, b) { var c = new Date;
            a.formOptions = {}, a.formData = { name: null, description: null, startDate: c, startTime: c, endDate: c, endTime: c }, a.formFields = [{ key: "name", type: "input", templateOptions: { label: "Name" } }, { key: "password", type: "input", templateOptions: { type: "password", label: "密码", placeholder: "请输入最少6个字符的新密码", required: !0, minlength: 6 } }, { key: "confirmPassword", type: "input", optionsTypes: ["matchField"], model: this.confirmationModel, templateOptions: { type: "password", label: "确认密码", placeholder: "请输入确认密码", required: !0 }, data: { fieldToMatch: "password", modelToMatch: this.model } }, { key: "description", type: "textarea", templateOptions: { label: "Description" } }, { key: "startDate", type: "datepicker", templateOptions: { label: "Start Date" } }, { key: "startTime", type: "timepicker", templateOptions: { label: "Start Time" } }, { key: "endDate", type: "datepicker", templateOptions: { label: "End Date" } }, { key: "endTime", type: "timepicker", templateOptions: { label: "End Time" } }], a.onSubmit = function(a) { b.alertSuccess("Good job!", JSON.stringify(a, null, 2)) } }]) }(),
    function() { angular.module("com.module.sandbox").controller("SandboxGridCtrl", ["$scope", "uiGridConstants", function(a, b) { a.dataset = []; var c = function() { for (var b = 1; b < 10; b++) { var c = { name: "Name field " + b, address: { street: "Street Col " + b }, age: 10 * b, registered: Date.now() };
                    a.dataset.push(c) } };
            c(), a.gridOptions = { showGridFooter: !0, showColumnFooter: !0, enableFiltering: !0, columnDefs: [{ field: "name", width: "13%" }, { field: "address.street", aggregationType: b.aggregationTypes.sum, width: "13%" }, { field: "age", aggregationType: b.aggregationTypes.avg, aggregationHideLabel: !0, width: "13%" }, { name: "ageMin", field: "age", aggregationType: b.aggregationTypes.min, width: "13%", displayName: "Age for min" }, { name: "ageMax", field: "age", aggregationType: b.aggregationTypes.max, width: "13%", displayName: "Age for max" }, { name: "customCellTemplate", field: "age", width: "14%", footerCellTemplate: '<div class="ui-grid-cell-contents" style="background-color: Red;color: White">custom template</div>' }, { name: "registered", field: "registered", width: "20%", cellFilter: "date", footerCellFilter: "date", aggregationType: b.aggregationTypes.max }], data: a.dataset, onRegisterApi: function(b) { a.gridApi = b } } }]) }(),
    function() {
        angular.module("com.module.sandbox").controller("SandboxIconsCtrl", ["$scope", function(a) {
            a.filter = "", a.iconSets = {
                fontAwesome: {
                    baseClass: "fa fa-fw fa-3x",
                    icons: ["fa-adjust", "fa-adn", "fa-align-center", "fa-align-justify", "fa-align-left", "fa-align-right", "fa-ambulance", "fa-anchor", "fa-android", "fa-angellist", "fa-angle-double-down", "fa-angle-double-left", "fa-angle-double-right", "fa-angle-double-up", "fa-angle-down", "fa-angle-left", "fa-angle-right", "fa-angle-up", "fa-apple", "fa-archive", "fa-area-chart", "fa-arrow-circle-down", "fa-arrow-circle-left", "fa-arrow-circle-o-down", "fa-arrow-circle-o-left", "fa-arrow-circle-o-right", "fa-arrow-circle-o-up", "fa-arrow-circle-right", "fa-arrow-circle-up", "fa-arrow-down", "fa-arrow-left", "fa-arrow-right", "fa-arrow-up", "fa-arrows", "fa-arrows-alt", "fa-arrows-h", "fa-arrows-v", "fa-asterisk", "fa-at", "fa-automobile", "fa-backward", "fa-ban", "fa-bank", "fa-bar-chart", "fa-bar-chart-o", "fa-barcode", "fa-bars", "fa-bed", "fa-beer", "fa-behance", "fa-behance-square", "fa-bell", "fa-bell-o", "fa-bell-slash", "fa-bell-slash-o", "fa-bicycle", "fa-binoculars", "fa-birthday-cake", "fa-bitbucket", "fa-bitbucket-square", "fa-bitcoin", "fa-bold", "fa-bolt", "fa-bomb", "fa-book", "fa-bookmark", "fa-bookmark-o", "fa-briefcase", "fa-btc", "fa-bug", "fa-building", "fa-building-o", "fa-bullhorn", "fa-bullseye", "fa-bus", "fa-buysellads", "fa-cab", "fa-calculator", "fa-calendar", "fa-calendar-o", "fa-camera", "fa-camera-retro", "fa-car", "fa-caret-down", "fa-caret-left", "fa-caret-right", "fa-caret-square-o-down", "fa-caret-square-o-left", "fa-caret-square-o-right", "fa-caret-square-o-up", "fa-caret-up", "fa-cart-arrow-down", "fa-cart-plus", "fa-cc", "fa-cc-amex", "fa-cc-discover", "fa-cc-mastercard", "fa-cc-paypal", "fa-cc-stripe", "fa-cc-visa", "fa-certificate", "fa-chain", "fa-chain-broken", "fa-check", "fa-check-circle", "fa-check-circle-o", "fa-check-square", "fa-check-square-o", "fa-chevron-circle-down", "fa-chevron-circle-left", "fa-chevron-circle-right", "fa-chevron-circle-up", "fa-chevron-down", "fa-chevron-left", "fa-chevron-right", "fa-chevron-up", "fa-child", "fa-circle", "fa-circle-o", "fa-circle-o-notch", "fa-circle-thin", "fa-clipboard", "fa-clock-o", "fa-close", "fa-cloud", "fa-cloud-download", "fa-cloud-upload", "fa-cny", "fa-code", "fa-code-fork", "fa-codepen", "fa-coffee", "fa-cog", "fa-cogs", "fa-columns", "fa-comment", "fa-comment-o", "fa-comments", "fa-comments-o", "fa-compass", "fa-compress", "fa-connectdevelop", "fa-copy", "fa-copyright", "fa-credit-card", "fa-crop", "fa-crosshairs", "fa-css3", "fa-cube", "fa-cubes", "fa-cut", "fa-cutlery", "fa-dashboard", "fa-dashcube", "fa-database", "fa-dedent", "fa-delicious", "fa-desktop", "fa-deviantart", "fa-diamond", "fa-digg", "fa-dollar", "fa-dot-circle-o", "fa-download", "fa-dribbble", "fa-dropbox", "fa-drupal", "fa-edit", "fa-eject", "fa-ellipsis-h", "fa-ellipsis-v", "fa-empire", "fa-envelope", "fa-envelope-o", "fa-envelope-square", "fa-eraser", "fa-eur", "fa-euro", "fa-exchange", "fa-exclamation", "fa-exclamation-circle", "fa-exclamation-triangle", "fa-expand", "fa-external-link", "fa-external-link-square", "fa-eye", "fa-eye-slash", "fa-eyedropper", "fa-facebook", "fa-facebook-f", "fa-facebook-official", "fa-facebook-square", "fa-fast-backward", "fa-fast-forward", "fa-fax", "fa-female", "fa-fighter-jet", "fa-file", "fa-file-archive-o", "fa-file-audio-o", "fa-file-code-o", "fa-file-excel-o", "fa-file-image-o", "fa-file-movie-o", "fa-file-o", "fa-file-pdf-o", "fa-file-photo-o", "fa-file-picture-o", "fa-file-powerpoint-o", "fa-file-sound-o", "fa-file-text", "fa-file-text-o", "fa-file-video-o", "fa-file-word-o", "fa-file-zip-o", "fa-files-o", "fa-film", "fa-filter", "fa-fire", "fa-fire-extinguisher", "fa-flag", "fa-flag-checkered", "fa-flag-o", "fa-flash", "fa-flask", "fa-flickr", "fa-floppy-o", "fa-folder", "fa-folder-o", "fa-folder-open", "fa-folder-open-o", "fa-font", "fa-forumbee", "fa-forward", "fa-foursquare", "fa-frown-o", "fa-futbol-o", "fa-gamepad", "fa-gavel", "fa-gbp", "fa-ge", "fa-gear", "fa-gears", "fa-genderless", "fa-gift", "fa-git", "fa-git-square", "fa-github", "fa-github-alt", "fa-github-square", "fa-gittip", "fa-glass", "fa-globe", "fa-google", "fa-google-plus", "fa-google-plus-square", "fa-google-wallet", "fa-graduation-cap", "fa-gratipay", "fa-group", "fa-h-square", "fa-hacker-news", "fa-hand-o-down", "fa-hand-o-left", "fa-hand-o-right", "fa-hand-o-up", "fa-hdd-o", "fa-header", "fa-headphones", "fa-heart", "fa-heart-o", "fa-heartbeat", "fa-history", "fa-home", "fa-hospital-o", "fa-hotel", "fa-html5", "fa-ils", "fa-image", "fa-inbox", "fa-indent", "fa-info", "fa-info-circle", "fa-inr", "fa-instagram", "fa-institution", "fa-ioxhost", "fa-italic", "fa-joomla", "fa-jpy", "fa-jsfiddle", "fa-key", "fa-keyboard-o", "fa-krw", "fa-language", "fa-laptop", "fa-lastfm", "fa-lastfm-square", "fa-leaf", "fa-leanpub", "fa-legal", "fa-lemon-o", "fa-level-down", "fa-level-up", "fa-life-bouy", "fa-life-buoy", "fa-life-ring", "fa-life-saver", "fa-lightbulb-o", "fa-line-chart", "fa-link", "fa-linkedin", "fa-linkedin-square", "fa-linux", "fa-list", "fa-list-alt", "fa-list-ol", "fa-list-ul", "fa-location-arrow", "fa-lock", "fa-long-arrow-down", "fa-long-arrow-left", "fa-long-arrow-right", "fa-long-arrow-up", "fa-magic", "fa-magnet", "fa-mail-forward", "fa-mail-reply", "fa-mail-reply-all", "fa-male", "fa-map-marker", "fa-mars", "fa-mars-double", "fa-mars-stroke", "fa-mars-stroke-h", "fa-mars-stroke-v", "fa-maxcdn", "fa-meanpath", "fa-medium", "fa-medkit", "fa-meh-o", "fa-mercury", "fa-microphone", "fa-microphone-slash", "fa-minus", "fa-minus-circle", "fa-minus-square", "fa-minus-square-o", "fa-mobile", "fa-mobile-phone", "fa-money", "fa-moon-o", "fa-mortar-board", "fa-motorcycle", "fa-music", "fa-navicon", "fa-neuter", "fa-newspaper-o", "fa-openid", "fa-outdent", "fa-pagelines", "fa-paint-brush", "fa-paper-plane", "fa-paper-plane-o", "fa-paperclip", "fa-paragraph", "fa-paste", "fa-pause", "fa-paw", "fa-paypal", "fa-pencil", "fa-pencil-square", "fa-pencil-square-o", "fa-phone", "fa-phone-square", "fa-photo", "fa-picture-o", "fa-pie-chart", "fa-pied-piper", "fa-pied-piper-alt", "fa-pinterest", "fa-pinterest-p", "fa-pinterest-square", "fa-plane", "fa-play", "fa-play-circle", "fa-play-circle-o", "fa-plug", "fa-plus", "fa-plus-circle", "fa-plus-square", "fa-plus-square-o", "fa-power-off", "fa-print", "fa-pulse", "fa-puzzle-piece", "fa-qq", "fa-qrcode", "fa-question", "fa-question-circle", "fa-quote-left", "fa-quote-right", "fa-ra", "fa-random", "fa-rebel", "fa-recycle", "fa-reddit", "fa-reddit-square", "fa-refresh", "fa-remove", "fa-renren", "fa-reorder", "fa-repeat", "fa-reply", "fa-reply-all", "fa-retweet", "fa-rmb", "fa-road", "fa-rocket", "fa-rouble", "fa-rss", "fa-rss-square", "fa-rub", "fa-ruble", "fa-rupee", "fa-save", "fa-scissors", "fa-search", "fa-search-minus", "fa-search-plus", "fa-sellsy", "fa-send", "fa-send-o", "fa-server", "fa-share", "fa-share-alt", "fa-share-alt-square", "fa-share-square", "fa-share-square-o", "fa-shekel", "fa-sheqel", "fa-shield", "fa-ship", "fa-shirtsinbulk", "fa-shopping-cart", "fa-sign-in", "fa-sign-out", "fa-signal", "fa-simplybuilt", "fa-sitemap", "fa-skyatlas", "fa-skype", "fa-slack", "fa-sliders", "fa-slideshare", "fa-smile-o", "fa-soccer-ball-o", "fa-sort", "fa-sort-alpha-asc", "fa-sort-alpha-desc", "fa-sort-amount-asc", "fa-sort-amount-desc", "fa-sort-asc", "fa-sort-desc", "fa-sort-down", "fa-sort-numeric-asc", "fa-sort-numeric-desc", "fa-sort-up", "fa-soundcloud", "fa-space-shuttle", "fa-spin", "fa-spinner", "fa-spoon", "fa-spotify", "fa-square", "fa-square-o", "fa-stack-exchange", "fa-stack-overflow", "fa-star", "fa-star-half", "fa-star-half-empty", "fa-star-half-full", "fa-star-half-o", "fa-star-o", "fa-steam", "fa-steam-square", "fa-step-backward", "fa-step-forward", "fa-stethoscope", "fa-stop", "fa-street-view", "fa-strikethrough", "fa-stumbleupon", "fa-stumbleupon-circle", "fa-subscript", "fa-subway", "fa-suitcase", "fa-sun-o", "fa-superscript", "fa-support", "fa-table", "fa-tablet", "fa-tachometer", "fa-tag", "fa-tags", "fa-tasks", "fa-taxi", "fa-tencent-weibo", "fa-terminal", "fa-text-height", "fa-text-width", "fa-th", "fa-th-large", "fa-th-list", "fa-thumb-tack", "fa-thumbs-down", "fa-thumbs-o-down", "fa-thumbs-o-up", "fa-thumbs-up", "fa-ticket", "fa-times", "fa-times-circle", "fa-times-circle-o", "fa-tint", "fa-toggle-down", "fa-toggle-left", "fa-toggle-off", "fa-toggle-on", "fa-toggle-right", "fa-toggle-up", "fa-train", "fa-transgender", "fa-transgender-alt", "fa-trash", "fa-trash-o", "fa-tree", "fa-trello", "fa-trophy", "fa-truck", "fa-try", "fa-tty", "fa-tumblr", "fa-tumblr-square", "fa-turkish-lira", "fa-twitch", "fa-twitter", "fa-twitter-square", "fa-umbrella", "fa-underline", "fa-undo", "fa-university", "fa-unlink", "fa-unlock", "fa-unlock-alt", "fa-unsorted", "fa-upload", "fa-usd", "fa-user", "fa-user-md", "fa-user-plus", "fa-user-secret", "fa-user-times", "fa-users", "fa-venus", "fa-venus-double", "fa-venus-mars", "fa-viacoin", "fa-video-camera", "fa-vimeo-square", "fa-vine", "fa-vk", "fa-volume-down", "fa-volume-off", "fa-volume-up", "fa-warning", "fa-wechat", "fa-weibo", "fa-weixin", "fa-whatsapp", "fa-wheelchair", "fa-wifi", "fa-windows", "fa-won", "fa-wordpress", "fa-wrench", "fa-xing", "fa-xing-square", "fa-yahoo", "fa-yelp", "fa-yen", "fa-youtube", "fa-youtube-play", "fa-youtube-square"]
                },
                ionicons: { baseClass: "icon fa-fw fa-3x", icons: ["ion-alert", "ion-alert-circled", "ion-android-add", "ion-android-add-circle", "ion-android-alarm-clock", "ion-android-alert", "ion-android-apps", "ion-android-archive", "ion-android-arrow-back", "ion-android-arrow-down", "ion-android-arrow-dropdown", "ion-android-arrow-dropdown-circle", "ion-android-arrow-dropleft", "ion-android-arrow-dropleft-circle", "ion-android-arrow-dropright", "ion-android-arrow-dropright-circle", "ion-android-arrow-dropup", "ion-android-arrow-dropup-circle", "ion-android-arrow-forward", "ion-android-arrow-up", "ion-android-attach", "ion-android-bar", "ion-android-bicycle", "ion-android-boat", "ion-android-bookmark", "ion-android-bulb", "ion-android-bus", "ion-android-calendar", "ion-android-call", "ion-android-camera", "ion-android-cancel", "ion-android-car", "ion-android-cart", "ion-android-chat", "ion-android-checkbox", "ion-android-checkbox-blank", "ion-android-checkbox-outline", "ion-android-checkbox-outline-blank", "ion-android-checkmark-circle", "ion-android-clipboard", "ion-android-close", "ion-android-cloud", "ion-android-cloud-circle", "ion-android-cloud-done", "ion-android-cloud-outline", "ion-android-color-palette", "ion-android-compass", "ion-android-contact", "ion-android-contacts", "ion-android-contract", "ion-android-create", "ion-android-delete", "ion-android-desktop", "ion-android-document", "ion-android-done", "ion-android-done-all", "ion-android-download", "ion-android-drafts", "ion-android-exit", "ion-android-expand", "ion-android-favorite", "ion-android-favorite-outline", "ion-android-film", "ion-android-folder", "ion-android-folder-open", "ion-android-funnel", "ion-android-globe", "ion-android-hand", "ion-android-hangout", "ion-android-happy", "ion-android-home", "ion-android-image", "ion-android-laptop", "ion-android-list", "ion-android-locate", "ion-android-lock", "ion-android-mail", "ion-android-map", "ion-android-menu", "ion-android-microphone", "ion-android-microphone-off", "ion-android-more-horizontal", "ion-android-more-vertical", "ion-android-navigate", "ion-android-notifications", "ion-android-notifications-none", "ion-android-notifications-off", "ion-android-open", "ion-android-options", "ion-android-people", "ion-android-person", "ion-android-person-add", "ion-android-phone-landscape", "ion-android-phone-portrait", "ion-android-pin", "ion-android-plane", "ion-android-playstore", "ion-android-print", "ion-android-radio-button-off", "ion-android-radio-button-on", "ion-android-refresh", "ion-android-remove", "ion-android-remove-circle", "ion-android-restaurant", "ion-android-sad", "ion-android-search", "ion-android-send", "ion-android-settings", "ion-android-share", "ion-android-share-alt", "ion-android-star", "ion-android-star-half", "ion-android-star-outline", "ion-android-stopwatch", "ion-android-subway", "ion-android-sunny", "ion-android-sync", "ion-android-textsms", "ion-android-time", "ion-android-train", "ion-android-unlock", "ion-android-upload", "ion-android-volume-down", "ion-android-volume-mute", "ion-android-volume-off", "ion-android-volume-up", "ion-android-walk", "ion-android-warning", "ion-android-watch", "ion-android-wifi", "ion-aperture", "ion-archive", "ion-arrow-down-a", "ion-arrow-down-b", "ion-arrow-down-c", "ion-arrow-expand", "ion-arrow-graph-down-left", "ion-arrow-graph-down-right", "ion-arrow-graph-up-left", "ion-arrow-graph-up-right", "ion-arrow-left-a", "ion-arrow-left-b", "ion-arrow-left-c", "ion-arrow-move", "ion-arrow-resize", "ion-arrow-return-left", "ion-arrow-return-right", "ion-arrow-right-a", "ion-arrow-right-b", "ion-arrow-right-c", "ion-arrow-shrink", "ion-arrow-swap", "ion-arrow-up-a", "ion-arrow-up-b", "ion-arrow-up-c", "ion-asterisk", "ion-at", "ion-backspace", "ion-backspace-outline", "ion-bag", "ion-battery-charging", "ion-battery-empty", "ion-battery-full", "ion-battery-half", "ion-battery-low", "ion-beaker", "ion-beer", "ion-bluetooth", "ion-bonfire", "ion-bookmark", "ion-bowtie", "ion-briefcase", "ion-bug", "ion-calculator", "ion-calendar", "ion-camera", "ion-card", "ion-cash", "ion-chatbox", "ion-chatbox-working", "ion-chatboxes", "ion-chatbubble", "ion-chatbubble-working", "ion-chatbubbles", "ion-checkmark", "ion-checkmark-circled", "ion-checkmark-round", "ion-chevron-down", "ion-chevron-left", "ion-chevron-right", "ion-chevron-up", "ion-clipboard", "ion-clock", "ion-close", "ion-close-circled", "ion-close-round", "ion-closed-captioning", "ion-cloud", "ion-code", "ion-code-download", "ion-code-working", "ion-coffee", "ion-compass", "ion-compose", "ion-connection-bars", "ion-contrast", "ion-crop", "ion-cube", "ion-disc", "ion-document", "ion-document-text", "ion-drag", "ion-earth", "ion-easel", "ion-edit", "ion-egg", "ion-eject", "ion-email", "ion-email-unread", "ion-erlenmeyer-flask", "ion-erlenmeyer-flask-bubbles", "ion-eye", "ion-eye-disabled", "ion-female", "ion-filing", "ion-film-marker", "ion-fireball", "ion-flag", "ion-flame", "ion-flash", "ion-flash-off", "ion-folder", "ion-fork", "ion-fork-repo", "ion-forward", "ion-funnel", "ion-gear-a", "ion-gear-b", "ion-grid", "ion-hammer", "ion-happy", "ion-happy-outline", "ion-headphone", "ion-heart", "ion-heart-broken", "ion-help", "ion-help-buoy", "ion-help-circled", "ion-home", "ion-icecream", "ion-image", "ion-images", "ion-information", "ion-information-circled", "ion-ionic", "ion-ios-alarm", "ion-ios-alarm-outline", "ion-ios-albums", "ion-ios-albums-outline", "ion-ios-americanfootball", "ion-ios-americanfootball-outline", "ion-ios-analytics", "ion-ios-analytics-outline", "ion-ios-arrow-back", "ion-ios-arrow-down", "ion-ios-arrow-forward", "ion-ios-arrow-left", "ion-ios-arrow-right", "ion-ios-arrow-thin-down", "ion-ios-arrow-thin-left", "ion-ios-arrow-thin-right", "ion-ios-arrow-thin-up", "ion-ios-arrow-up", "ion-ios-at", "ion-ios-at-outline", "ion-ios-barcode", "ion-ios-barcode-outline", "ion-ios-baseball", "ion-ios-baseball-outline", "ion-ios-basketball", "ion-ios-basketball-outline", "ion-ios-bell", "ion-ios-bell-outline", "ion-ios-body", "ion-ios-body-outline", "ion-ios-bolt", "ion-ios-bolt-outline", "ion-ios-book", "ion-ios-book-outline", "ion-ios-bookmarks", "ion-ios-bookmarks-outline", "ion-ios-box", "ion-ios-box-outline", "ion-ios-briefcase", "ion-ios-briefcase-outline", "ion-ios-browsers", "ion-ios-browsers-outline", "ion-ios-calculator", "ion-ios-calculator-outline", "ion-ios-calendar", "ion-ios-calendar-outline", "ion-ios-camera", "ion-ios-camera-outline", "ion-ios-cart", "ion-ios-cart-outline", "ion-ios-chatboxes", "ion-ios-chatboxes-outline", "ion-ios-chatbubble", "ion-ios-chatbubble-outline", "ion-ios-checkmark", "ion-ios-checkmark-empty", "ion-ios-checkmark-outline", "ion-ios-circle-filled", "ion-ios-circle-outline", "ion-ios-clock", "ion-ios-clock-outline", "ion-ios-close", "ion-ios-close-empty", "ion-ios-close-outline", "ion-ios-cloud", "ion-ios-cloud-download", "ion-ios-cloud-download-outline", "ion-ios-cloud-outline", "ion-ios-cloud-upload", "ion-ios-cloud-upload-outline", "ion-ios-cloudy", "ion-ios-cloudy-night", "ion-ios-cloudy-night-outline", "ion-ios-cloudy-outline", "ion-ios-cog", "ion-ios-cog-outline", "ion-ios-color-filter", "ion-ios-color-filter-outline", "ion-ios-color-wand", "ion-ios-color-wand-outline", "ion-ios-compose", "ion-ios-compose-outline", "ion-ios-contact", "ion-ios-contact-outline", "ion-ios-copy", "ion-ios-copy-outline", "ion-ios-crop", "ion-ios-crop-strong", "ion-ios-download", "ion-ios-download-outline", "ion-ios-drag", "ion-ios-email", "ion-ios-email-outline", "ion-ios-eye", "ion-ios-eye-outline", "ion-ios-fastforward", "ion-ios-fastforward-outline", "ion-ios-filing", "ion-ios-filing-outline", "ion-ios-film", "ion-ios-film-outline", "ion-ios-flag", "ion-ios-flag-outline", "ion-ios-flame", "ion-ios-flame-outline", "ion-ios-flask", "ion-ios-flask-outline", "ion-ios-flower", "ion-ios-flower-outline", "ion-ios-folder", "ion-ios-folder-outline", "ion-ios-football", "ion-ios-football-outline", "ion-ios-game-controller-a", "ion-ios-game-controller-a-outline", "ion-ios-game-controller-b", "ion-ios-game-controller-b-outline", "ion-ios-gear", "ion-ios-gear-outline", "ion-ios-glasses", "ion-ios-glasses-outline", "ion-ios-grid-view", "ion-ios-grid-view-outline", "ion-ios-heart", "ion-ios-heart-outline", "ion-ios-help", "ion-ios-help-empty", "ion-ios-help-outline", "ion-ios-home", "ion-ios-home-outline", "ion-ios-infinite", "ion-ios-infinite-outline", "ion-ios-information", "ion-ios-information-empty", "ion-ios-information-outline", "ion-ios-ionic-outline", "ion-ios-keypad", "ion-ios-keypad-outline", "ion-ios-lightbulb", "ion-ios-lightbulb-outline", "ion-ios-list", "ion-ios-list-outline", "ion-ios-location", "ion-ios-location-outline", "ion-ios-locked", "ion-ios-locked-outline", "ion-ios-loop", "ion-ios-loop-strong", "ion-ios-medical", "ion-ios-medical-outline", "ion-ios-medkit", "ion-ios-medkit-outline", "ion-ios-mic", "ion-ios-mic-off", "ion-ios-mic-outline", "ion-ios-minus", "ion-ios-minus-empty", "ion-ios-minus-outline", "ion-ios-monitor", "ion-ios-monitor-outline", "ion-ios-moon", "ion-ios-moon-outline", "ion-ios-more", "ion-ios-more-outline", "ion-ios-musical-note", "ion-ios-musical-notes", "ion-ios-navigate", "ion-ios-navigate-outline", "ion-ios-nutrition", "ion-ios-nutrition-outline", "ion-ios-paper", "ion-ios-paper-outline", "ion-ios-paperplane", "ion-ios-paperplane-outline", "ion-ios-partlysunny", "ion-ios-partlysunny-outline", "ion-ios-pause", "ion-ios-pause-outline", "ion-ios-paw", "ion-ios-paw-outline", "ion-ios-people", "ion-ios-people-outline", "ion-ios-person", "ion-ios-person-outline", "ion-ios-personadd", "ion-ios-personadd-outline", "ion-ios-photos", "ion-ios-photos-outline", "ion-ios-pie", "ion-ios-pie-outline", "ion-ios-pint", "ion-ios-pint-outline", "ion-ios-play", "ion-ios-play-outline", "ion-ios-plus", "ion-ios-plus-empty", "ion-ios-plus-outline", "ion-ios-pricetag", "ion-ios-pricetag-outline", "ion-ios-pricetags", "ion-ios-pricetags-outline", "ion-ios-printer", "ion-ios-printer-outline", "ion-ios-pulse", "ion-ios-pulse-strong", "ion-ios-rainy", "ion-ios-rainy-outline", "ion-ios-recording", "ion-ios-recording-outline", "ion-ios-redo", "ion-ios-redo-outline", "ion-ios-refresh", "ion-ios-refresh-empty", "ion-ios-refresh-outline", "ion-ios-reload", "ion-ios-reverse-camera", "ion-ios-reverse-camera-outline", "ion-ios-rewind", "ion-ios-rewind-outline", "ion-ios-rose", "ion-ios-rose-outline", "ion-ios-search", "ion-ios-search-strong", "ion-ios-settings", "ion-ios-settings-strong", "ion-ios-shuffle", "ion-ios-shuffle-strong", "ion-ios-skipbackward", "ion-ios-skipbackward-outline", "ion-ios-skipforward", "ion-ios-skipforward-outline", "ion-ios-snowy", "ion-ios-speedometer", "ion-ios-speedometer-outline", "ion-ios-star", "ion-ios-star-half", "ion-ios-star-outline", "ion-ios-stopwatch", "ion-ios-stopwatch-outline", "ion-ios-sunny", "ion-ios-sunny-outline", "ion-ios-telephone", "ion-ios-telephone-outline", "ion-ios-tennisball", "ion-ios-tennisball-outline", "ion-ios-thunderstorm", "ion-ios-thunderstorm-outline", "ion-ios-time", "ion-ios-time-outline", "ion-ios-timer", "ion-ios-timer-outline", "ion-ios-toggle", "ion-ios-toggle-outline", "ion-ios-trash", "ion-ios-trash-outline", "ion-ios-undo", "ion-ios-undo-outline", "ion-ios-unlocked", "ion-ios-unlocked-outline", "ion-ios-upload", "ion-ios-upload-outline", "ion-ios-videocam", "ion-ios-videocam-outline", "ion-ios-volume-high", "ion-ios-volume-low", "ion-ios-wineglass", "ion-ios-wineglass-outline", "ion-ios-world", "ion-ios-world-outline", "ion-ipad", "ion-iphone", "ion-ipod", "ion-jet", "ion-key", "ion-knife", "ion-laptop", "ion-leaf", "ion-levels", "ion-lightbulb", "ion-link", "ion-load-a", "ion-load-b", "ion-load-c", "ion-load-d", "ion-location", "ion-lock-combination", "ion-locked", "ion-log-in", "ion-log-out", "ion-loop", "ion-magnet", "ion-male", "ion-man", "ion-map", "ion-medkit", "ion-merge", "ion-mic-a", "ion-mic-b", "ion-mic-c", "ion-minus", "ion-minus-circled", "ion-minus-round", "ion-model-s", "ion-monitor", "ion-more", "ion-mouse", "ion-music-note", "ion-navicon", "ion-navicon-round", "ion-navigate", "ion-network", "ion-no-smoking", "ion-nuclear", "ion-outlet", "ion-paintbrush", "ion-paintbucket", "ion-paper-airplane", "ion-paperclip", "ion-pause", "ion-person", "ion-person-add", "ion-person-stalker", "ion-pie-graph", "ion-pin", "ion-pinpoint", "ion-pizza", "ion-plane", "ion-planet", "ion-play", "ion-playstation", "ion-plus", "ion-plus-circled", "ion-plus-round", "ion-podium", "ion-pound", "ion-power", "ion-pricetag", "ion-pricetags", "ion-printer", "ion-pull-request", "ion-qr-scanner", "ion-quote", "ion-radio-waves", "ion-record", "ion-refresh", "ion-reply", "ion-reply-all", "ion-ribbon-a", "ion-ribbon-b", "ion-sad", "ion-sad-outline", "ion-scissors", "ion-search", "ion-settings", "ion-share", "ion-shuffle", "ion-skip-backward", "ion-skip-forward", "ion-social-android", "ion-social-android-outline", "ion-social-angular", "ion-social-angular-outline", "ion-social-apple", "ion-social-apple-outline", "ion-social-bitcoin", "ion-social-bitcoin-outline", "ion-social-buffer", "ion-social-buffer-outline", "ion-social-chrome", "ion-social-chrome-outline", "ion-social-codepen", "ion-social-codepen-outline", "ion-social-css3", "ion-social-css3-outline", "ion-social-designernews", "ion-social-designernews-outline", "ion-social-dribbble", "ion-social-dribbble-outline", "ion-social-dropbox", "ion-social-dropbox-outline", "ion-social-euro", "ion-social-euro-outline", "ion-social-facebook", "ion-social-facebook-outline", "ion-social-foursquare", "ion-social-foursquare-outline", "ion-social-freebsd-devil", "ion-social-github", "ion-social-github-outline", "ion-social-google", "ion-social-google-outline", "ion-social-googleplus", "ion-social-googleplus-outline", "ion-social-hackernews", "ion-social-hackernews-outline", "ion-social-html5", "ion-social-html5-outline", "ion-social-instagram", "ion-social-instagram-outline", "ion-social-javascript", "ion-social-javascript-outline", "ion-social-linkedin", "ion-social-linkedin-outline", "ion-social-markdown", "ion-social-nodejs", "ion-social-octocat", "ion-social-pinterest", "ion-social-pinterest-outline", "ion-social-python", "ion-social-reddit", "ion-social-reddit-outline", "ion-social-rss", "ion-social-rss-outline", "ion-social-sass", "ion-social-skype", "ion-social-skype-outline", "ion-social-snapchat", "ion-social-snapchat-outline", "ion-social-tumblr", "ion-social-tumblr-outline", "ion-social-tux", "ion-social-twitch", "ion-social-twitch-outline", "ion-social-twitter", "ion-social-twitter-outline", "ion-social-usd", "ion-social-usd-outline", "ion-social-vimeo", "ion-social-vimeo-outline", "ion-social-whatsapp", "ion-social-whatsapp-outline", "ion-social-windows", "ion-social-windows-outline", "ion-social-wordpress", "ion-social-wordpress-outline", "ion-social-yahoo", "ion-social-yahoo-outline", "ion-social-yen", "ion-social-yen-outline", "ion-social-youtube", "ion-social-youtube-outline", "ion-soup-can", "ion-soup-can-outline", "ion-speakerphone", "ion-speedometer", "ion-spoon", "ion-star", "ion-stats-bars", "ion-steam", "ion-stop", "ion-thermometer", "ion-thumbsdown", "ion-thumbsup", "ion-toggle", "ion-toggle-filled", "ion-transgender", "ion-trash-a", "ion-trash-b", "ion-trophy", "ion-tshirt", "ion-tshirt-outline", "ion-umbrella", "ion-university", "ion-unlocked", "ion-upload", "ion-usb", "ion-videocamera", "ion-volume-high", "ion-volume-low", "ion-volume-medium", "ion-volume-mute", "ion-wand", "ion-waterdrop", "ion-wifi", "ion-wineglass", "ion-woman", "ion-wrench", "ion-xbox"] }
            }
        }])
    }(),
    function() { angular.module("com.module.sandbox").controller("SandboxSchemaformCtrl", ["CoreService", function(a) { this.model = {}, this.schema = { type: "object", title: "Comment", properties: { name: { title: "Name", type: "string" }, email: { title: "Email", type: "string", pattern: "^\\S+@\\S+$" }, comment: { title: "Comment", type: "string" } }, required: ["name", "email", "comment"] }, this.form = ["name", "email", { key: "comment", type: "textarea", placeholder: "Make a comment" }, { type: "submit", title: "OK" }], this.onSubmit = function() { a.alertSuccess("Good job!", "Well done, " + this.model.name) } }]) }(),
    function() { angular.module("com.module.sandbox").controller("SandboxTreesCtrl", ["$scope", "$timeout", function(a, b) { var c, d, e, f; return a.myTreeHandler = function(b) { var c; if (a.output = "You selected: " + b.label, null !== (c = b.data) ? c.description : void 0) return a.output += "(" + b.data.description + ")" }, c = function(b) { return a.output = "APPLE! : " + b.label, a.output }, e = [{ label: "Animal", children: [{ label: "Dog", data: { description: "man's best friend" } }, { label: "Cat", data: { description: "Felis catus" } }, { label: "Hippopotamus", data: { description: "hungry, hungry" } }, { label: "Chicken", children: ["White Leghorn", "Rhode Island Red", "Jersey Giant"] }] }, { label: "Vegetable", data: { definition: "A plant or part of a plant used as food, typically as accompaniment to meat or fish, such as a cabbage, potato, carrot, or bean.", dataCanContainAnything: !0 }, onSelect: function(b) { return a.output = "Vegetable: " + b.data.definition, a.output }, children: [{ label: "Oranges" }, { label: "Apples", children: [{ label: "Granny Smith", onSelect: c }, { label: "Red Delicous", onSelect: c }, { label: "Fuji", onSelect: c }] }] }, { label: "Mineral", children: [{ label: "Rock", children: ["Igneous", "Sedimentary", "Metamorphic"] }, { label: "Metal", children: ["Aluminum", "Steel", "Copper"] }, { label: "Plastic", children: [{ label: "Thermoplastic", children: ["polyethylene", "polypropylene", "polystyrene", " polyvinyl chloride"] }, { label: "Thermosetting Polymer", children: ["polyester", "polyurethane", "vulcanized rubber", "bakelite", "urea-formaldehyde"] }] }] }], f = [{ label: "North America", children: [{ label: "Canada", children: ["Toronto", "Vancouver"] }, { label: "USA", children: ["New York", "Los Angeles"] }, { label: "Mexico", children: ["Mexico City", "Guadalajara"] }] }, { label: "South America", children: [{ label: "Venezuela", children: ["Caracas", "Maracaibo"] }, { label: "Brazil", children: ["Sao Paulo", "Rio de Janeiro"] }, { label: "Argentina", children: ["Buenos Aires", "Cordoba"] }] }], a.myTreeData = e, a.tryChangingTheTreeData = function() { return a.myTreeData === e ? (a.myTreeData = f, a.myTreeData) : (a.myTreeData = e, a.myTreeData) }, a.myTree = d = {}, a.tryAsyncLoad = function() { return a.myTreeData = [], a.doingAsync = !0, b(function() { return Math.random() < .5 ? a.myTreeData = e : a.myTreeData = f, a.doingAsync = !1, d.expandAll() }, 1e3) }, a.tryAddingABranch = function() { var a; return a = d.getSelectedBranch(), d.addBranch(a, { label: "New Branch", data: { something: 42, else: 43 } }) }, a.tryAddingABranch }]) }(),
    function() { angular.module("com.module.settings", []) }(),
    function() { angular.module("com.module.settings").run(["$rootScope", "gettextCatalog", function(a, b) { a.addMenu(b.getString("Settings"), "app.settings.list", "fa-cog", !0) }]) }(),
    function() { angular.module("com.module.settings").config(["$stateProvider", function(a) { a.state("app.settings", { abstract: !0, url: "/settings", templateUrl: "modules/settings/views/main.html", data: { permissions: { only: ["ADMIN"], redirectTo: "login" } } }).state("app.settings.list", { url: "", templateUrl: "modules/settings/views/list.html", controllerAs: "ctrl", controller: ["settings", function(a) { this.settings = a }], resolve: { settings: ["SettingService", function(a) { return a.find() }] } }).state("app.settings.add", { url: "/add", templateUrl: "modules/settings/views/form.html", controllerAs: "ctrl", controller: ["$state", "SettingService", "setting", function(a, b, c) { this.setting = c, this.formFields = b.getFormFields(), this.formOptions = {}, this.submit = function() { b.upsert(this.setting).then(function() { a.go("^.list") }) } }], resolve: { setting: function() { return {} } } }).state("app.settings.edit", { url: "/:id/edit", templateUrl: "modules/settings/views/form.html", controllerAs: "ctrl", controller: ["$state", "SettingService", "setting", function(a, b, c) { this.setting = c, this.formFields = b.getFormFields(), this.formOptions = {}, this.submit = function() { b.upsert(this.setting).then(function() { a.go("^.list") }) } }], resolve: { setting: ["$stateParams", "SettingService", function(a, b) { return b.findById(a.id) }] } }).state("app.settings.view", { url: "/:id", templateUrl: "modules/settings/views/view.html", controllerAs: "ctrl", controller: ["setting", function(a) { this.setting = a }], resolve: { setting: ["$stateParams", "SettingService", function(a, b) { return b.findById(a.id) }] } }).state("app.settings.delete", { url: "/:id/delete", template: "", controllerAs: "ctrl", controller: ["$stateParams", "$state", "SettingService", function(a, b, c) { c.delete(a.id, function() { b.go("^.list") }, function() { b.go("^.list") }) }] }) }]) }(),
    function() { angular.module("com.module.settings").service("SettingService", ["$state", "CoreService", "Setting", "gettextCatalog", function(a, b, c, d) { this.find = function() { return c.find().$promise }, this.findById = function(a) { return c.findById({ id: a }).$promise }, this.upsert = function(a) { return c.upsert(a).$promise.then(function() { b.toastSuccess(d.getString("Setting saved"), d.getString("Your setting is safe with us!")) }).catch(function(a) { b.toastError(d.getString("Error saving setting "), d.getString("This setting could no be saved: " + a)) }) }, this.delete = function(a, e, f) { b.confirm(d.getString("Are you sure?"), d.getString("Deleting this cannot be undone"), function() { c.deleteById({ id: a }, function() { b.toastSuccess(d.getString("Setting deleted"), d.getString("Your setting is deleted!")), e() }, function(a) { b.toastError(d.getString("Error deleting setting"), d.getString("Your setting is not deleted! ") + a), f() }) }, function() { f() }) }, this.getFormFields = function() { var a = [{ key: "key", type: "input", templateOptions: { label: "键", required: !0 } }, { key: "value", type: "input", templateOptions: { label: "值", required: !0 } }]; return a } }]) }(),
    function() { angular.module("com.module.users", []) }(),
    function() { angular.module("com.module.users").config(["$routeProvider", "$httpProvider", function(a, b) { b.interceptors.push(["$q", "$location", "CoreService", function(a, b, c) { return { responseError: function(d) { return 401 === d.status && (b.nextAfterLogin = b.path(), "/router" === b.path() || "/login" === b.path() ? console.log("401 while on router on login path") : ("/register" !== b.path() && b.path("/login"), c.toastWarning("Error 401 received", "We received a 401 error from the API! Redirecting to login"))), 404 === d.status && (console.log(d), c.toastError("Error 404 received", d.data.error.message)), 422 === d.status && (console.log(d), c.toastError("Error 422 received", d.data.error.message)), 0 === d.status && (b.path("/"), c.toastError("Connection Refused", "The connection to the API is refused. Please verify that the API is running!")), a.reject(d) } } }]) }]) }(),
    function() { angular.module("com.module.users").run(["$rootScope", "gettextCatalog", "User", "RoleStore", function(a, b, c, d) { a.addMenu(b.getString("Users"), "app.users.list", "fa-user", !0) }]) }(),
    function() { angular.module("com.module.users").config(["$stateProvider", function(a) { a.state("login", { url: "/login", template: "<login></login>", controller: "LoginCtrl" }).state("register", { url: "/register", template: "<register></register>", controller: "RegisterCtrl" }).state("app.users", { abstract: !0, url: "/users", templateUrl: "modules/users/views/main.html", data: { permissions: { only: ["ADMIN"], redirectTo: "login" } } }).state("app.users.list", { url: "", templateUrl: "modules/users/views/list.html", controllerAs: "ctrl", controller: ["$scope", "users", function(a, b) { this.users = b }], resolve: { users: ["UserService", function(a) { return a.find() }] } }).state("app.users.add", { url: "/add", templateUrl: "modules/users/views/form.html", controllerAs: "ctrl", controller: ["$state", "UserService", "user", function(a, b, c) { this.user = c, this.formFields = b.getFormFields("add"), this.formOptions = {}, this.submit = function() { b.create(this.user, function() { a.go("^.list") }, function(a) { console.log(a) }) } }], resolve: { user: function() { return {} } } }).state("app.users.edit", { url: "/edit/:id", templateUrl: "modules/users/views/form.html", controllerAs: "ctrl", controller: ["$state", "UserService", "user", function(a, b, c) { this.user = c, this.formFields = b.getFormFields("edit"), this.formOptions = {}, this.submit = function() { b.upsert(this.user).then(function() { a.go("^.list") }) } }], resolve: { user: ["$stateParams", "UserService", function(a, b) { return b.findById(a.id) }] } }).state("app.users.password", { url: "/password/:id", templateUrl: "modules/users/views/form.html", controllerAs: "ctrl", controller: ["$state", "UserService", "user", function(a, b, c) { this.user = c, console.log(this.user), this.formFields = b.getFormFields("password"), this.formOptions = {}, this.submit = function() { b.upsert(this.user).then(function() { a.go("^.list") }) } }], resolve: { user: ["$stateParams", "UserService", function(a, b) { return b.findById(a.id) }] } }).state("app.users.view", { url: "/view/:id", templateUrl: "modules/users/views/view.html", controllerAs: "ctrl", controller: ["user", function(a) { this.user = a }], resolve: { user: ["$stateParams", "UserService", function(a, b) { return b.findById(a.id) }] } }).state("app.users.delete", { url: "/:id/delete", template: "", controller: ["$stateParams", "$state", "UserService", function(a, b, c) { c.delete(a.id, function() { b.go("^.list") }, function() { b.go("^.list") }) }] }).state("app.users.profile", { url: "/profile", templateUrl: "modules/users/views/profile.html", controllerAs: "ctrl", controller: ["$state", "UserService", "user", function(a, b, c) { this.user = c, this.formFields = b.getFormFields("edit"), this.formOptions = {}, this.submit = function() { b.upsert(this.user).then(function() { a.go("^.profile") }) } }], resolve: { user: ["User", function(a) { return a.getCurrent(function(a) { return a }, function(a) { console.log(a) }) }] } }) }]) }(),
    function() { angular.module("com.module.users").controller("LoginCtrl", ["$scope", "$routeParams", "$location", "CoreService", "User", "AppAuth", "AuthProvider", "gettextCatalog", function(a, b, c, d, e, f, g, h) { var i = 12096e5;
            a.credentials = { ttl: i, rememberMe: !0 }, "development" === d.env.name && (a.credentials.email = "admin@admin.com", a.credentials.password = "123456"), a.schema = [{ label: "", property: "email", placeholder: h.getString("Email"), type: "email", attr: { required: !0, ngMinlength: 4 }, msgs: { required: "请填写邮箱地址", email: "填写的邮箱地址不正确", valid: h.getString("Nice email address!") } }, { label: "", property: "password", placeholder: h.getString("Password"), type: "password", attr: { required: !0 }, msgs: { required: "请填写登录密码" } }, { property: "rememberMe", label: h.getString("Stay signed in"), type: "checkbox" }], a.options = { validation: { enabled: !0, showMessages: !0 }, layout: { type: "basic", labelSize: 3, inputSize: 9 } }, a.socialLogin = function(a) { window.location = d.env.siteUrl + a.authPath }, g.count(function(b) { b.count > 0 && g.find(function(b) { a.authProviders = b }) }), a.login = function() { a.loginResult = e.login({ include: "user", rememberMe: a.credentials.rememberMe }, a.credentials, function() { var b = c.nextAfterLogin || "/";
                    c.nextAfterLogin = null, f.currentUser = a.loginResult.user, d.toastSuccess(h.getString("Logged in"), h.getString("You are logged in!")), "/login" === b && (b = "/"), c.path(b) }, function(b) { a.loginError = b.data.error }) } }]) }(),
    function() { angular.module("com.module.users").controller("RegisterCtrl", ["$rootScope", "$scope", "$routeParams", "$location", "$filter", "CoreService", "User", "AppAuth", "gettextCatalog", "UserService", function(a, b, c, d, e, f, g, h, i, j) { "true" !== a.settings.registrationEnabled && d.path("/login"), b.registration = { name: "", email: "", password: "" }, b.schema = [{ label: "", property: "name", placeholder: "姓名", type: "text", attr: { ngMinlength: 2, required: !0 }, msgs: { required: "请填写姓名", minlength: "至少需2个字" } }, { label: "", property: "email", placeholder: i.getString("Email"), type: "email", attr: { required: !0 }, msgs: { required: "请填写邮箱地址", email: "填写的邮箱地址不正确", valid: i.getString("Nice email address!") } }, { type: "multiple", fields: [{ label: "", property: "password", placeholder: i.getString("Password"), type: "password", attr: { required: !0, ngMinlength: 6 }, msgs: { required: "请填写密码", minlength: "至少需6个字符" } }, { label: "", property: "confirmPassword", placeholder: i.getString("Confirm Password"), type: "password", attr: { confirmPassword: "registration.password", required: !0 }, msgs: { required: "请填写确认密码", match: i.getString("Your passwords need to match") } }], columns: 6 }], b.options = { validation: { enabled: !0, showMessages: !0 }, layout: { type: "basic", labelSize: 3, inputSize: 9 } }, b.confirmPassword = "", b.register = function() { b.registration.username = b.registration.email, delete b.registration.confirmPassword, b.user = j.create(b.registration, function() { b.loginResult = g.login({ include: "user", rememberMe: !0 }, b.registration, function() { h.currentUser = b.loginResult.user, f.toastSuccess(i.getString("Registered"), i.getString("You are registered!")), d.path("/") }, function(a) { f.toastWarning(i.getString("Error signin in after registration!"), a.data.error.message), b.loginError = a.data.error }) }, function(a) { f.toastError(i.getString("Error registering!"), a.data.error.message), b.registerError = a.data.error }) } }]).directive("confirmPassword", function() { return { restrict: "A", require: "ngModel", link: function(a, b, c, d) { var e = function(b) { var e = a.$eval(c.confirmPassword); return d.$setValidity("match", d.$isEmpty(b) || b === e), b };
                    d.$parsers.push(e), a.$watch(c.confirmPassword, function() { e(d.$viewValue) }) } } }) }(),
    function() { angular.module("com.module.users").directive("login", function() { return { templateUrl: "modules/users/views/login.html", restrict: "E" } }) }(),
    function() { angular.module("com.module.users").directive("register", function() { return { templateUrl: "modules/users/views/register.html", restrict: "E" } }) }(),
    function() { angular.module("com.module.users").factory("AppAuth", ["$cookies", "User", "LoopBackAuth", "$http", function(a, b, c, d) { var e = { login: function(b, f) { c.currentUserId = c.accessTokenId = null, d.post("/api/users/login?include=user", { email: b.email, password: b.password }).then(function(b) { b.data && b.data.id && (c.currentUserId = b.data.userId, c.accessTokenId = b.data.id), null === c.currentUserId && (delete a.accessToken, c.accessTokenId = null), c.save(), c.currentUserId && b.data && b.data.user ? (e.currentUser = b.data.user, f(e.currentUser)) : f({}) }, function() { console.log("User.login() err", arguments), c.currentUserId = c.accessTokenId = null, c.save(), f({}) }) }, logout: function(f) { b.logout({ access_token: c.accessTokenId }, function() { delete a.access_token, delete a.accessToken, d.post("/auth/logout") }), e.currentUser = null, f() }, ensureHasCurrentUser: function(b) { this.currentUser && "social" !== this.currentUser.id || !a.accessToken ? (e.currentUser && console.log("Using cached current user."), b(e.currentUser)) : (c.currentUserId = c.accessTokenId = null, d.get("/auth/current").then(function(d) { d.data.id && (c.currentUserId = d.data.id, c.accessTokenId = a.accessToken.substring(2, 66)), null === c.currentUserId && (delete a.accessToken, c.accessTokenId = null), c.save(), e.currentUser = d.data; var f = e.currentUser && e.currentUser.profiles && e.currentUser.profiles.length && e.currentUser.profiles[0];
                        f && (e.currentUser.name = f.profile.name), b(e.currentUser) }, function() { console.log("User.getCurrent() err", arguments), c.currentUserId = c.accessTokenId = null, c.save(), b({}) })) } }; return e }]) }(),
    function() {
        angular.module("com.module.users").service("UserService", ["$state", "CoreService", "User", "gettextCatalog", function(a, b, c, d) {
            this.find = function() { return c.find().$promise }, this.findById = function(a) { return c.findOne({ filter: { where: { id: a }, include: "roles" } }).$promise }, this.upsert = function(a) { return c.upsert(a).$promise.then(function() { b.toastSuccess(d.getString("User saved"), d.getString("Your user is safe with us!")) }).catch(function(a) { b.toastError(d.getString("Error saving user "), d.getString("This user could no be saved: " + a)) }) }, this.create = function(a, e, f) { c.create(a, function() { b.toastSuccess(d.getString("User saved"), d.getString("Your user is safe with us!")), e() }, function(a) { b.toastError(d.getString("Error saving user "), d.getString("This user could no be saved: " + a)), f() }) }, this.delete = function(a, e, f) { b.confirm(d.getString("Are you sure?"), d.getString("Deleting this cannot be undone"), function() { c.deleteById({ id: a }, function() { b.toastSuccess(d.getString("User deleted"), d.getString("Your user is deleted!")), e() }, function(a) { b.toastError(d.getString("Error deleting user"), d.getString("Your user is not deleted! ") + a), f() }) }, function() { f() }) }, this.getFormFields = function(a) {
                if ("password" === a) { var b = [{ key: "password", type: "input", templateOptions: { type: "password", label: "新密码", placeholder: "请输入最少6个字符的新密码", required: !0, minlength: 6 } }, { key: "confirmPassword", type: "input", optionsTypes: ["matchField"], model: this.confirmationModel, templateOptions: { type: "password", label: "确认密码", placeholder: "请输入确认密码", required: !0 }, data: { fieldToMatch: "password", modelToMatch: this.model } }]; return b }
                var c = [{ key: "username", type: "input", templateOptions: { label: d.getString("Username"), required: !0 } }, { key: "email", type: "input", templateOptions: { label: d.getString("Email"), required: !0 } }, { key: "name", type: "input", templateOptions: { label: "姓名", required: !0 } }];
                return "add" === a && (c.push({ key: "password", type: "input", templateOptions: { type: "password", label: d.getString("Password"), placeholder: "请输入最少6个字符的新密码", required: !0, minlength: 6 } }), c.push({
                    key: "confirmPassword",
                    type: "input",
                    optionsTypes: ["matchField"],
                    model: this.confirmationModel,
                    templateOptions: {
                        type: "password",
                        label: "确认密码",
                        placeholder: "请输入确认密码",
                        required: !0
                    },
                    data: { fieldToMatch: "password", modelToMatch: this.model }
                })), c
            }
        }])
    }();